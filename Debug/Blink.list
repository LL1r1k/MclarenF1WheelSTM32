
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000068e8  0800bb64  0800bb64  0001bb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801244c  0801244c  000300bc  2**0
                  CONTENTS
  4 .ARM          00000000  0801244c  0801244c  000300bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801244c  0801244c  000300bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801244c  0801244c  0002244c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012450  08012450  00022450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08012454  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  200000bc  08012510  000300bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  08012510  00030880  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000201c0  00000000  00000000  000300e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000469b  00000000  00000000  000502a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00054940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00055cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e958  00000000  00000000  00056e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adc1  00000000  00000000  000757c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097252  00000000  00000000  00090581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001277d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005534  00000000  00000000  00127828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bb4c 	.word	0x0800bb4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	0800bb4c 	.word	0x0800bb4c

0800014c <_ZN15FlickerFreeCharC1Etth>:
#include <FlickerFreeChar.h>

FlickerFreeChar::FlickerFreeChar(uint16_t X, uint16_t Y, uint8_t Size)
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	4608      	mov	r0, r1
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	4603      	mov	r3, r0
 800015c:	817b      	strh	r3, [r7, #10]
 800015e:	460b      	mov	r3, r1
 8000160:	813b      	strh	r3, [r7, #8]
 8000162:	4613      	mov	r3, r2
 8000164:	71fb      	strb	r3, [r7, #7]
{
	this->Size= Size;
 8000166:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	711a      	strb	r2, [r3, #4]
	this->X= X;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	897a      	ldrh	r2, [r7, #10]
 8000172:	801a      	strh	r2, [r3, #0]
	this->Y= Y;
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	893a      	ldrh	r2, [r7, #8]
 8000178:	805a      	strh	r2, [r3, #2]
	this->oldChar = ' ';
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	2220      	movs	r2, #32
 800017e:	715a      	strb	r2, [r3, #5]
}
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	4618      	mov	r0, r3
 8000184:	3714      	adds	r7, #20
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <_ZN15FlickerFreeChar9Draw_CharEh>:


void  FlickerFreeChar::Draw_Char(uint8_t Character)
{
 800018c:	b590      	push	{r4, r7, lr}
 800018e:	b085      	sub	sp, #20
 8000190:	af02      	add	r7, sp, #8
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	460b      	mov	r3, r1
 8000196:	70fb      	strb	r3, [r7, #3]
	BSP_LCD_Draw_Char(Character, X, Y, Size,oldChar);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	8819      	ldrh	r1, [r3, #0]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	885a      	ldrh	r2, [r3, #2]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80001a6:	b29c      	uxth	r4, r3
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	795b      	ldrb	r3, [r3, #5]
 80001ac:	78f8      	ldrb	r0, [r7, #3]
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	4623      	mov	r3, r4
 80001b2:	f004 fe75 	bl	8004ea0 <BSP_LCD_Draw_Char>
	oldChar = Character;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	78fa      	ldrb	r2, [r7, #3]
 80001ba:	715a      	strb	r2, [r3, #5]
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd90      	pop	{r4, r7, pc}

080001c4 <_ZN15FlickerFreeTextC1EtthPhh>:
#include <FlickerFreeText.h>

FlickerFreeText::FlickerFreeText(uint16_t X, uint16_t Y, uint8_t Size, uint8_t* sample, uint8_t len)
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b089      	sub	sp, #36	; 0x24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	4608      	mov	r0, r1
 80001ce:	4611      	mov	r1, r2
 80001d0:	461a      	mov	r2, r3
 80001d2:	4603      	mov	r3, r0
 80001d4:	817b      	strh	r3, [r7, #10]
 80001d6:	460b      	mov	r3, r1
 80001d8:	813b      	strh	r3, [r7, #8]
 80001da:	4613      	mov	r3, r2
 80001dc:	71fb      	strb	r3, [r7, #7]
{
	this->Size = Size;
 80001de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	711a      	strb	r2, [r3, #4]
	this->X = X;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	897a      	ldrh	r2, [r7, #10]
 80001ea:	801a      	strh	r2, [r3, #0]
	this->Y = Y;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	893a      	ldrh	r2, [r7, #8]
 80001f0:	805a      	strh	r2, [r3, #2]
	this->sample = sample;
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80001f6:	609a      	str	r2, [r3, #8]
	this->len = len;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80001fe:	731a      	strb	r2, [r3, #12]

	uint8_t* tmpText = sample;
 8000200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000202:	61fb      	str	r3, [r7, #28]
	GFXglyph* glyph;
	GFXfont* font = BSP_LCD_GetFont();
 8000204:	f004 fd4c 	bl	8004ca0 <BSP_LCD_GetFont>
 8000208:	6178      	str	r0, [r7, #20]

	this->oldText = new uint8_t[len+1];
 800020a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800020e:	3301      	adds	r3, #1
 8000210:	4618      	mov	r0, r3
 8000212:	f00a ffaa 	bl	800b16a <_Znaj>
 8000216:	4603      	mov	r3, r0
 8000218:	461a      	mov	r2, r3
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	615a      	str	r2, [r3, #20]
	this->chars = new FlickerFreeChar*[len];
 800021e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000222:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000226:	4293      	cmp	r3, r2
 8000228:	d201      	bcs.n	800022e <_ZN15FlickerFreeTextC1EtthPhh+0x6a>
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	e001      	b.n	8000232 <_ZN15FlickerFreeTextC1EtthPhh+0x6e>
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
 8000232:	4618      	mov	r0, r3
 8000234:	f00a ff99 	bl	800b16a <_Znaj>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	611a      	str	r2, [r3, #16]
	for(uint8_t i=0;i<len;i++)
 8000240:	2300      	movs	r3, #0
 8000242:	76fb      	strb	r3, [r7, #27]
 8000244:	7efa      	ldrb	r2, [r7, #27]
 8000246:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800024a:	429a      	cmp	r2, r3
 800024c:	d231      	bcs.n	80002b2 <_ZN15FlickerFreeTextC1EtthPhh+0xee>
	{
		glyph = &(font->glyph[(*tmpText++-' ')]);
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	1c59      	adds	r1, r3, #1
 8000256:	61f9      	str	r1, [r7, #28]
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800025e:	3b20      	subs	r3, #32
 8000260:	00db      	lsls	r3, r3, #3
 8000262:	4413      	add	r3, r2
 8000264:	613b      	str	r3, [r7, #16]
		this->chars[i] = new FlickerFreeChar(X, Y, Size);
 8000266:	2006      	movs	r0, #6
 8000268:	f00a ff6e 	bl	800b148 <_Znwj>
 800026c:	4603      	mov	r3, r0
 800026e:	461c      	mov	r4, r3
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	893a      	ldrh	r2, [r7, #8]
 8000274:	8979      	ldrh	r1, [r7, #10]
 8000276:	4620      	mov	r0, r4
 8000278:	f7ff ff68 	bl	800014c <_ZN15FlickerFreeCharC1Etth>
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	691a      	ldr	r2, [r3, #16]
 8000280:	7efb      	ldrb	r3, [r7, #27]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	4413      	add	r3, r2
 8000286:	601c      	str	r4, [r3, #0]
		this->oldText[i] = 0;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	7efb      	ldrb	r3, [r7, #27]
 800028e:	4413      	add	r3, r2
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
		X += glyph->xAdvance * Size;
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	791b      	ldrb	r3, [r3, #4]
 8000298:	b29b      	uxth	r3, r3
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	b292      	uxth	r2, r2
 800029e:	fb02 f303 	mul.w	r3, r2, r3
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	897b      	ldrh	r3, [r7, #10]
 80002a6:	4413      	add	r3, r2
 80002a8:	817b      	strh	r3, [r7, #10]
	for(uint8_t i=0;i<len;i++)
 80002aa:	7efb      	ldrb	r3, [r7, #27]
 80002ac:	3301      	adds	r3, #1
 80002ae:	76fb      	strb	r3, [r7, #27]
 80002b0:	e7c8      	b.n	8000244 <_ZN15FlickerFreeTextC1EtthPhh+0x80>
	}

}
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4618      	mov	r0, r3
 80002b6:	3724      	adds	r7, #36	; 0x24
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd90      	pop	{r4, r7, pc}

080002bc <_ZN15FlickerFreeTextD1Ev>:
FlickerFreeText::~FlickerFreeText()
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
{
	for(uint8_t i=0;i<len;i++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	7b1b      	ldrb	r3, [r3, #12]
 80002cc:	7bfa      	ldrb	r2, [r7, #15]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d20f      	bcs.n	80002f2 <_ZN15FlickerFreeTextD1Ev+0x36>
		delete this->chars[i];
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	691a      	ldr	r2, [r3, #16]
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	4413      	add	r3, r2
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d003      	beq.n	80002ea <_ZN15FlickerFreeTextD1Ev+0x2e>
 80002e2:	2106      	movs	r1, #6
 80002e4:	4618      	mov	r0, r3
 80002e6:	f00a ff2b 	bl	800b140 <_ZdlPvj>
	for(uint8_t i=0;i<len;i++)
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	3301      	adds	r3, #1
 80002ee:	73fb      	strb	r3, [r7, #15]
 80002f0:	e7ea      	b.n	80002c8 <_ZN15FlickerFreeTextD1Ev+0xc>
	delete[] this->chars;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	691b      	ldr	r3, [r3, #16]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d004      	beq.n	8000304 <_ZN15FlickerFreeTextD1Ev+0x48>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	691b      	ldr	r3, [r3, #16]
 80002fe:	4618      	mov	r0, r3
 8000300:	f00a ff20 	bl	800b144 <_ZdaPv>
	delete[] this->oldText;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d004      	beq.n	8000316 <_ZN15FlickerFreeTextD1Ev+0x5a>
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4618      	mov	r0, r3
 8000312:	f00a ff17 	bl	800b144 <_ZdaPv>
}
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4618      	mov	r0, r3
 800031a:	3710      	adds	r7, #16
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <_ZN15FlickerFreeText9Draw_TextEPhh>:

void  FlickerFreeText::Draw_Text(uint8_t* Text, uint8_t redraw)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	4613      	mov	r3, r2
 800032c:	71fb      	strb	r3, [r7, #7]
	uint8_t idx = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	75fb      	strb	r3, [r7, #23]
    while (Text[idx]) {
 8000332:	7dfb      	ldrb	r3, [r7, #23]
 8000334:	68ba      	ldr	r2, [r7, #8]
 8000336:	4413      	add	r3, r2
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d01e      	beq.n	800037c <_ZN15FlickerFreeText9Draw_TextEPhh+0x5c>
    	if(this->oldText[idx] != Text[idx] || redraw)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	695a      	ldr	r2, [r3, #20]
 8000342:	7dfb      	ldrb	r3, [r7, #23]
 8000344:	4413      	add	r3, r2
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	7dfb      	ldrb	r3, [r7, #23]
 800034a:	68b9      	ldr	r1, [r7, #8]
 800034c:	440b      	add	r3, r1
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	429a      	cmp	r2, r3
 8000352:	d102      	bne.n	800035a <_ZN15FlickerFreeText9Draw_TextEPhh+0x3a>
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d00c      	beq.n	8000374 <_ZN15FlickerFreeText9Draw_TextEPhh+0x54>
    	{
    		this->chars[idx]->Draw_Char(Text[idx]);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	691a      	ldr	r2, [r3, #16]
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	6818      	ldr	r0, [r3, #0]
 8000366:	7dfb      	ldrb	r3, [r7, #23]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	4413      	add	r3, r2
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4619      	mov	r1, r3
 8000370:	f7ff ff0c 	bl	800018c <_ZN15FlickerFreeChar9Draw_CharEh>
    	}
		idx++;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
 8000376:	3301      	adds	r3, #1
 8000378:	75fb      	strb	r3, [r7, #23]
    while (Text[idx]) {
 800037a:	e7da      	b.n	8000332 <_ZN15FlickerFreeText9Draw_TextEPhh+0x12>
    }
    strcpy((char*)this->oldText, (const char*)Text);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	68b9      	ldr	r1, [r7, #8]
 8000382:	4618      	mov	r0, r3
 8000384:	f00b f884 	bl	800b490 <strcpy>
}
 8000388:	bf00      	nop
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <_ZN12LCDTelemetryC1Ev>:
#include <LCDTelemetry.h>

LCDTelemetry::LCDTelemetry()
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b085      	sub	sp, #20
 8000394:	af02      	add	r7, sp, #8
 8000396:	6078      	str	r0, [r7, #4]
{
	oldTelemetry = {0,};
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3334      	adds	r3, #52	; 0x34
 800039c:	225c      	movs	r2, #92	; 0x5c
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f00a ff3f 	bl	800b224 <memset>
	changes = 0;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	731a      	strb	r2, [r3, #12]
	lastPage = 0;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	735a      	strb	r2, [r3, #13]

	BSP_LCD_SetFont(&FreeSans24pt7b);
 80003b2:	484e      	ldr	r0, [pc, #312]	; (80004ec <_ZN12LCDTelemetryC1Ev+0x15c>)
 80003b4:	f004 fc66 	bl	8004c84 <BSP_LCD_SetFont>
	valueChange =  new FlickerFreeText(150, 190, 2, (uint8_t*)"M11", 3);
 80003b8:	2018      	movs	r0, #24
 80003ba:	f00a fec5 	bl	800b148 <_Znwj>
 80003be:	4603      	mov	r3, r0
 80003c0:	461c      	mov	r4, r3
 80003c2:	2303      	movs	r3, #3
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	4b4a      	ldr	r3, [pc, #296]	; (80004f0 <_ZN12LCDTelemetryC1Ev+0x160>)
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2302      	movs	r3, #2
 80003cc:	22be      	movs	r2, #190	; 0xbe
 80003ce:	2196      	movs	r1, #150	; 0x96
 80003d0:	4620      	mov	r0, r4
 80003d2:	f7ff fef7 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	615c      	str	r4, [r3, #20]
	gear = new FlickerFreeText(190,125,3,(uint8_t*)"1", 1);
 80003da:	2018      	movs	r0, #24
 80003dc:	f00a feb4 	bl	800b148 <_Znwj>
 80003e0:	4603      	mov	r3, r0
 80003e2:	461c      	mov	r4, r3
 80003e4:	2301      	movs	r3, #1
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	4b42      	ldr	r3, [pc, #264]	; (80004f4 <_ZN12LCDTelemetryC1Ev+0x164>)
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	2303      	movs	r3, #3
 80003ee:	227d      	movs	r2, #125	; 0x7d
 80003f0:	21be      	movs	r1, #190	; 0xbe
 80003f2:	4620      	mov	r0, r4
 80003f4:	f7ff fee6 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	619c      	str	r4, [r3, #24]
	speed = new FlickerFreeText(147,250,2,(uint8_t*)"100", 3);
 80003fc:	2018      	movs	r0, #24
 80003fe:	f00a fea3 	bl	800b148 <_Znwj>
 8000402:	4603      	mov	r3, r0
 8000404:	461c      	mov	r4, r3
 8000406:	2303      	movs	r3, #3
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	4b3b      	ldr	r3, [pc, #236]	; (80004f8 <_ZN12LCDTelemetryC1Ev+0x168>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2302      	movs	r3, #2
 8000410:	22fa      	movs	r2, #250	; 0xfa
 8000412:	2193      	movs	r1, #147	; 0x93
 8000414:	4620      	mov	r0, r4
 8000416:	f7ff fed5 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	61dc      	str	r4, [r3, #28]
	rpm = new FlickerFreeText(110,250,2,(uint8_t*)"10000", 5);
 800041e:	2018      	movs	r0, #24
 8000420:	f00a fe92 	bl	800b148 <_Znwj>
 8000424:	4603      	mov	r3, r0
 8000426:	461c      	mov	r4, r3
 8000428:	2305      	movs	r3, #5
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	4b33      	ldr	r3, [pc, #204]	; (80004fc <_ZN12LCDTelemetryC1Ev+0x16c>)
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2302      	movs	r3, #2
 8000432:	22fa      	movs	r2, #250	; 0xfa
 8000434:	216e      	movs	r1, #110	; 0x6e
 8000436:	4620      	mov	r0, r4
 8000438:	f7ff fec4 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	621c      	str	r4, [r3, #32]
	pitLimiterLabel = new FlickerFreeText(110, 308, 1, (uint8_t*)"PIT LIMITER", 11);
 8000440:	2018      	movs	r0, #24
 8000442:	f00a fe81 	bl	800b148 <_Znwj>
 8000446:	4603      	mov	r3, r0
 8000448:	461c      	mov	r4, r3
 800044a:	230b      	movs	r3, #11
 800044c:	9301      	str	r3, [sp, #4]
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <_ZN12LCDTelemetryC1Ev+0x170>)
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2301      	movs	r3, #1
 8000454:	f44f 729a 	mov.w	r2, #308	; 0x134
 8000458:	216e      	movs	r1, #110	; 0x6e
 800045a:	4620      	mov	r0, r4
 800045c:	f7ff feb2 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	625c      	str	r4, [r3, #36]	; 0x24
	clutchInLabel = new FlickerFreeText(120, 308, 1, (uint8_t*)"CLUTCH IN", 9);
 8000464:	2018      	movs	r0, #24
 8000466:	f00a fe6f 	bl	800b148 <_Znwj>
 800046a:	4603      	mov	r3, r0
 800046c:	461c      	mov	r4, r3
 800046e:	2309      	movs	r3, #9
 8000470:	9301      	str	r3, [sp, #4]
 8000472:	4b24      	ldr	r3, [pc, #144]	; (8000504 <_ZN12LCDTelemetryC1Ev+0x174>)
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2301      	movs	r3, #1
 8000478:	f44f 729a 	mov.w	r2, #308	; 0x134
 800047c:	2178      	movs	r1, #120	; 0x78
 800047e:	4620      	mov	r0, r4
 8000480:	f7ff fea0 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	629c      	str	r4, [r3, #40]	; 0x28
	time = new FlickerFreeText(150, 212, 1, (uint8_t*)"11:11:11", 8);
 8000488:	2018      	movs	r0, #24
 800048a:	f00a fe5d 	bl	800b148 <_Znwj>
 800048e:	4603      	mov	r3, r0
 8000490:	461c      	mov	r4, r3
 8000492:	2308      	movs	r3, #8
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <_ZN12LCDTelemetryC1Ev+0x178>)
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2301      	movs	r3, #1
 800049c:	22d4      	movs	r2, #212	; 0xd4
 800049e:	2196      	movs	r1, #150	; 0x96
 80004a0:	4620      	mov	r0, r4
 80004a2:	f7ff fe8f 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	611c      	str	r4, [r3, #16]

	mainPage = new MainPage(&oldTelemetry);
 80004aa:	2070      	movs	r0, #112	; 0x70
 80004ac:	f00a fe4c 	bl	800b148 <_Znwj>
 80004b0:	4603      	mov	r3, r0
 80004b2:	461c      	mov	r4, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3334      	adds	r3, #52	; 0x34
 80004b8:	4619      	mov	r1, r3
 80004ba:	4620      	mov	r0, r4
 80004bc:	f000 fbe4 	bl	8000c88 <_ZN8MainPageC1EP9Telemetry>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	62dc      	str	r4, [r3, #44]	; 0x2c
	mainPage->Static();
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 fd97 	bl	8000ffc <_ZN8MainPage6StaticEv>

	outLapPage = new OutLapPage();
 80004ce:	2050      	movs	r0, #80	; 0x50
 80004d0:	f00a fe3a 	bl	800b148 <_Znwj>
 80004d4:	4603      	mov	r3, r0
 80004d6:	461c      	mov	r4, r3
 80004d8:	4620      	mov	r0, r4
 80004da:	f001 fcdd 	bl	8001e98 <_ZN10OutLapPageC1Ev>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	631c      	str	r4, [r3, #48]	; 0x30
}
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd90      	pop	{r4, r7, pc}
 80004ec:	0800fc0c 	.word	0x0800fc0c
 80004f0:	0800bb64 	.word	0x0800bb64
 80004f4:	0800bb68 	.word	0x0800bb68
 80004f8:	0800bb6c 	.word	0x0800bb6c
 80004fc:	0800bb70 	.word	0x0800bb70
 8000500:	0800bb78 	.word	0x0800bb78
 8000504:	0800bb84 	.word	0x0800bb84
 8000508:	0800bb90 	.word	0x0800bb90

0800050c <_ZN12LCDTelemetry6UpdateE9Telemetry>:

void LCDTelemetry::Update(Telemetry telemetry)
{
 800050c:	b084      	sub	sp, #16
 800050e:	b590      	push	{r4, r7, lr}
 8000510:	b09b      	sub	sp, #108	; 0x6c
 8000512:	af16      	add	r7, sp, #88	; 0x58
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800051a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t curTick = HAL_GetTick();
 800051e:	f005 f84d 	bl	80055bc <HAL_GetTick>
 8000522:	60f8      	str	r0, [r7, #12]
	if(!((oldTelemetry.flags >> 5) & 1) && ((telemetry.flags >> 5) & 1))
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 800052a:	f003 0320 	and.w	r3, r3, #32
 800052e:	2b00      	cmp	r3, #0
 8000530:	d108      	bne.n	8000544 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x38>
 8000532:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8000536:	f003 0320 	and.w	r3, r3, #32
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x38>
		lastBlueFlagTick = curTick;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	601a      	str	r2, [r3, #0]

	if(!((oldTelemetry.flags >> 6) & 1) && ((telemetry.flags >> 6) & 1))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 800054a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054e:	2b00      	cmp	r3, #0
 8000550:	d108      	bne.n	8000564 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x58>
 8000552:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8000556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055a:	2b00      	cmp	r3, #0
 800055c:	d002      	beq.n	8000564 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x58>
		lastYellowFlagTick = curTick;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	605a      	str	r2, [r3, #4]

	if(oldTelemetry.differential != telemetry.differential)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f9b3 2066 	ldrsh.w	r2, [r3, #102]	; 0x66
 800056a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800056e:	429a      	cmp	r2, r3
 8000570:	d005      	beq.n	800057e <_ZN12LCDTelemetry6UpdateE9Telemetry+0x72>
	{
		changes = (1 << 0);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2201      	movs	r2, #1
 8000576:	731a      	strb	r2, [r3, #12]
		lastChangeTick = curTick;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	609a      	str	r2, [r3, #8]
	}

	if(oldTelemetry.mix != telemetry.mix)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000584:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000588:	429a      	cmp	r2, r3
 800058a:	d005      	beq.n	8000598 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x8c>
	{
		changes = (1 << 1);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2202      	movs	r2, #2
 8000590:	731a      	strb	r2, [r3, #12]
		lastChangeTick = curTick;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	609a      	str	r2, [r3, #8]
	}

	if(oldTelemetry.ers != telemetry.ers)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 800059e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d005      	beq.n	80005b2 <_ZN12LCDTelemetry6UpdateE9Telemetry+0xa6>
	{
		changes = (1 << 2);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2204      	movs	r2, #4
 80005aa:	731a      	strb	r2, [r3, #12]
		lastChangeTick = curTick;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	609a      	str	r2, [r3, #8]
	}

	if(oldTelemetry.brakeBias != telemetry.brakeBias)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 80005b8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80005bc:	429a      	cmp	r2, r3
 80005be:	d005      	beq.n	80005cc <_ZN12LCDTelemetry6UpdateE9Telemetry+0xc0>
	{
		changes = (1 << 3);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2208      	movs	r2, #8
 80005c4:	731a      	strb	r2, [r3, #12]
		lastChangeTick = curTick;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	609a      	str	r2, [r3, #8]
	}
	if((telemetry.flags >> 9) & 1) //Idle
 80005cc:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80005d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d047      	beq.n	8000668 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x15c>
	{
		if(lastPage != 9)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7b5b      	ldrb	r3, [r3, #13]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d01c      	beq.n	800061a <_ZN12LCDTelemetry6UpdateE9Telemetry+0x10e>
		{
			BSP_LCD_Clear(LCD_COLOR_BLACK);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f004 fb67 	bl	8004cb4 <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(RC(0xFCA0));
 80005e6:	f64f 40a0 	movw	r0, #64672	; 0xfca0
 80005ea:	f004 fb2b 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 70);
 80005ee:	f004 fb11 	bl	8004c14 <BSP_LCD_GetXSize>
 80005f2:	4603      	mov	r3, r0
 80005f4:	461a      	mov	r2, r3
 80005f6:	2346      	movs	r3, #70	; 0x46
 80005f8:	2100      	movs	r1, #0
 80005fa:	2000      	movs	r0, #0
 80005fc:	f004 ff3c 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_SetFont(&MokiLean18pt7b);
 8000600:	48b2      	ldr	r0, [pc, #712]	; (80008cc <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3c0>)
 8000602:	f004 fb3f 	bl	8004c84 <BSP_LCD_SetFont>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000606:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800060a:	f004 fb1b 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_Draw_Text((uint8_t*)"Mclaren", 135, 50, 1);
 800060e:	2301      	movs	r3, #1
 8000610:	2232      	movs	r2, #50	; 0x32
 8000612:	2187      	movs	r1, #135	; 0x87
 8000614:	48ae      	ldr	r0, [pc, #696]	; (80008d0 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3c4>)
 8000616:	f004 fb6b 	bl	8004cf0 <BSP_LCD_Draw_Text>
		}
		BSP_LCD_SetFont(&FreeSans24pt7b);
 800061a:	48ae      	ldr	r0, [pc, #696]	; (80008d4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3c8>)
 800061c:	f004 fb32 	bl	8004c84 <BSP_LCD_SetFont>
		snprintf((char*)buffer, 9,"%02d:%02d:%02d", telemetry.curHours, telemetry.curMins, telemetry.curSecs);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000626:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800062a:	4619      	mov	r1, r3
 800062c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000630:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	460b      	mov	r3, r1
 800063a:	4aa7      	ldr	r2, [pc, #668]	; (80008d8 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3cc>)
 800063c:	2109      	movs	r1, #9
 800063e:	f00a fef3 	bl	800b428 <sniprintf>
		time->Draw_Text(buffer, lastPage != 9);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6918      	ldr	r0, [r3, #16]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7b5b      	ldrb	r3, [r3, #13]
 8000650:	2b09      	cmp	r3, #9
 8000652:	bf14      	ite	ne
 8000654:	2301      	movne	r3, #1
 8000656:	2300      	moveq	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	f7ff fe60 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		lastPage = 9;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2209      	movs	r2, #9
 8000664:	735a      	strb	r2, [r3, #13]
 8000666:	e27c      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
	}
	else if(((telemetry.flags >> 5) & 1) && (curTick - lastBlueFlagTick <= 1000)) //BlueFlag
 8000668:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800066c:	f003 0320 	and.w	r3, r3, #32
 8000670:	2b00      	cmp	r3, #0
 8000672:	d01f      	beq.n	80006b4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x1a8>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000680:	d818      	bhi.n	80006b4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x1a8>
	{
		if(lastPage != 4)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7b5b      	ldrb	r3, [r3, #13]
 8000686:	2b04      	cmp	r3, #4
 8000688:	f000 826b 	beq.w	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
		{
			BSP_LCD_Clear(LCD_COLOR_BLUE);
 800068c:	201f      	movs	r0, #31
 800068e:	f004 fb11 	bl	8004cb4 <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000692:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000696:	f004 fad5 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&FreeSans24pt7b);
 800069a:	488e      	ldr	r0, [pc, #568]	; (80008d4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3c8>)
 800069c:	f004 faf2 	bl	8004c84 <BSP_LCD_SetFont>
			BSP_LCD_Draw_Text((uint8_t*)"Blue Flag", 45, 190, 2);
 80006a0:	2302      	movs	r3, #2
 80006a2:	22be      	movs	r2, #190	; 0xbe
 80006a4:	212d      	movs	r1, #45	; 0x2d
 80006a6:	488d      	ldr	r0, [pc, #564]	; (80008dc <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3d0>)
 80006a8:	f004 fb22 	bl	8004cf0 <BSP_LCD_Draw_Text>
			lastPage = 4;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2204      	movs	r2, #4
 80006b0:	735a      	strb	r2, [r3, #13]
		if(lastPage != 4)
 80006b2:	e256      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
		}

	}
	else if(((telemetry.flags >> 6) & 1) && (curTick - lastYellowFlagTick <= 1000)) //YellowFlag
 80006b4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80006b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d020      	beq.n	8000702 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x1f6>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	68fa      	ldr	r2, [r7, #12]
 80006c6:	1ad3      	subs	r3, r2, r3
 80006c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006cc:	d819      	bhi.n	8000702 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x1f6>
	{
		if(lastPage != 5)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7b5b      	ldrb	r3, [r3, #13]
 80006d2:	2b05      	cmp	r3, #5
 80006d4:	f000 8245 	beq.w	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
		{
			BSP_LCD_Clear(LCD_COLOR_YELLOW);
 80006d8:	f64f 7080 	movw	r0, #65408	; 0xff80
 80006dc:	f004 faea 	bl	8004cb4 <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80006e0:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80006e4:	f004 faae 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&FreeSans24pt7b);
 80006e8:	487a      	ldr	r0, [pc, #488]	; (80008d4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3c8>)
 80006ea:	f004 facb 	bl	8004c84 <BSP_LCD_SetFont>
			BSP_LCD_Draw_Text((uint8_t*)"Yellow Flag", 2, 190, 2);
 80006ee:	2302      	movs	r3, #2
 80006f0:	22be      	movs	r2, #190	; 0xbe
 80006f2:	2102      	movs	r1, #2
 80006f4:	487a      	ldr	r0, [pc, #488]	; (80008e0 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3d4>)
 80006f6:	f004 fafb 	bl	8004cf0 <BSP_LCD_Draw_Text>
			lastPage = 5;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2205      	movs	r2, #5
 80006fe:	735a      	strb	r2, [r3, #13]
		if(lastPage != 5)
 8000700:	e22f      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
		}
	}
	else if(changes != 0) //Changes
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7b1b      	ldrb	r3, [r3, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 8098 	beq.w	800083c <_ZN12LCDTelemetry6UpdateE9Telemetry+0x330>
	{
		if(lastPage != 7)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7b5b      	ldrb	r3, [r3, #13]
 8000710:	2b07      	cmp	r3, #7
 8000712:	d003      	beq.n	800071c <_ZN12LCDTelemetry6UpdateE9Telemetry+0x210>
		{
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000714:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000718:	f004 facc 	bl	8004cb4 <BSP_LCD_Clear>
		}
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800071c:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000720:	f004 faa0 	bl	8004c64 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000724:	2000      	movs	r0, #0
 8000726:	f004 fa8d 	bl	8004c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&FreeSans24pt7b);
 800072a:	486a      	ldr	r0, [pc, #424]	; (80008d4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3c8>)
 800072c:	f004 faaa 	bl	8004c84 <BSP_LCD_SetFont>
		if((changes >> 0) & 1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7b1b      	ldrb	r3, [r3, #12]
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	2b00      	cmp	r3, #0
 800073a:	d018      	beq.n	800076e <_ZN12LCDTelemetry6UpdateE9Telemetry+0x262>
		{
			snprintf((char*)buffer, 4, "D%02d",telemetry.differential);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000742:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8000746:	4a67      	ldr	r2, [pc, #412]	; (80008e4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3d8>)
 8000748:	2104      	movs	r1, #4
 800074a:	f00a fe6d 	bl	800b428 <sniprintf>
			valueChange->Draw_Text(buffer, lastPage != 7);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6958      	ldr	r0, [r3, #20]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7b5b      	ldrb	r3, [r3, #13]
 800075c:	2b07      	cmp	r3, #7
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	f7ff fdda 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
 800076c:	e05b      	b.n	8000826 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x31a>
		}
		else if((changes >> 1) & 1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7b1b      	ldrb	r3, [r3, #12]
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	2b00      	cmp	r3, #0
 8000778:	d018      	beq.n	80007ac <_ZN12LCDTelemetry6UpdateE9Telemetry+0x2a0>
		{
			snprintf((char*)buffer, 4, "M%02d",telemetry.mix);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000780:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8000784:	4a58      	ldr	r2, [pc, #352]	; (80008e8 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3dc>)
 8000786:	2104      	movs	r1, #4
 8000788:	f00a fe4e 	bl	800b428 <sniprintf>
			valueChange->Draw_Text(buffer, lastPage != 7);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6958      	ldr	r0, [r3, #20]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7b5b      	ldrb	r3, [r3, #13]
 800079a:	2b07      	cmp	r3, #7
 800079c:	bf14      	ite	ne
 800079e:	2301      	movne	r3, #1
 80007a0:	2300      	moveq	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f7ff fdbb 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
 80007aa:	e03c      	b.n	8000826 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x31a>
		}
		else if((changes >> 2) & 1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7b1b      	ldrb	r3, [r3, #12]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d018      	beq.n	80007ea <_ZN12LCDTelemetry6UpdateE9Telemetry+0x2de>
		{
			snprintf((char*)buffer, 4, "E%02d",telemetry.ers);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f103 0090 	add.w	r0, r3, #144	; 0x90
 80007be:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80007c2:	4a4a      	ldr	r2, [pc, #296]	; (80008ec <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3e0>)
 80007c4:	2104      	movs	r1, #4
 80007c6:	f00a fe2f 	bl	800b428 <sniprintf>
			valueChange->Draw_Text(buffer, lastPage != 7);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6958      	ldr	r0, [r3, #20]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f103 0190 	add.w	r1, r3, #144	; 0x90
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7b5b      	ldrb	r3, [r3, #13]
 80007d8:	2b07      	cmp	r3, #7
 80007da:	bf14      	ite	ne
 80007dc:	2301      	movne	r3, #1
 80007de:	2300      	moveq	r3, #0
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	f7ff fd9c 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
 80007e8:	e01d      	b.n	8000826 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x31a>
		}
		else if((changes >> 3) & 1)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7b1b      	ldrb	r3, [r3, #12]
 80007ee:	f003 0308 	and.w	r3, r3, #8
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d017      	beq.n	8000826 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x31a>
		{
			snprintf((char*)buffer, 4, "B%02d",telemetry.brakeBias);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f103 0090 	add.w	r0, r3, #144	; 0x90
 80007fc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000800:	4a3b      	ldr	r2, [pc, #236]	; (80008f0 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3e4>)
 8000802:	2104      	movs	r1, #4
 8000804:	f00a fe10 	bl	800b428 <sniprintf>
			valueChange->Draw_Text(buffer, lastPage != 7);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6958      	ldr	r0, [r3, #20]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7b5b      	ldrb	r3, [r3, #13]
 8000816:	2b07      	cmp	r3, #7
 8000818:	bf14      	ite	ne
 800081a:	2301      	movne	r3, #1
 800081c:	2300      	moveq	r3, #0
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	f7ff fd7d 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		}

		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000826:	2000      	movs	r0, #0
 8000828:	f004 fa1c 	bl	8004c64 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800082c:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000830:	f004 fa08 	bl	8004c44 <BSP_LCD_SetTextColor>

		lastPage = 7;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2207      	movs	r2, #7
 8000838:	735a      	strb	r2, [r3, #13]
 800083a:	e192      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
	}
	else if((telemetry.flags >> 8) & 1) //PitLimiter
 800083c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8000840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000844:	2b00      	cmp	r3, #0
 8000846:	f000 8096 	beq.w	8000976 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x46a>
	{
		if(lastPage != 6)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7b5b      	ldrb	r3, [r3, #13]
 800084e:	2b06      	cmp	r3, #6
 8000850:	d018      	beq.n	8000884 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x378>
		{
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000852:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000856:	f004 fa2d 	bl	8004cb4 <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800085a:	2000      	movs	r0, #0
 800085c:	f004 f9f2 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000860:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000864:	f004 f9fe 	bl	8004c64 <BSP_LCD_SetBackColor>
			pitLimiterLabel->Draw_Text((uint8_t*)"PIT LIMITER", true);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086c:	2201      	movs	r2, #1
 800086e:	4921      	ldr	r1, [pc, #132]	; (80008f4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3e8>)
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fd55 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000876:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800087a:	f004 f9e3 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800087e:	2000      	movs	r0, #0
 8000880:	f004 f9f0 	bl	8004c64 <BSP_LCD_SetBackColor>

		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000884:	2000      	movs	r0, #0
 8000886:	f004 f9dd 	bl	8004c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800088a:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800088e:	f004 f9e9 	bl	8004c64 <BSP_LCD_SetBackColor>
		//Gear
		BSP_LCD_SetFont(&FreeSans24pt7b);
 8000892:	4810      	ldr	r0, [pc, #64]	; (80008d4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3c8>)
 8000894:	f004 f9f6 	bl	8004c84 <BSP_LCD_SetFont>
		if(telemetry.gear == -1)
 8000898:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d107      	bne.n	80008b2 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3a6>
			snprintf((char*)buffer, 2, "R");
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3390      	adds	r3, #144	; 0x90
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3ec>)
 80008a8:	2102      	movs	r1, #2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00a fdbc 	bl	800b428 <sniprintf>
 80008b0:	e02f      	b.n	8000912 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x406>
		else if(telemetry.gear == 0)
 80008b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d122      	bne.n	8000900 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3f4>
			snprintf((char*)buffer, 2, "N");
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3390      	adds	r3, #144	; 0x90
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <_ZN12LCDTelemetry6UpdateE9Telemetry+0x3f0>)
 80008c0:	2102      	movs	r1, #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f00a fdb0 	bl	800b428 <sniprintf>
 80008c8:	e023      	b.n	8000912 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x406>
 80008ca:	bf00      	nop
 80008cc:	0801240c 	.word	0x0801240c
 80008d0:	0800bb9c 	.word	0x0800bb9c
 80008d4:	0800fc0c 	.word	0x0800fc0c
 80008d8:	0800bba4 	.word	0x0800bba4
 80008dc:	0800bbb4 	.word	0x0800bbb4
 80008e0:	0800bbc0 	.word	0x0800bbc0
 80008e4:	0800bbcc 	.word	0x0800bbcc
 80008e8:	0800bbd4 	.word	0x0800bbd4
 80008ec:	0800bbdc 	.word	0x0800bbdc
 80008f0:	0800bbe4 	.word	0x0800bbe4
 80008f4:	0800bb78 	.word	0x0800bb78
 80008f8:	0800bbec 	.word	0x0800bbec
 80008fc:	0800bbf0 	.word	0x0800bbf0
		else
			snprintf((char*)buffer, 2, "%d", telemetry.gear);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000906:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800090a:	4aa2      	ldr	r2, [pc, #648]	; (8000b94 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x688>)
 800090c:	2102      	movs	r1, #2
 800090e:	f00a fd8b 	bl	800b428 <sniprintf>
		gear->Draw_Text(buffer, lastPage != 6);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6998      	ldr	r0, [r3, #24]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	7b5b      	ldrb	r3, [r3, #13]
 8000920:	2b06      	cmp	r3, #6
 8000922:	bf14      	ite	ne
 8000924:	2301      	movne	r3, #1
 8000926:	2300      	moveq	r3, #0
 8000928:	b2db      	uxtb	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	f7ff fcf8 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 4, "%3d", telemetry.speed);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000936:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800093a:	4a97      	ldr	r2, [pc, #604]	; (8000b98 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x68c>)
 800093c:	2104      	movs	r1, #4
 800093e:	f00a fd73 	bl	800b428 <sniprintf>
		speed->Draw_Text(buffer, lastPage != 6);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69d8      	ldr	r0, [r3, #28]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7b5b      	ldrb	r3, [r3, #13]
 8000950:	2b06      	cmp	r3, #6
 8000952:	bf14      	ite	ne
 8000954:	2301      	movne	r3, #1
 8000956:	2300      	moveq	r3, #0
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	f7ff fce0 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000960:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000964:	f004 f96e 	bl	8004c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000968:	2000      	movs	r0, #0
 800096a:	f004 f97b 	bl	8004c64 <BSP_LCD_SetBackColor>

		lastPage = 6;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2206      	movs	r2, #6
 8000972:	735a      	strb	r2, [r3, #13]
 8000974:	e0f5      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
	}
	else if((telemetry.flags >> 1) & 1) //LaunchMode
 8000976:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d07a      	beq.n	8000a78 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x56c>
	{
		if(lastPage != 1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7b5b      	ldrb	r3, [r3, #13]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d018      	beq.n	80009bc <_ZN12LCDTelemetry6UpdateE9Telemetry+0x4b0>
		{
			BSP_LCD_Clear(LCD_COLOR_WHITE);
 800098a:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800098e:	f004 f991 	bl	8004cb4 <BSP_LCD_Clear>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000992:	2000      	movs	r0, #0
 8000994:	f004 f956 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000998:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800099c:	f004 f962 	bl	8004c64 <BSP_LCD_SetBackColor>
			clutchInLabel->Draw_Text((uint8_t*)"CLUTCH IN", true);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	2201      	movs	r2, #1
 80009a6:	497d      	ldr	r1, [pc, #500]	; (8000b9c <_ZN12LCDTelemetry6UpdateE9Telemetry+0x690>)
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fcb9 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009ae:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80009b2:	f004 f947 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f004 f954 	bl	8004c64 <BSP_LCD_SetBackColor>
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80009bc:	2000      	movs	r0, #0
 80009be:	f004 f941 	bl	8004c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80009c2:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80009c6:	f004 f94d 	bl	8004c64 <BSP_LCD_SetBackColor>
		//Gear
		BSP_LCD_SetFont(&FreeSans24pt7b);
 80009ca:	4875      	ldr	r0, [pc, #468]	; (8000ba0 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x694>)
 80009cc:	f004 f95a 	bl	8004c84 <BSP_LCD_SetFont>
		if(telemetry.gear == -1)
 80009d0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d107      	bne.n	80009ea <_ZN12LCDTelemetry6UpdateE9Telemetry+0x4de>
			snprintf((char*)buffer, 2, "R");
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3390      	adds	r3, #144	; 0x90
 80009de:	4a71      	ldr	r2, [pc, #452]	; (8000ba4 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x698>)
 80009e0:	2102      	movs	r1, #2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f00a fd20 	bl	800b428 <sniprintf>
 80009e8:	e014      	b.n	8000a14 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x508>
		else if(telemetry.gear == 0)
 80009ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d107      	bne.n	8000a02 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x4f6>
			snprintf((char*)buffer, 2, "N");
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3390      	adds	r3, #144	; 0x90
 80009f6:	4a6c      	ldr	r2, [pc, #432]	; (8000ba8 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x69c>)
 80009f8:	2102      	movs	r1, #2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00a fd14 	bl	800b428 <sniprintf>
 8000a00:	e008      	b.n	8000a14 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x508>
		else
			snprintf((char*)buffer, 2, "%d", telemetry.gear);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000a08:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a0c:	4a61      	ldr	r2, [pc, #388]	; (8000b94 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x688>)
 8000a0e:	2102      	movs	r1, #2
 8000a10:	f00a fd0a 	bl	800b428 <sniprintf>
		gear->Draw_Text(buffer, lastPage != 1);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6998      	ldr	r0, [r3, #24]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7b5b      	ldrb	r3, [r3, #13]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	bf14      	ite	ne
 8000a26:	2301      	movne	r3, #1
 8000a28:	2300      	moveq	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f7ff fc77 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 6, "%5d", telemetry.rpm);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8000a38:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000a3c:	4a5b      	ldr	r2, [pc, #364]	; (8000bac <_ZN12LCDTelemetry6UpdateE9Telemetry+0x6a0>)
 8000a3e:	2106      	movs	r1, #6
 8000a40:	f00a fcf2 	bl	800b428 <sniprintf>
		rpm->Draw_Text(buffer, lastPage != 1);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6a18      	ldr	r0, [r3, #32]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7b5b      	ldrb	r3, [r3, #13]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	bf14      	ite	ne
 8000a56:	2301      	movne	r3, #1
 8000a58:	2300      	moveq	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	f7ff fc5f 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a62:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8000a66:	f004 f8ed 	bl	8004c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f004 f8fa 	bl	8004c64 <BSP_LCD_SetBackColor>
		lastPage = 1;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	735a      	strb	r2, [r3, #13]
 8000a76:	e074      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>

	}
	else if(((telemetry.flags >> 3) & 1) || ((telemetry.flags >> 4) & 1)) //outLapMode
 8000a78:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d105      	bne.n	8000a90 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x584>
 8000a84:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8000a88:	f003 0310 	and.w	r3, r3, #16
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d039      	beq.n	8000b04 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x5f8>
	{
		if(lastPage != 2)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	7b5b      	ldrb	r3, [r3, #13]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d023      	beq.n	8000ae0 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x5d4>
		{
			outLapPage->Static(telemetry);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000a9c:	4668      	mov	r0, sp
 8000a9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa2:	2250      	movs	r2, #80	; 0x50
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f00a fbaf 	bl	800b208 <memcpy>
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ab0:	4620      	mov	r0, r4
 8000ab2:	f001 fb43 	bl	800213c <_ZN10OutLapPage6StaticE9Telemetry>
			outLapPage->Update(telemetry, true);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000aba:	2301      	movs	r3, #1
 8000abc:	9314      	str	r3, [sp, #80]	; 0x50
 8000abe:	4668      	mov	r0, sp
 8000ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac4:	2250      	movs	r2, #80	; 0x50
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	f00a fb9e 	bl	800b208 <memcpy>
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f001 fcc4 	bl	8002460 <_ZN10OutLapPage6UpdateE9Telemetryh>
			lastPage = 2;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2202      	movs	r2, #2
 8000adc:	735a      	strb	r2, [r3, #13]
		if(lastPage != 2)
 8000ade:	e040      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
		}
		else
			outLapPage->Update(telemetry);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	9314      	str	r3, [sp, #80]	; 0x50
 8000ae8:	4668      	mov	r0, sp
 8000aea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aee:	2250      	movs	r2, #80	; 0x50
 8000af0:	4619      	mov	r1, r3
 8000af2:	f00a fb89 	bl	800b208 <memcpy>
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000afc:	4620      	mov	r0, r4
 8000afe:	f001 fcaf 	bl	8002460 <_ZN10OutLapPage6UpdateE9Telemetryh>
		if(lastPage != 2)
 8000b02:	e02e      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>

	}
	else //MainPage
	{
		if(lastPage != 0)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7b5b      	ldrb	r3, [r3, #13]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d019      	beq.n	8000b40 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x634>
		{
			mainPage->Static();
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 fa73 	bl	8000ffc <_ZN8MainPage6StaticEv>
			mainPage->Update(telemetry, true);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	9314      	str	r3, [sp, #80]	; 0x50
 8000b1e:	4668      	mov	r0, sp
 8000b20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b24:	2250      	movs	r2, #80	; 0x50
 8000b26:	4619      	mov	r1, r3
 8000b28:	f00a fb6e 	bl	800b208 <memcpy>
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b32:	4620      	mov	r0, r4
 8000b34:	f000 faca 	bl	80010cc <_ZN8MainPage6UpdateE9Telemetryh>
			lastPage = 0;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	735a      	strb	r2, [r3, #13]
 8000b3e:	e010      	b.n	8000b62 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x656>
		}
		else
			mainPage->Update(telemetry);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000b44:	2300      	movs	r3, #0
 8000b46:	9314      	str	r3, [sp, #80]	; 0x50
 8000b48:	4668      	mov	r0, sp
 8000b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4e:	2250      	movs	r2, #80	; 0x50
 8000b50:	4619      	mov	r1, r3
 8000b52:	f00a fb59 	bl	800b208 <memcpy>
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f000 fab5 	bl	80010cc <_ZN8MainPage6UpdateE9Telemetryh>
	}
	if(curTick - lastChangeTick > 2000)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b6e:	d902      	bls.n	8000b76 <_ZN12LCDTelemetry6UpdateE9Telemetry+0x66a>
		changes = 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	731a      	strb	r2, [r3, #12]
	oldTelemetry = telemetry;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3334      	adds	r3, #52	; 0x34
 8000b7a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000b7e:	225c      	movs	r2, #92	; 0x5c
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00a fb41 	bl	800b208 <memcpy>
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr
 8000b94:	0800bbf4 	.word	0x0800bbf4
 8000b98:	0800bbf8 	.word	0x0800bbf8
 8000b9c:	0800bb84 	.word	0x0800bb84
 8000ba0:	0800fc0c 	.word	0x0800fc0c
 8000ba4:	0800bbec 	.word	0x0800bbec
 8000ba8:	0800bbf0 	.word	0x0800bbf0
 8000bac:	0800bbfc 	.word	0x0800bbfc

08000bb0 <_ZN12LCDTelemetryD1Ev>:

LCDTelemetry::~LCDTelemetry()
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
{
	delete time;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	691c      	ldr	r4, [r3, #16]
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d006      	beq.n	8000bce <_ZN12LCDTelemetryD1Ev+0x1e>
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff fb7b 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8000bc6:	2118      	movs	r1, #24
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f00a fab9 	bl	800b140 <_ZdlPvj>
	delete valueChange;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	695c      	ldr	r4, [r3, #20]
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d006      	beq.n	8000be4 <_ZN12LCDTelemetryD1Ev+0x34>
 8000bd6:	4620      	mov	r0, r4
 8000bd8:	f7ff fb70 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8000bdc:	2118      	movs	r1, #24
 8000bde:	4620      	mov	r0, r4
 8000be0:	f00a faae 	bl	800b140 <_ZdlPvj>
	delete gear;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	699c      	ldr	r4, [r3, #24]
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d006      	beq.n	8000bfa <_ZN12LCDTelemetryD1Ev+0x4a>
 8000bec:	4620      	mov	r0, r4
 8000bee:	f7ff fb65 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8000bf2:	2118      	movs	r1, #24
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f00a faa3 	bl	800b140 <_ZdlPvj>
	delete speed;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69dc      	ldr	r4, [r3, #28]
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d006      	beq.n	8000c10 <_ZN12LCDTelemetryD1Ev+0x60>
 8000c02:	4620      	mov	r0, r4
 8000c04:	f7ff fb5a 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8000c08:	2118      	movs	r1, #24
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f00a fa98 	bl	800b140 <_ZdlPvj>
	delete rpm;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a1c      	ldr	r4, [r3, #32]
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d006      	beq.n	8000c26 <_ZN12LCDTelemetryD1Ev+0x76>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f7ff fb4f 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8000c1e:	2118      	movs	r1, #24
 8000c20:	4620      	mov	r0, r4
 8000c22:	f00a fa8d 	bl	800b140 <_ZdlPvj>
	delete pitLimiterLabel;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000c2a:	2c00      	cmp	r4, #0
 8000c2c:	d006      	beq.n	8000c3c <_ZN12LCDTelemetryD1Ev+0x8c>
 8000c2e:	4620      	mov	r0, r4
 8000c30:	f7ff fb44 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8000c34:	2118      	movs	r1, #24
 8000c36:	4620      	mov	r0, r4
 8000c38:	f00a fa82 	bl	800b140 <_ZdlPvj>
	delete clutchInLabel;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8000c40:	2c00      	cmp	r4, #0
 8000c42:	d006      	beq.n	8000c52 <_ZN12LCDTelemetryD1Ev+0xa2>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f7ff fb39 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8000c4a:	2118      	movs	r1, #24
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f00a fa77 	bl	800b140 <_ZdlPvj>
	delete mainPage;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d006      	beq.n	8000c68 <_ZN12LCDTelemetryD1Ev+0xb8>
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f000 ffce 	bl	8001bfc <_ZN8MainPageD1Ev>
 8000c60:	2170      	movs	r1, #112	; 0x70
 8000c62:	4620      	mov	r0, r4
 8000c64:	f00a fa6c 	bl	800b140 <_ZdlPvj>
	delete outLapPage;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8000c6c:	2c00      	cmp	r4, #0
 8000c6e:	d006      	beq.n	8000c7e <_ZN12LCDTelemetryD1Ev+0xce>
 8000c70:	4620      	mov	r0, r4
 8000c72:	f002 f801 	bl	8002c78 <_ZN10OutLapPageD1Ev>
 8000c76:	2150      	movs	r1, #80	; 0x50
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f00a fa61 	bl	800b140 <_ZdlPvj>
}
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4618      	mov	r0, r3
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd90      	pop	{r4, r7, pc}

08000c88 <_ZN8MainPageC1EP9Telemetry>:
#include <MainPage.h>

MainPage::MainPage(Telemetry* oldTelemetry)
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
{
	this->oldTelemetry = oldTelemetry;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	66da      	str	r2, [r3, #108]	; 0x6c
	ERSValue = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	FuelValue = 0;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	lastMode = 0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	endOfLapTriggered = 0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	lastDRSTick = 0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	655a      	str	r2, [r3, #84]	; 0x54
	lastEndOfLapTick = 0;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	659a      	str	r2, [r3, #88]	; 0x58

	BSP_LCD_SetFont(&FreeSans24pt7b);
 8000cc4:	48bc      	ldr	r0, [pc, #752]	; (8000fb8 <_ZN8MainPageC1EP9Telemetry+0x330>)
 8000cc6:	f003 ffdd 	bl	8004c84 <BSP_LCD_SetFont>
	gear = new FlickerFreeText(200,125,3,(uint8_t*)"1", 1);
 8000cca:	2018      	movs	r0, #24
 8000ccc:	f00a fa3c 	bl	800b148 <_Znwj>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	461c      	mov	r4, r3
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	4bb8      	ldr	r3, [pc, #736]	; (8000fbc <_ZN8MainPageC1EP9Telemetry+0x334>)
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2303      	movs	r3, #3
 8000cde:	227d      	movs	r2, #125	; 0x7d
 8000ce0:	21c8      	movs	r1, #200	; 0xc8
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f7ff fa6e 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	601c      	str	r4, [r3, #0]
	safetyCar = new FlickerFreeText(90, 308, 1, (uint8_t*)"SAFETY CAR", 10);
 8000cec:	2018      	movs	r0, #24
 8000cee:	f00a fa2b 	bl	800b148 <_Znwj>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461c      	mov	r4, r3
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	4bb1      	ldr	r3, [pc, #708]	; (8000fc0 <_ZN8MainPageC1EP9Telemetry+0x338>)
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f44f 729a 	mov.w	r2, #308	; 0x134
 8000d04:	215a      	movs	r1, #90	; 0x5a
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fa5c 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	635c      	str	r4, [r3, #52]	; 0x34

	BSP_LCD_SetFont(&FreeSans18pt7b);
 8000d10:	48ac      	ldr	r0, [pc, #688]	; (8000fc4 <_ZN8MainPageC1EP9Telemetry+0x33c>)
 8000d12:	f003 ffb7 	bl	8004c84 <BSP_LCD_SetFont>
	drsOn = new FlickerFreeText(180, 230, 1, (uint8_t*)"DRS ON", 6);
 8000d16:	2018      	movs	r0, #24
 8000d18:	f00a fa16 	bl	800b148 <_Znwj>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461c      	mov	r4, r3
 8000d20:	2306      	movs	r3, #6
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	4ba8      	ldr	r3, [pc, #672]	; (8000fc8 <_ZN8MainPageC1EP9Telemetry+0x340>)
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	22e6      	movs	r2, #230	; 0xe6
 8000d2c:	21b4      	movs	r1, #180	; 0xb4
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff fa48 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	639c      	str	r4, [r3, #56]	; 0x38
	curLapTime = new FlickerFreeText(15, 40, 1, (uint8_t*)"01:12.822", 9);
 8000d38:	2018      	movs	r0, #24
 8000d3a:	f00a fa05 	bl	800b148 <_Znwj>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461c      	mov	r4, r3
 8000d42:	2309      	movs	r3, #9
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	4ba1      	ldr	r3, [pc, #644]	; (8000fcc <_ZN8MainPageC1EP9Telemetry+0x344>)
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	2228      	movs	r2, #40	; 0x28
 8000d4e:	210f      	movs	r1, #15
 8000d50:	4620      	mov	r0, r4
 8000d52:	f7ff fa37 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	605c      	str	r4, [r3, #4]
	deltaAhead = new FlickerFreeText(322, 40, 1, (uint8_t*)"+100.250", 8);
 8000d5a:	2018      	movs	r0, #24
 8000d5c:	f00a f9f4 	bl	800b148 <_Znwj>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461c      	mov	r4, r3
 8000d64:	2308      	movs	r3, #8
 8000d66:	9301      	str	r3, [sp, #4]
 8000d68:	4b99      	ldr	r3, [pc, #612]	; (8000fd0 <_ZN8MainPageC1EP9Telemetry+0x348>)
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2228      	movs	r2, #40	; 0x28
 8000d70:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fa25 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	609c      	str	r4, [r3, #8]
	tireFL = new FlickerFreeText(180, 210, 1, (uint8_t*)"100", 3);
 8000d7e:	2018      	movs	r0, #24
 8000d80:	f00a f9e2 	bl	800b148 <_Znwj>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461c      	mov	r4, r3
 8000d88:	2303      	movs	r3, #3
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	4b91      	ldr	r3, [pc, #580]	; (8000fd4 <_ZN8MainPageC1EP9Telemetry+0x34c>)
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	22d2      	movs	r2, #210	; 0xd2
 8000d94:	21b4      	movs	r1, #180	; 0xb4
 8000d96:	4620      	mov	r0, r4
 8000d98:	f7ff fa14 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	625c      	str	r4, [r3, #36]	; 0x24
	tireFR = new FlickerFreeText(260, 210, 1, (uint8_t*)"100", 3);
 8000da0:	2018      	movs	r0, #24
 8000da2:	f00a f9d1 	bl	800b148 <_Znwj>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461c      	mov	r4, r3
 8000daa:	2303      	movs	r3, #3
 8000dac:	9301      	str	r3, [sp, #4]
 8000dae:	4b89      	ldr	r3, [pc, #548]	; (8000fd4 <_ZN8MainPageC1EP9Telemetry+0x34c>)
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	22d2      	movs	r2, #210	; 0xd2
 8000db6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f7ff fa02 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629c      	str	r4, [r3, #40]	; 0x28
	tireRL = new FlickerFreeText(180, 250, 1, (uint8_t*)"100", 3);
 8000dc4:	2018      	movs	r0, #24
 8000dc6:	f00a f9bf 	bl	800b148 <_Znwj>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461c      	mov	r4, r3
 8000dce:	2303      	movs	r3, #3
 8000dd0:	9301      	str	r3, [sp, #4]
 8000dd2:	4b80      	ldr	r3, [pc, #512]	; (8000fd4 <_ZN8MainPageC1EP9Telemetry+0x34c>)
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	22fa      	movs	r2, #250	; 0xfa
 8000dda:	21b4      	movs	r1, #180	; 0xb4
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff f9f1 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	62dc      	str	r4, [r3, #44]	; 0x2c
	tireRR = new FlickerFreeText(260, 250, 1, (uint8_t*)"100", 3);
 8000de6:	2018      	movs	r0, #24
 8000de8:	f00a f9ae 	bl	800b148 <_Znwj>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461c      	mov	r4, r3
 8000df0:	2303      	movs	r3, #3
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	4b77      	ldr	r3, [pc, #476]	; (8000fd4 <_ZN8MainPageC1EP9Telemetry+0x34c>)
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	2301      	movs	r3, #1
 8000dfa:	22fa      	movs	r2, #250	; 0xfa
 8000dfc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff f9df 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	631c      	str	r4, [r3, #48]	; 0x30

	BSP_LCD_SetFont(&FreeSans12pt7b);
 8000e0a:	4873      	ldr	r0, [pc, #460]	; (8000fd8 <_ZN8MainPageC1EP9Telemetry+0x350>)
 8000e0c:	f003 ff3a 	bl	8004c84 <BSP_LCD_SetFont>
	mix = new FlickerFreeText(118, 105, 1, (uint8_t*)"333", 3);
 8000e10:	2018      	movs	r0, #24
 8000e12:	f00a f999 	bl	800b148 <_Znwj>
 8000e16:	4603      	mov	r3, r0
 8000e18:	461c      	mov	r4, r3
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <_ZN8MainPageC1EP9Telemetry+0x354>)
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	2301      	movs	r3, #1
 8000e24:	2269      	movs	r2, #105	; 0x69
 8000e26:	2176      	movs	r1, #118	; 0x76
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff f9cb 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60dc      	str	r4, [r3, #12]
	ers = new FlickerFreeText(118, 140, 1, (uint8_t*)"333", 3);
 8000e32:	2018      	movs	r0, #24
 8000e34:	f00a f988 	bl	800b148 <_Znwj>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461c      	mov	r4, r3
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	4b66      	ldr	r3, [pc, #408]	; (8000fdc <_ZN8MainPageC1EP9Telemetry+0x354>)
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2301      	movs	r3, #1
 8000e46:	228c      	movs	r2, #140	; 0x8c
 8000e48:	2176      	movs	r1, #118	; 0x76
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f7ff f9ba 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	611c      	str	r4, [r3, #16]
	fuel = new FlickerFreeText(118, 175, 1, (uint8_t*)"110", 3);
 8000e54:	2018      	movs	r0, #24
 8000e56:	f00a f977 	bl	800b148 <_Znwj>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461c      	mov	r4, r3
 8000e5e:	2303      	movs	r3, #3
 8000e60:	9301      	str	r3, [sp, #4]
 8000e62:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <_ZN8MainPageC1EP9Telemetry+0x358>)
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2301      	movs	r3, #1
 8000e68:	22af      	movs	r2, #175	; 0xaf
 8000e6a:	2176      	movs	r1, #118	; 0x76
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff f9a9 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	615c      	str	r4, [r3, #20]
	fuelDelta = new FlickerFreeText(105, 175, 1, (uint8_t*)"+1.10", 5);
 8000e76:	2018      	movs	r0, #24
 8000e78:	f00a f966 	bl	800b148 <_Znwj>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	461c      	mov	r4, r3
 8000e80:	2305      	movs	r3, #5
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	4b57      	ldr	r3, [pc, #348]	; (8000fe4 <_ZN8MainPageC1EP9Telemetry+0x35c>)
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	22af      	movs	r2, #175	; 0xaf
 8000e8c:	2169      	movs	r1, #105	; 0x69
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f7ff f998 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619c      	str	r4, [r3, #24]
	bestLap = new FlickerFreeText(340, 210, 1, (uint8_t*)"01:12.822", 9);
 8000e98:	2018      	movs	r0, #24
 8000e9a:	f00a f955 	bl	800b148 <_Znwj>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	461c      	mov	r4, r3
 8000ea2:	2309      	movs	r3, #9
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <_ZN8MainPageC1EP9Telemetry+0x344>)
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	22d2      	movs	r2, #210	; 0xd2
 8000eae:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff f986 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	61dc      	str	r4, [r3, #28]
	lastLapTime = new FlickerFreeText(50, 235, 1, (uint8_t*)"01:12.822", 9);
 8000ebc:	2018      	movs	r0, #24
 8000ebe:	f00a f943 	bl	800b148 <_Znwj>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	461c      	mov	r4, r3
 8000ec6:	2309      	movs	r3, #9
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <_ZN8MainPageC1EP9Telemetry+0x344>)
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	22eb      	movs	r2, #235	; 0xeb
 8000ed2:	2132      	movs	r1, #50	; 0x32
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f7ff f975 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	651c      	str	r4, [r3, #80]	; 0x50
	deltaBest = new FlickerFreeText(346, 245, 1, (uint8_t*)"+100.250", 8);
 8000ede:	2018      	movs	r0, #24
 8000ee0:	f00a f932 	bl	800b148 <_Znwj>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461c      	mov	r4, r3
 8000ee8:	2308      	movs	r3, #8
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <_ZN8MainPageC1EP9Telemetry+0x348>)
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	22f5      	movs	r2, #245	; 0xf5
 8000ef4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f7ff f963 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	621c      	str	r4, [r3, #32]
	mixLabel = new FlickerFreeText(40, 105, 1, (uint8_t*)"MIX", 3);
 8000f02:	2018      	movs	r0, #24
 8000f04:	f00a f920 	bl	800b148 <_Znwj>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461c      	mov	r4, r3
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <_ZN8MainPageC1EP9Telemetry+0x360>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	2269      	movs	r2, #105	; 0x69
 8000f18:	2128      	movs	r1, #40	; 0x28
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f7ff f952 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	63dc      	str	r4, [r3, #60]	; 0x3c
	leftLabel = new FlickerFreeText(40, 105, 1, (uint8_t*)"LEFT", 4);
 8000f24:	2018      	movs	r0, #24
 8000f26:	f00a f90f 	bl	800b148 <_Znwj>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461c      	mov	r4, r3
 8000f2e:	2304      	movs	r3, #4
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <_ZN8MainPageC1EP9Telemetry+0x364>)
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2301      	movs	r3, #1
 8000f38:	2269      	movs	r2, #105	; 0x69
 8000f3a:	2128      	movs	r1, #40	; 0x28
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff f941 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	641c      	str	r4, [r3, #64]	; 0x40
	ersLabel = new FlickerFreeText(40, 140, 1, (uint8_t*)"ERS", 3);
 8000f46:	2018      	movs	r0, #24
 8000f48:	f00a f8fe 	bl	800b148 <_Znwj>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461c      	mov	r4, r3
 8000f50:	2303      	movs	r3, #3
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <_ZN8MainPageC1EP9Telemetry+0x368>)
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	228c      	movs	r2, #140	; 0x8c
 8000f5c:	2128      	movs	r1, #40	; 0x28
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f7ff f930 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	645c      	str	r4, [r3, #68]	; 0x44
	posLabel = new FlickerFreeText(40, 140, 1, (uint8_t*)"POS", 3);
 8000f68:	2018      	movs	r0, #24
 8000f6a:	f00a f8ed 	bl	800b148 <_Znwj>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461c      	mov	r4, r3
 8000f72:	2303      	movs	r3, #3
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <_ZN8MainPageC1EP9Telemetry+0x36c>)
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	228c      	movs	r2, #140	; 0x8c
 8000f7e:	2128      	movs	r1, #40	; 0x28
 8000f80:	4620      	mov	r0, r4
 8000f82:	f7ff f91f 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	649c      	str	r4, [r3, #72]	; 0x48
	fuelLabel = new FlickerFreeText(40, 175, 1, (uint8_t*)"FUEL", 4);
 8000f8a:	2018      	movs	r0, #24
 8000f8c:	f00a f8dc 	bl	800b148 <_Znwj>
 8000f90:	4603      	mov	r3, r0
 8000f92:	461c      	mov	r4, r3
 8000f94:	2304      	movs	r3, #4
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <_ZN8MainPageC1EP9Telemetry+0x370>)
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	22af      	movs	r2, #175	; 0xaf
 8000fa0:	2128      	movs	r1, #40	; 0x28
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f7ff f90e 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	64dc      	str	r4, [r3, #76]	; 0x4c
}
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800fc0c 	.word	0x0800fc0c
 8000fbc:	0800bc00 	.word	0x0800bc00
 8000fc0:	0800bc04 	.word	0x0800bc04
 8000fc4:	0800dbe0 	.word	0x0800dbe0
 8000fc8:	0800bc10 	.word	0x0800bc10
 8000fcc:	0800bc18 	.word	0x0800bc18
 8000fd0:	0800bc24 	.word	0x0800bc24
 8000fd4:	0800bc30 	.word	0x0800bc30
 8000fd8:	0800c89c 	.word	0x0800c89c
 8000fdc:	0800bc34 	.word	0x0800bc34
 8000fe0:	0800bc38 	.word	0x0800bc38
 8000fe4:	0800bc3c 	.word	0x0800bc3c
 8000fe8:	0800bc44 	.word	0x0800bc44
 8000fec:	0800bc48 	.word	0x0800bc48
 8000ff0:	0800bc50 	.word	0x0800bc50
 8000ff4:	0800bc54 	.word	0x0800bc54
 8000ff8:	0800bc58 	.word	0x0800bc58

08000ffc <_ZN8MainPage6StaticEv>:

void MainPage::Static()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	lastMode = 0;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800100c:	2000      	movs	r0, #0
 800100e:	f003 fe51 	bl	8004cb4 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001012:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8001016:	f003 fe15 	bl	8004c44 <BSP_LCD_SetTextColor>

	BSP_LCD_FillRect(30, 72, 2, 120);
 800101a:	2378      	movs	r3, #120	; 0x78
 800101c:	2202      	movs	r2, #2
 800101e:	2148      	movs	r1, #72	; 0x48
 8001020:	201e      	movs	r0, #30
 8001022:	f004 fa29 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 72, 140, 2);
 8001026:	2302      	movs	r3, #2
 8001028:	228c      	movs	r2, #140	; 0x8c
 800102a:	2148      	movs	r1, #72	; 0x48
 800102c:	201e      	movs	r0, #30
 800102e:	f004 fa23 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(170, 72, 2, 120);
 8001032:	2378      	movs	r3, #120	; 0x78
 8001034:	2202      	movs	r2, #2
 8001036:	2148      	movs	r1, #72	; 0x48
 8001038:	20aa      	movs	r0, #170	; 0xaa
 800103a:	f004 fa1d 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(30, 190 , 140, 2);
 800103e:	2302      	movs	r3, #2
 8001040:	228c      	movs	r2, #140	; 0x8c
 8001042:	21be      	movs	r1, #190	; 0xbe
 8001044:	201e      	movs	r0, #30
 8001046:	f004 fa17 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(330, 175, 2, 90);
 800104a:	235a      	movs	r3, #90	; 0x5a
 800104c:	2202      	movs	r2, #2
 800104e:	21af      	movs	r1, #175	; 0xaf
 8001050:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001054:	f004 fa10 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(330, 175, 120, 2);
 8001058:	2302      	movs	r3, #2
 800105a:	2278      	movs	r2, #120	; 0x78
 800105c:	21af      	movs	r1, #175	; 0xaf
 800105e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001062:	f004 fa09 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(450, 175, 2, 90);
 8001066:	235a      	movs	r3, #90	; 0x5a
 8001068:	2202      	movs	r2, #2
 800106a:	21af      	movs	r1, #175	; 0xaf
 800106c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001070:	f004 fa02 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(330, 263 , 120, 2);
 8001074:	2302      	movs	r3, #2
 8001076:	2278      	movs	r2, #120	; 0x78
 8001078:	f240 1107 	movw	r1, #263	; 0x107
 800107c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001080:	f004 f9fa 	bl	8005478 <BSP_LCD_FillRect>

	BSP_LCD_SetFont(&FreeSans12pt7b);
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <_ZN8MainPage6StaticEv+0xc0>)
 8001086:	f003 fdfd 	bl	8004c84 <BSP_LCD_SetFont>
	mixLabel->Draw_Text((uint8_t*)"MIX", true);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800108e:	2201      	movs	r2, #1
 8001090:	490b      	ldr	r1, [pc, #44]	; (80010c0 <_ZN8MainPage6StaticEv+0xc4>)
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f944 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
	ersLabel->Draw_Text((uint8_t*)"ERS", true);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109c:	2201      	movs	r2, #1
 800109e:	4909      	ldr	r1, [pc, #36]	; (80010c4 <_ZN8MainPage6StaticEv+0xc8>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f93d 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
	fuelLabel->Draw_Text((uint8_t*)"FUEL", true);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	2201      	movs	r2, #1
 80010ac:	4906      	ldr	r1, [pc, #24]	; (80010c8 <_ZN8MainPage6StaticEv+0xcc>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f936 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800c89c 	.word	0x0800c89c
 80010c0:	0800bc44 	.word	0x0800bc44
 80010c4:	0800bc50 	.word	0x0800bc50
 80010c8:	0800bc58 	.word	0x0800bc58

080010cc <_ZN8MainPage6UpdateE9Telemetryh>:

void MainPage::Update(Telemetry telemetry, uint8_t redraw)
{
 80010cc:	b084      	sub	sp, #16
 80010ce:	b590      	push	{r4, r7, lr}
 80010d0:	b08b      	sub	sp, #44	; 0x2c
 80010d2:	af04      	add	r7, sp, #16
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t curTick = HAL_GetTick();
 80010de:	f004 fa6d 	bl	80055bc <HAL_GetTick>
 80010e2:	60f8      	str	r0, [r7, #12]
	if(redraw)
 80010e4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <_ZN8MainPage6UpdateE9Telemetryh+0x30>
	{
		ERSValue = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		FuelValue = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010fc:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8001100:	f003 fda0 	bl	8004c44 <BSP_LCD_SetTextColor>
	//Gear
	BSP_LCD_SetFont(&FreeSans24pt7b);
 8001104:	486f      	ldr	r0, [pc, #444]	; (80012c4 <_ZN8MainPage6UpdateE9Telemetryh+0x1f8>)
 8001106:	f003 fdbd 	bl	8004c84 <BSP_LCD_SetFont>
	if(telemetry.gear == -1)
 800110a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001112:	d107      	bne.n	8001124 <_ZN8MainPage6UpdateE9Telemetryh+0x58>
		snprintf((char*)buffer, 2, "R");
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	335f      	adds	r3, #95	; 0x5f
 8001118:	4a6b      	ldr	r2, [pc, #428]	; (80012c8 <_ZN8MainPage6UpdateE9Telemetryh+0x1fc>)
 800111a:	2102      	movs	r1, #2
 800111c:	4618      	mov	r0, r3
 800111e:	f00a f983 	bl	800b428 <sniprintf>
 8001122:	e014      	b.n	800114e <_ZN8MainPage6UpdateE9Telemetryh+0x82>
	else if(telemetry.gear == 0)
 8001124:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001128:	2b00      	cmp	r3, #0
 800112a:	d107      	bne.n	800113c <_ZN8MainPage6UpdateE9Telemetryh+0x70>
		snprintf((char*)buffer, 2, "N");
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	335f      	adds	r3, #95	; 0x5f
 8001130:	4a66      	ldr	r2, [pc, #408]	; (80012cc <_ZN8MainPage6UpdateE9Telemetryh+0x200>)
 8001132:	2102      	movs	r1, #2
 8001134:	4618      	mov	r0, r3
 8001136:	f00a f977 	bl	800b428 <sniprintf>
 800113a:	e008      	b.n	800114e <_ZN8MainPage6UpdateE9Telemetryh+0x82>
	else
		snprintf((char*)buffer, 2, "%d", telemetry.gear);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001142:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001146:	4a62      	ldr	r2, [pc, #392]	; (80012d0 <_ZN8MainPage6UpdateE9Telemetryh+0x204>)
 8001148:	2102      	movs	r1, #2
 800114a:	f00a f96d 	bl	800b428 <sniprintf>
	gear->Draw_Text(buffer, redraw);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	335f      	adds	r3, #95	; 0x5f
 8001156:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff f8e0 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

	//CurLap, DeltaAhead
	BSP_LCD_SetFont(&FreeSans18pt7b);
 8001160:	485c      	ldr	r0, [pc, #368]	; (80012d4 <_ZN8MainPage6UpdateE9Telemetryh+0x208>)
 8001162:	f003 fd8f 	bl	8004c84 <BSP_LCD_SetFont>
	snprintf((char*)buffer, 10, "%02d:%02d.%03d",telemetry.curLapSec / 60,telemetry.curLapSec % 60 ,telemetry.curLapMs);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 800116c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001170:	4a59      	ldr	r2, [pc, #356]	; (80012d8 <_ZN8MainPage6UpdateE9Telemetryh+0x20c>)
 8001172:	fb82 1203 	smull	r1, r2, r2, r3
 8001176:	441a      	add	r2, r3
 8001178:	1152      	asrs	r2, r2, #5
 800117a:	17db      	asrs	r3, r3, #31
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b21b      	sxth	r3, r3
 8001180:	461c      	mov	r4, r3
 8001182:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	; 0x60
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <_ZN8MainPage6UpdateE9Telemetryh+0x20c>)
 8001188:	fb83 1302 	smull	r1, r3, r3, r2
 800118c:	4413      	add	r3, r2
 800118e:	1159      	asrs	r1, r3, #5
 8001190:	17d3      	asrs	r3, r2, #31
 8001192:	1ac9      	subs	r1, r1, r3
 8001194:	460b      	mov	r3, r1
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	1a5b      	subs	r3, r3, r1
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b21b      	sxth	r3, r3
 80011a0:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4623      	mov	r3, r4
 80011aa:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <_ZN8MainPage6UpdateE9Telemetryh+0x210>)
 80011ac:	210a      	movs	r1, #10
 80011ae:	f00a f93b 	bl	800b428 <sniprintf>
	curLapTime->Draw_Text(buffer, redraw);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6858      	ldr	r0, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	335f      	adds	r3, #95	; 0x5f
 80011ba:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff f8ae 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

	if(!((oldTelemetry->flags >> 7) & 1) && ((telemetry.flags >> 7) & 1))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011c8:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80011cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d108      	bne.n	80011e6 <_ZN8MainPage6UpdateE9Telemetryh+0x11a>
 80011d4:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80011d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <_ZN8MainPage6UpdateE9Telemetryh+0x11a>
		lastDRSTick = curTick;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54

	if(((telemetry.flags >> 7) & 1) && (curTick - lastDRSTick <= 1000))	//DRS On
 80011e6:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d07a      	beq.n	80012e8 <_ZN8MainPage6UpdateE9Telemetryh+0x21c>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011fe:	d873      	bhi.n	80012e8 <_ZN8MainPage6UpdateE9Telemetryh+0x21c>
	{
		if(!((lastMode >> 7) & 1))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001206:	b25b      	sxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	db51      	blt.n	80012b0 <_ZN8MainPage6UpdateE9Telemetryh+0x1e4>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800120c:	2000      	movs	r0, #0
 800120e:	f003 fd19 	bl	8004c44 <BSP_LCD_SetTextColor>
			snprintf((char*)buffer, 4, "%3d",telemetry.tireFL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001218:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 800121c:	4a30      	ldr	r2, [pc, #192]	; (80012e0 <_ZN8MainPage6UpdateE9Telemetryh+0x214>)
 800121e:	2104      	movs	r1, #4
 8001220:	f00a f902 	bl	800b428 <sniprintf>
			tireFL->Draw_Text(buffer, true);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	335f      	adds	r3, #95	; 0x5f
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff f876 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			snprintf((char*)buffer, 4, "%3d",telemetry.tireFR);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 800123a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800123e:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <_ZN8MainPage6UpdateE9Telemetryh+0x214>)
 8001240:	2104      	movs	r1, #4
 8001242:	f00a f8f1 	bl	800b428 <sniprintf>
			tireFR->Draw_Text(buffer, true);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	335f      	adds	r3, #95	; 0x5f
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff f865 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			snprintf((char*)buffer, 4, "%3d",telemetry.tireRL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 800125c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001260:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <_ZN8MainPage6UpdateE9Telemetryh+0x214>)
 8001262:	2104      	movs	r1, #4
 8001264:	f00a f8e0 	bl	800b428 <sniprintf>
			tireRL->Draw_Text(buffer, true);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	335f      	adds	r3, #95	; 0x5f
 8001270:	2201      	movs	r2, #1
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff f854 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			snprintf((char*)buffer, 4, "%3d",telemetry.tireRR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 800127e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001282:	4a17      	ldr	r2, [pc, #92]	; (80012e0 <_ZN8MainPage6UpdateE9Telemetryh+0x214>)
 8001284:	2104      	movs	r1, #4
 8001286:	f00a f8cf 	bl	800b428 <sniprintf>
			tireRR->Draw_Text(buffer, true);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	335f      	adds	r3, #95	; 0x5f
 8001292:	2201      	movs	r2, #1
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff f843 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800129a:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800129e:	f003 fcd1 	bl	8004c44 <BSP_LCD_SetTextColor>

			drsOn->Draw_Text((uint8_t*)"DRS ON", true);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a6:	2201      	movs	r2, #1
 80012a8:	490e      	ldr	r1, [pc, #56]	; (80012e4 <_ZN8MainPage6UpdateE9Telemetryh+0x218>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f838 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		}

		lastMode |= (1 << 7);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80012b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80012c2:	e08b      	b.n	80013dc <_ZN8MainPage6UpdateE9Telemetryh+0x310>
 80012c4:	0800fc0c 	.word	0x0800fc0c
 80012c8:	0800bc60 	.word	0x0800bc60
 80012cc:	0800bc64 	.word	0x0800bc64
 80012d0:	0800bc68 	.word	0x0800bc68
 80012d4:	0800dbe0 	.word	0x0800dbe0
 80012d8:	88888889 	.word	0x88888889
 80012dc:	0800bc6c 	.word	0x0800bc6c
 80012e0:	0800bc7c 	.word	0x0800bc7c
 80012e4:	0800bc10 	.word	0x0800bc10
	}
	else
	{
		if((lastMode >> 7) & 1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da0d      	bge.n	8001310 <_ZN8MainPage6UpdateE9Telemetryh+0x244>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f003 fca5 	bl	8004c44 <BSP_LCD_SetTextColor>
			drsOn->Draw_Text((uint8_t*)"      ", true);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fe:	2201      	movs	r2, #1
 8001300:	49bf      	ldr	r1, [pc, #764]	; (8001600 <_ZN8MainPage6UpdateE9Telemetryh+0x534>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f80c 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001308:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800130c:	f003 fc9a 	bl	8004c44 <BSP_LCD_SetTextColor>
		}
		uint8_t modeRedraw = (lastMode >> 7) & 1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001316:	09db      	lsrs	r3, r3, #7
 8001318:	72fb      	strb	r3, [r7, #11]
		//Tires
		snprintf((char*)buffer, 4, "%3d",telemetry.tireFL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001320:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001324:	4ab7      	ldr	r2, [pc, #732]	; (8001604 <_ZN8MainPage6UpdateE9Telemetryh+0x538>)
 8001326:	2104      	movs	r1, #4
 8001328:	f00a f87e 	bl	800b428 <sniprintf>
		tireFL->Draw_Text(buffer, redraw | modeRedraw);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001336:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	4313      	orrs	r3, r2
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	f7fe ffed 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d",telemetry.tireFR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 800134c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8001350:	4aac      	ldr	r2, [pc, #688]	; (8001604 <_ZN8MainPage6UpdateE9Telemetryh+0x538>)
 8001352:	2104      	movs	r1, #4
 8001354:	f00a f868 	bl	800b428 <sniprintf>
		tireFR->Draw_Text(buffer, redraw | modeRedraw);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001362:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	4313      	orrs	r3, r2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	f7fe ffd7 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d",telemetry.tireRL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001378:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800137c:	4aa1      	ldr	r2, [pc, #644]	; (8001604 <_ZN8MainPage6UpdateE9Telemetryh+0x538>)
 800137e:	2104      	movs	r1, #4
 8001380:	f00a f852 	bl	800b428 <sniprintf>
		tireRL->Draw_Text(buffer, redraw | modeRedraw);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 800138e:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	4313      	orrs	r3, r2
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	f7fe ffc1 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d",telemetry.tireRR);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 80013a4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80013a8:	4a96      	ldr	r2, [pc, #600]	; (8001604 <_ZN8MainPage6UpdateE9Telemetryh+0x538>)
 80013aa:	2104      	movs	r1, #4
 80013ac:	f00a f83c 	bl	800b428 <sniprintf>
		tireRR->Draw_Text(buffer, redraw | modeRedraw);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 80013ba:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	f7fe ffab 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		lastMode &= ~(1 << 7);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80013d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	if(!((oldTelemetry->flags >> 2) & 1) && ((telemetry.flags >> 2) & 1))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013e0:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10c      	bne.n	8001406 <_ZN8MainPage6UpdateE9Telemetryh+0x33a>
 80013ec:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <_ZN8MainPage6UpdateE9Telemetryh+0x33a>
	{
		endOfLapTriggered = 1;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		lastEndOfLapTick = curTick;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	659a      	str	r2, [r3, #88]	; 0x58
	}

	BSP_LCD_SetFont(&FreeSans12pt7b);
 8001406:	4880      	ldr	r0, [pc, #512]	; (8001608 <_ZN8MainPage6UpdateE9Telemetryh+0x53c>)
 8001408:	f003 fc3c 	bl	8004c84 <BSP_LCD_SetFont>
	if(endOfLapTriggered)	//EndOfLap
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 810c 	beq.w	8001630 <_ZN8MainPage6UpdateE9Telemetryh+0x564>
	{
		if(!((lastMode >> 2) & 1))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d129      	bne.n	800147a <_ZN8MainPage6UpdateE9Telemetryh+0x3ae>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001426:	2000      	movs	r0, #0
 8001428:	f003 fc0c 	bl	8004c44 <BSP_LCD_SetTextColor>
			mixLabel->Draw_Text((uint8_t*)"MIX", true);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001430:	2201      	movs	r2, #1
 8001432:	4976      	ldr	r1, [pc, #472]	; (800160c <_ZN8MainPage6UpdateE9Telemetryh+0x540>)
 8001434:	4618      	mov	r0, r3
 8001436:	f7fe ff73 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			ersLabel->Draw_Text((uint8_t*)"ERS", true);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	2201      	movs	r2, #1
 8001440:	4973      	ldr	r1, [pc, #460]	; (8001610 <_ZN8MainPage6UpdateE9Telemetryh+0x544>)
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ff6c 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			fuel->Draw_Text((uint8_t*)"   ", true);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	2201      	movs	r2, #1
 800144e:	4971      	ldr	r1, [pc, #452]	; (8001614 <_ZN8MainPage6UpdateE9Telemetryh+0x548>)
 8001450:	4618      	mov	r0, r3
 8001452:	f7fe ff65 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001456:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800145a:	f003 fbf3 	bl	8004c44 <BSP_LCD_SetTextColor>
			leftLabel->Draw_Text((uint8_t*)"LEFT", true);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	2201      	movs	r2, #1
 8001464:	496c      	ldr	r1, [pc, #432]	; (8001618 <_ZN8MainPage6UpdateE9Telemetryh+0x54c>)
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe ff5a 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			posLabel->Draw_Text((uint8_t*)"POS", true);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001470:	2201      	movs	r2, #1
 8001472:	496a      	ldr	r1, [pc, #424]	; (800161c <_ZN8MainPage6UpdateE9Telemetryh+0x550>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ff53 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		}
		snprintf((char*)buffer, 4, "%3d",telemetry.lapsRemains);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001480:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001484:	4a5f      	ldr	r2, [pc, #380]	; (8001604 <_ZN8MainPage6UpdateE9Telemetryh+0x538>)
 8001486:	2104      	movs	r1, #4
 8001488:	f009 ffce 	bl	800b428 <sniprintf>
		mix->Draw_Text(buffer, redraw);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68d8      	ldr	r0, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	335f      	adds	r3, #95	; 0x5f
 8001494:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8001498:	4619      	mov	r1, r3
 800149a:	f7fe ff41 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d",telemetry.position);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 80014a4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80014a8:	4a56      	ldr	r2, [pc, #344]	; (8001604 <_ZN8MainPage6UpdateE9Telemetryh+0x538>)
 80014aa:	2104      	movs	r1, #4
 80014ac:	f009 ffbc 	bl	800b428 <sniprintf>
		ers->Draw_Text(buffer, redraw);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6918      	ldr	r0, [r3, #16]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	335f      	adds	r3, #95	; 0x5f
 80014b8:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80014bc:	4619      	mov	r1, r3
 80014be:	f7fe ff2f 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		int8_t tmpSign = telemetry.fuelDelta > 0 ? 1 : -1;
 80014c2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dd01      	ble.n	80014ce <_ZN8MainPage6UpdateE9Telemetryh+0x402>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e001      	b.n	80014d2 <_ZN8MainPage6UpdateE9Telemetryh+0x406>
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	72bb      	strb	r3, [r7, #10]
		telemetry.fuelDelta *= tmpSign;
 80014d4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80014d8:	b29b      	uxth	r3, r3
 80014da:	f997 200a 	ldrsb.w	r2, [r7, #10]
 80014de:	b292      	uxth	r2, r2
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
		snprintf((char*)buffer, 6, "%+2d.%02d", telemetry.fuelDelta / 100, telemetry.fuelDelta % 100);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 80014f0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80014f4:	4a4a      	ldr	r2, [pc, #296]	; (8001620 <_ZN8MainPage6UpdateE9Telemetryh+0x554>)
 80014f6:	fb82 1203 	smull	r1, r2, r2, r3
 80014fa:	1152      	asrs	r2, r2, #5
 80014fc:	17db      	asrs	r3, r3, #31
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b21b      	sxth	r3, r3
 8001502:	461c      	mov	r4, r3
 8001504:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001508:	4a45      	ldr	r2, [pc, #276]	; (8001620 <_ZN8MainPage6UpdateE9Telemetryh+0x554>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1151      	asrs	r1, r2, #5
 8001510:	17da      	asrs	r2, r3, #31
 8001512:	1a8a      	subs	r2, r1, r2
 8001514:	2164      	movs	r1, #100	; 0x64
 8001516:	fb01 f202 	mul.w	r2, r1, r2
 800151a:	1a9b      	subs	r3, r3, r2
 800151c:	b21b      	sxth	r3, r3
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4623      	mov	r3, r4
 8001522:	4a40      	ldr	r2, [pc, #256]	; (8001624 <_ZN8MainPage6UpdateE9Telemetryh+0x558>)
 8001524:	2106      	movs	r1, #6
 8001526:	f009 ff7f 	bl	800b428 <sniprintf>
		if(buffer[0]=='+' && tmpSign == -1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001530:	2b2b      	cmp	r3, #43	; 0x2b
 8001532:	d108      	bne.n	8001546 <_ZN8MainPage6UpdateE9Telemetryh+0x47a>
 8001534:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800153c:	d103      	bne.n	8001546 <_ZN8MainPage6UpdateE9Telemetryh+0x47a>
			buffer[0] = '-';
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	222d      	movs	r2, #45	; 0x2d
 8001542:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
		fuelDelta->Draw_Text(buffer, redraw || (lastMode >> 2) & 1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6998      	ldr	r0, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001550:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001554:	2b00      	cmp	r3, #0
 8001556:	d106      	bne.n	8001566 <_ZN8MainPage6UpdateE9Telemetryh+0x49a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <_ZN8MainPage6UpdateE9Telemetryh+0x49e>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <_ZN8MainPage6UpdateE9Telemetryh+0x4a0>
 800156a:	2300      	movs	r3, #0
 800156c:	461a      	mov	r2, r3
 800156e:	f7fe fed7 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 10, "%02d:%02d.%03d",telemetry.lastLapSec / 60,telemetry.lastLapSec % 60 ,telemetry.lastLapMs);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001578:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800157c:	4a2a      	ldr	r2, [pc, #168]	; (8001628 <_ZN8MainPage6UpdateE9Telemetryh+0x55c>)
 800157e:	fb82 1203 	smull	r1, r2, r2, r3
 8001582:	441a      	add	r2, r3
 8001584:	1152      	asrs	r2, r2, #5
 8001586:	17db      	asrs	r3, r3, #31
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	b21b      	sxth	r3, r3
 800158c:	461c      	mov	r4, r3
 800158e:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <_ZN8MainPage6UpdateE9Telemetryh+0x55c>)
 8001594:	fb83 1302 	smull	r1, r3, r3, r2
 8001598:	4413      	add	r3, r2
 800159a:	1159      	asrs	r1, r3, #5
 800159c:	17d3      	asrs	r3, r2, #31
 800159e:	1ac9      	subs	r1, r1, r3
 80015a0:	460b      	mov	r3, r1
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 80015b0:	9201      	str	r2, [sp, #4]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4623      	mov	r3, r4
 80015b6:	4a1d      	ldr	r2, [pc, #116]	; (800162c <_ZN8MainPage6UpdateE9Telemetryh+0x560>)
 80015b8:	210a      	movs	r1, #10
 80015ba:	f009 ff35 	bl	800b428 <sniprintf>
		lastLapTime->Draw_Text(buffer, redraw || !((lastMode >> 2) & 1));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 80015c8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <_ZN8MainPage6UpdateE9Telemetryh+0x512>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <_ZN8MainPage6UpdateE9Telemetryh+0x516>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <_ZN8MainPage6UpdateE9Telemetryh+0x518>
 80015e2:	2300      	movs	r3, #0
 80015e4:	461a      	mov	r2, r3
 80015e6:	f7fe fe9b 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		lastMode |= (1 << 2);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80015fc:	e09d      	b.n	800173a <_ZN8MainPage6UpdateE9Telemetryh+0x66e>
 80015fe:	bf00      	nop
 8001600:	0800bc80 	.word	0x0800bc80
 8001604:	0800bc7c 	.word	0x0800bc7c
 8001608:	0800c89c 	.word	0x0800c89c
 800160c:	0800bc44 	.word	0x0800bc44
 8001610:	0800bc50 	.word	0x0800bc50
 8001614:	0800bc88 	.word	0x0800bc88
 8001618:	0800bc48 	.word	0x0800bc48
 800161c:	0800bc54 	.word	0x0800bc54
 8001620:	51eb851f 	.word	0x51eb851f
 8001624:	0800bc8c 	.word	0x0800bc8c
 8001628:	88888889 	.word	0x88888889
 800162c:	0800bc6c 	.word	0x0800bc6c
	}
	else
	{
		if((lastMode >> 2) & 1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	d030      	beq.n	80016a0 <_ZN8MainPage6UpdateE9Telemetryh+0x5d4>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800163e:	2000      	movs	r0, #0
 8001640:	f003 fb00 	bl	8004c44 <BSP_LCD_SetTextColor>
			leftLabel->Draw_Text((uint8_t*)"LEFT", true);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	2201      	movs	r2, #1
 800164a:	49ac      	ldr	r1, [pc, #688]	; (80018fc <_ZN8MainPage6UpdateE9Telemetryh+0x830>)
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fe67 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			posLabel->Draw_Text((uint8_t*)"POS", true);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	2201      	movs	r2, #1
 8001658:	49a9      	ldr	r1, [pc, #676]	; (8001900 <_ZN8MainPage6UpdateE9Telemetryh+0x834>)
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe fe60 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			fuelDelta->Draw_Text((uint8_t*)"     ", true);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2201      	movs	r2, #1
 8001666:	49a7      	ldr	r1, [pc, #668]	; (8001904 <_ZN8MainPage6UpdateE9Telemetryh+0x838>)
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fe59 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			lastLapTime->Draw_Text((uint8_t*)"         ", true);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	2201      	movs	r2, #1
 8001674:	49a4      	ldr	r1, [pc, #656]	; (8001908 <_ZN8MainPage6UpdateE9Telemetryh+0x83c>)
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fe52 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800167c:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8001680:	f003 fae0 	bl	8004c44 <BSP_LCD_SetTextColor>
			mixLabel->Draw_Text((uint8_t*)"MIX", true);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	2201      	movs	r2, #1
 800168a:	49a0      	ldr	r1, [pc, #640]	; (800190c <_ZN8MainPage6UpdateE9Telemetryh+0x840>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe fe47 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			ersLabel->Draw_Text((uint8_t*)"ERS", true);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	2201      	movs	r2, #1
 8001698:	499d      	ldr	r1, [pc, #628]	; (8001910 <_ZN8MainPage6UpdateE9Telemetryh+0x844>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fe40 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		}
		//MIX ERS FUEL
		snprintf((char*)buffer, 4, "%3d",telemetry.mix+1);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 80016a6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a99      	ldr	r2, [pc, #612]	; (8001914 <_ZN8MainPage6UpdateE9Telemetryh+0x848>)
 80016ae:	2104      	movs	r1, #4
 80016b0:	f009 feba 	bl	800b428 <sniprintf>
		mix->Draw_Text(buffer, redraw);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68d8      	ldr	r0, [r3, #12]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	335f      	adds	r3, #95	; 0x5f
 80016bc:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7fe fe2d 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d",telemetry.ers);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 80016cc:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80016d0:	4a90      	ldr	r2, [pc, #576]	; (8001914 <_ZN8MainPage6UpdateE9Telemetryh+0x848>)
 80016d2:	2104      	movs	r1, #4
 80016d4:	f009 fea8 	bl	800b428 <sniprintf>
		ers->Draw_Text(buffer, redraw);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6918      	ldr	r0, [r3, #16]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	335f      	adds	r3, #95	; 0x5f
 80016e0:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7fe fe1b 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d",telemetry.fuel);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 80016f0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80016f4:	4a87      	ldr	r2, [pc, #540]	; (8001914 <_ZN8MainPage6UpdateE9Telemetryh+0x848>)
 80016f6:	2104      	movs	r1, #4
 80016f8:	f009 fe96 	bl	800b428 <sniprintf>
		fuel->Draw_Text(buffer, redraw || (lastMode >> 2) & 1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6958      	ldr	r0, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001706:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <_ZN8MainPage6UpdateE9Telemetryh+0x650>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <_ZN8MainPage6UpdateE9Telemetryh+0x654>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <_ZN8MainPage6UpdateE9Telemetryh+0x656>
 8001720:	2300      	movs	r3, #0
 8001722:	461a      	mov	r2, r3
 8001724:	f7fe fdfc 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		lastMode &= ~(1 << 2);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800172e:	f023 0304 	bic.w	r3, r3, #4
 8001732:	b2da      	uxtb	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	if((telemetry.flags >> 0) & 1)	//SafetyCar
 800173a:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80f2 	beq.w	800192c <_ZN8MainPage6UpdateE9Telemetryh+0x860>
	{
		if(!((lastMode >> 1) & 1))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d14f      	bne.n	80017f6 <_ZN8MainPage6UpdateE9Telemetryh+0x72a>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001756:	2000      	movs	r0, #0
 8001758:	f003 fa74 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(330, 175, 2, 90);
 800175c:	235a      	movs	r3, #90	; 0x5a
 800175e:	2202      	movs	r2, #2
 8001760:	21af      	movs	r1, #175	; 0xaf
 8001762:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001766:	f003 fe87 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_FillRect(330, 175, 120, 2);
 800176a:	2302      	movs	r3, #2
 800176c:	2278      	movs	r2, #120	; 0x78
 800176e:	21af      	movs	r1, #175	; 0xaf
 8001770:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001774:	f003 fe80 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_FillRect(450, 175, 2, 90);
 8001778:	235a      	movs	r3, #90	; 0x5a
 800177a:	2202      	movs	r2, #2
 800177c:	21af      	movs	r1, #175	; 0xaf
 800177e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001782:	f003 fe79 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_FillRect(330, 263 , 120, 2);
 8001786:	2302      	movs	r3, #2
 8001788:	2278      	movs	r2, #120	; 0x78
 800178a:	f240 1107 	movw	r1, #263	; 0x107
 800178e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001792:	f003 fe71 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001796:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800179a:	f003 fa53 	bl	8004c44 <BSP_LCD_SetTextColor>

			bestLap->Draw_Text((uint8_t*)"         ", redraw);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80017a6:	4958      	ldr	r1, [pc, #352]	; (8001908 <_ZN8MainPage6UpdateE9Telemetryh+0x83c>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fdb9 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			deltaBest->Draw_Text((uint8_t*)"        ", redraw);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80017b6:	4958      	ldr	r1, [pc, #352]	; (8001918 <_ZN8MainPage6UpdateE9Telemetryh+0x84c>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fdb1 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

			BSP_LCD_FillRect(30, 268, BSP_LCD_GetXSize() - 59, 48);
 80017be:	f003 fa29 	bl	8004c14 <BSP_LCD_GetXSize>
 80017c2:	4603      	mov	r3, r0
 80017c4:	3b3b      	subs	r3, #59	; 0x3b
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2330      	movs	r3, #48	; 0x30
 80017ca:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80017ce:	201e      	movs	r0, #30
 80017d0:	f003 fe52 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f003 fa35 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&FreeSans24pt7b);
 80017da:	4850      	ldr	r0, [pc, #320]	; (800191c <_ZN8MainPage6UpdateE9Telemetryh+0x850>)
 80017dc:	f003 fa52 	bl	8004c84 <BSP_LCD_SetFont>
			safetyCar->Draw_Text((uint8_t*)"SAFETY CAR", true);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e4:	2201      	movs	r2, #1
 80017e6:	494e      	ldr	r1, [pc, #312]	; (8001920 <_ZN8MainPage6UpdateE9Telemetryh+0x854>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fd99 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017ee:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80017f2:	f003 fa27 	bl	8004c44 <BSP_LCD_SetTextColor>
		}

		BSP_LCD_SetFont(&FreeSans18pt7b);
 80017f6:	484b      	ldr	r0, [pc, #300]	; (8001924 <_ZN8MainPage6UpdateE9Telemetryh+0x858>)
 80017f8:	f003 fa44 	bl	8004c84 <BSP_LCD_SetFont>
		uint8_t redSafetyCarDelta = false;
 80017fc:	2300      	movs	r3, #0
 80017fe:	75fb      	strb	r3, [r7, #23]
		if(telemetry.safetyCarDeltaMs > 0)
 8001800:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd0c      	ble.n	8001822 <_ZN8MainPage6UpdateE9Telemetryh+0x756>
		{
			if(oldTelemetry->safetyCarDeltaMs <= 0)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800180c:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8001810:	2b00      	cmp	r3, #0
 8001812:	dc01      	bgt.n	8001818 <_ZN8MainPage6UpdateE9Telemetryh+0x74c>
				redSafetyCarDelta = true;
 8001814:	2301      	movs	r3, #1
 8001816:	75fb      	strb	r3, [r7, #23]
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001818:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800181c:	f003 fa12 	bl	8004c44 <BSP_LCD_SetTextColor>
 8001820:	e01e      	b.n	8001860 <_ZN8MainPage6UpdateE9Telemetryh+0x794>
		}
		else if(telemetry.safetyCarDeltaMs < 0)
 8001822:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001826:	2b00      	cmp	r3, #0
 8001828:	da0c      	bge.n	8001844 <_ZN8MainPage6UpdateE9Telemetryh+0x778>
		{
			if(oldTelemetry->safetyCarDeltaMs >= 0)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800182e:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8001832:	2b00      	cmp	r3, #0
 8001834:	db01      	blt.n	800183a <_ZN8MainPage6UpdateE9Telemetryh+0x76e>
				redSafetyCarDelta = true;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
			BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800183a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800183e:	f003 fa01 	bl	8004c44 <BSP_LCD_SetTextColor>
 8001842:	e00d      	b.n	8001860 <_ZN8MainPage6UpdateE9Telemetryh+0x794>
		}
		else
		{
			if(oldTelemetry->safetyCarDeltaMs > 0 || oldTelemetry->safetyCarDeltaMs < 0)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001848:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800184c:	2b00      	cmp	r3, #0
 800184e:	dc05      	bgt.n	800185c <_ZN8MainPage6UpdateE9Telemetryh+0x790>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001854:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8001858:	2b00      	cmp	r3, #0
 800185a:	da01      	bge.n	8001860 <_ZN8MainPage6UpdateE9Telemetryh+0x794>
				redSafetyCarDelta = true;
 800185c:	2301      	movs	r3, #1
 800185e:	75fb      	strb	r3, [r7, #23]
		}
		snprintf((char*)buffer, 9, "%+4d.%03d", telemetry.safetyCarDeltaSec, telemetry.safetyCarDeltaMs < 0 ? -telemetry.safetyCarDeltaMs : telemetry.safetyCarDeltaMs);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001866:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800186a:	461a      	mov	r2, r3
 800186c:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001870:	2b00      	cmp	r3, #0
 8001872:	bfb8      	it	lt
 8001874:	425b      	neglt	r3, r3
 8001876:	b29b      	uxth	r3, r3
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	4a2a      	ldr	r2, [pc, #168]	; (8001928 <_ZN8MainPage6UpdateE9Telemetryh+0x85c>)
 800187e:	2109      	movs	r1, #9
 8001880:	f009 fdd2 	bl	800b428 <sniprintf>
		if(telemetry.safetyCarDeltaMs < 0)
 8001884:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8001888:	2b00      	cmp	r3, #0
 800188a:	da16      	bge.n	80018ba <_ZN8MainPage6UpdateE9Telemetryh+0x7ee>
			for(uint8_t i =0;i<4;i++)
 800188c:	2300      	movs	r3, #0
 800188e:	75bb      	strb	r3, [r7, #22]
 8001890:	7dbb      	ldrb	r3, [r7, #22]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d811      	bhi.n	80018ba <_ZN8MainPage6UpdateE9Telemetryh+0x7ee>
				if(buffer[i]=='+')
 8001896:	7dbb      	ldrb	r3, [r7, #22]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 80018a0:	2b2b      	cmp	r3, #43	; 0x2b
 80018a2:	d106      	bne.n	80018b2 <_ZN8MainPage6UpdateE9Telemetryh+0x7e6>
				{
					buffer[i] = '-';
 80018a4:	7dbb      	ldrb	r3, [r7, #22]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	222d      	movs	r2, #45	; 0x2d
 80018ac:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
					break;
 80018b0:	e003      	b.n	80018ba <_ZN8MainPage6UpdateE9Telemetryh+0x7ee>
			for(uint8_t i =0;i<4;i++)
 80018b2:	7dbb      	ldrb	r3, [r7, #22]
 80018b4:	3301      	adds	r3, #1
 80018b6:	75bb      	strb	r3, [r7, #22]
 80018b8:	e7ea      	b.n	8001890 <_ZN8MainPage6UpdateE9Telemetryh+0x7c4>
				}
		deltaAhead->Draw_Text(buffer, redraw || redSafetyCarDelta);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6898      	ldr	r0, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 80018c4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d102      	bne.n	80018d2 <_ZN8MainPage6UpdateE9Telemetryh+0x806>
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <_ZN8MainPage6UpdateE9Telemetryh+0x80a>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <_ZN8MainPage6UpdateE9Telemetryh+0x80c>
 80018d6:	2300      	movs	r3, #0
 80018d8:	461a      	mov	r2, r3
 80018da:	f7fe fd21 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80018de:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80018e2:	f003 f9af 	bl	8004c44 <BSP_LCD_SetTextColor>

		lastMode |= (1 << 1);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80018f8:	e145      	b.n	8001b86 <_ZN8MainPage6UpdateE9Telemetryh+0xaba>
 80018fa:	bf00      	nop
 80018fc:	0800bc48 	.word	0x0800bc48
 8001900:	0800bc54 	.word	0x0800bc54
 8001904:	0800bc98 	.word	0x0800bc98
 8001908:	0800bca0 	.word	0x0800bca0
 800190c:	0800bc44 	.word	0x0800bc44
 8001910:	0800bc50 	.word	0x0800bc50
 8001914:	0800bc7c 	.word	0x0800bc7c
 8001918:	0800bcac 	.word	0x0800bcac
 800191c:	0800fc0c 	.word	0x0800fc0c
 8001920:	0800bc04 	.word	0x0800bc04
 8001924:	0800dbe0 	.word	0x0800dbe0
 8001928:	0800bcb8 	.word	0x0800bcb8
	}
	else
	{
		if((lastMode >> 1) & 1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d032      	beq.n	80019a0 <_ZN8MainPage6UpdateE9Telemetryh+0x8d4>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800193a:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800193e:	f003 f981 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(330, 175, 2, 90);
 8001942:	235a      	movs	r3, #90	; 0x5a
 8001944:	2202      	movs	r2, #2
 8001946:	21af      	movs	r1, #175	; 0xaf
 8001948:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800194c:	f003 fd94 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_FillRect(330, 175, 120, 2);
 8001950:	2302      	movs	r3, #2
 8001952:	2278      	movs	r2, #120	; 0x78
 8001954:	21af      	movs	r1, #175	; 0xaf
 8001956:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800195a:	f003 fd8d 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_FillRect(450, 175, 2, 90);
 800195e:	235a      	movs	r3, #90	; 0x5a
 8001960:	2202      	movs	r2, #2
 8001962:	21af      	movs	r1, #175	; 0xaf
 8001964:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001968:	f003 fd86 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_FillRect(330, 263 , 120, 2);
 800196c:	2302      	movs	r3, #2
 800196e:	2278      	movs	r2, #120	; 0x78
 8001970:	f240 1107 	movw	r1, #263	; 0x107
 8001974:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8001978:	f003 fd7e 	bl	8005478 <BSP_LCD_FillRect>

			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800197c:	2000      	movs	r0, #0
 800197e:	f003 f961 	bl	8004c44 <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(30, 268, BSP_LCD_GetXSize() - 59, 48);
 8001982:	f003 f947 	bl	8004c14 <BSP_LCD_GetXSize>
 8001986:	4603      	mov	r3, r0
 8001988:	3b3b      	subs	r3, #59	; 0x3b
 800198a:	b29a      	uxth	r2, r3
 800198c:	2330      	movs	r3, #48	; 0x30
 800198e:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001992:	201e      	movs	r0, #30
 8001994:	f003 fd70 	bl	8005478 <BSP_LCD_FillRect>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001998:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800199c:	f003 f952 	bl	8004c44 <BSP_LCD_SetTextColor>
		}

		//BestLap
		snprintf((char*)buffer, 10, "%02d:%02d.%03d",telemetry.bestLapSec / 60,telemetry.bestLapSec % 60 ,telemetry.bestLapMs);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 80019a6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80019aa:	4a90      	ldr	r2, [pc, #576]	; (8001bec <_ZN8MainPage6UpdateE9Telemetryh+0xb20>)
 80019ac:	fb82 1203 	smull	r1, r2, r2, r3
 80019b0:	441a      	add	r2, r3
 80019b2:	1152      	asrs	r2, r2, #5
 80019b4:	17db      	asrs	r3, r3, #31
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	461c      	mov	r4, r3
 80019bc:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 80019c0:	4b8a      	ldr	r3, [pc, #552]	; (8001bec <_ZN8MainPage6UpdateE9Telemetryh+0xb20>)
 80019c2:	fb83 1302 	smull	r1, r3, r3, r2
 80019c6:	4413      	add	r3, r2
 80019c8:	1159      	asrs	r1, r3, #5
 80019ca:	17d3      	asrs	r3, r2, #31
 80019cc:	1ac9      	subs	r1, r1, r3
 80019ce:	460b      	mov	r3, r1
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a5b      	subs	r3, r3, r1
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b21b      	sxth	r3, r3
 80019da:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 80019de:	9201      	str	r2, [sp, #4]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4623      	mov	r3, r4
 80019e4:	4a82      	ldr	r2, [pc, #520]	; (8001bf0 <_ZN8MainPage6UpdateE9Telemetryh+0xb24>)
 80019e6:	210a      	movs	r1, #10
 80019e8:	f009 fd1e 	bl	800b428 <sniprintf>
		bestLap->Draw_Text(buffer, redraw);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69d8      	ldr	r0, [r3, #28]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	335f      	adds	r3, #95	; 0x5f
 80019f4:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7fe fc91 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		uint8_t redrawDeltaToBest = false;
 80019fe:	2300      	movs	r3, #0
 8001a00:	757b      	strb	r3, [r7, #21]
		if(telemetry.deltaToBestMs > 0)
 8001a02:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	dd0c      	ble.n	8001a24 <_ZN8MainPage6UpdateE9Telemetryh+0x958>
		{
			if(oldTelemetry->deltaToBestMs <= 0)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a0e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dc01      	bgt.n	8001a1a <_ZN8MainPage6UpdateE9Telemetryh+0x94e>
				redrawDeltaToBest = true;
 8001a16:	2301      	movs	r3, #1
 8001a18:	757b      	strb	r3, [r7, #21]
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001a1a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001a1e:	f003 f911 	bl	8004c44 <BSP_LCD_SetTextColor>
 8001a22:	e01e      	b.n	8001a62 <_ZN8MainPage6UpdateE9Telemetryh+0x996>
		}
		else if(telemetry.deltaToBestMs < 0)
 8001a24:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da0c      	bge.n	8001a46 <_ZN8MainPage6UpdateE9Telemetryh+0x97a>
		{
			if(oldTelemetry->deltaToBestMs >= 0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a30:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db01      	blt.n	8001a3c <_ZN8MainPage6UpdateE9Telemetryh+0x970>
				redrawDeltaToBest = true;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	757b      	strb	r3, [r7, #21]
			BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001a3c:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001a40:	f003 f900 	bl	8004c44 <BSP_LCD_SetTextColor>
 8001a44:	e00d      	b.n	8001a62 <_ZN8MainPage6UpdateE9Telemetryh+0x996>
		}
		else
		{
			if(oldTelemetry->deltaToBestMs > 0 || oldTelemetry->deltaToBestMs < 0)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a4a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	dc05      	bgt.n	8001a5e <_ZN8MainPage6UpdateE9Telemetryh+0x992>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a56:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da01      	bge.n	8001a62 <_ZN8MainPage6UpdateE9Telemetryh+0x996>
				redrawDeltaToBest = true;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	757b      	strb	r3, [r7, #21]
		}
		snprintf((char*)buffer, 9, "%+4d.%03d", telemetry.deltaToBestSec, telemetry.deltaToBestMs < 0 ? -telemetry.deltaToBestMs : telemetry.deltaToBestMs);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001a68:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	bfb8      	it	lt
 8001a76:	425b      	neglt	r3, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	4a5d      	ldr	r2, [pc, #372]	; (8001bf4 <_ZN8MainPage6UpdateE9Telemetryh+0xb28>)
 8001a80:	2109      	movs	r1, #9
 8001a82:	f009 fcd1 	bl	800b428 <sniprintf>
		if(telemetry.deltaToBestMs < 0)
 8001a86:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da16      	bge.n	8001abc <_ZN8MainPage6UpdateE9Telemetryh+0x9f0>
			for(uint8_t i =0;i<4;i++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	753b      	strb	r3, [r7, #20]
 8001a92:	7d3b      	ldrb	r3, [r7, #20]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d811      	bhi.n	8001abc <_ZN8MainPage6UpdateE9Telemetryh+0x9f0>
				if(buffer[i]=='+')
 8001a98:	7d3b      	ldrb	r3, [r7, #20]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001aa2:	2b2b      	cmp	r3, #43	; 0x2b
 8001aa4:	d106      	bne.n	8001ab4 <_ZN8MainPage6UpdateE9Telemetryh+0x9e8>
				{
					buffer[i] = '-';
 8001aa6:	7d3b      	ldrb	r3, [r7, #20]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	222d      	movs	r2, #45	; 0x2d
 8001aae:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
					break;
 8001ab2:	e003      	b.n	8001abc <_ZN8MainPage6UpdateE9Telemetryh+0x9f0>
			for(uint8_t i =0;i<4;i++)
 8001ab4:	7d3b      	ldrb	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	753b      	strb	r3, [r7, #20]
 8001aba:	e7ea      	b.n	8001a92 <_ZN8MainPage6UpdateE9Telemetryh+0x9c6>
				}
		deltaBest->Draw_Text(buffer, redraw || redrawDeltaToBest);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a18      	ldr	r0, [r3, #32]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001ac6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <_ZN8MainPage6UpdateE9Telemetryh+0xa08>
 8001ace:	7d7b      	ldrb	r3, [r7, #21]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZN8MainPage6UpdateE9Telemetryh+0xa0c>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <_ZN8MainPage6UpdateE9Telemetryh+0xa0e>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7fe fc20 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ae0:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8001ae4:	f003 f8ae 	bl	8004c44 <BSP_LCD_SetTextColor>

		BSP_LCD_SetFont(&FreeSans18pt7b);
 8001ae8:	4843      	ldr	r0, [pc, #268]	; (8001bf8 <_ZN8MainPage6UpdateE9Telemetryh+0xb2c>)
 8001aea:	f003 f8cb 	bl	8004c84 <BSP_LCD_SetFont>
		snprintf((char*)buffer, 9, "%+4d.%03d", telemetry.deltaAheadSec, telemetry.deltaAheadMs < 0 ? -telemetry.deltaAheadMs : telemetry.deltaAheadMs);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f103 005f 	add.w	r0, r3, #95	; 0x5f
 8001af4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8001af8:	461a      	mov	r2, r3
 8001afa:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bfb8      	it	lt
 8001b02:	425b      	neglt	r3, r3
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <_ZN8MainPage6UpdateE9Telemetryh+0xb28>)
 8001b0c:	2109      	movs	r1, #9
 8001b0e:	f009 fc8b 	bl	800b428 <sniprintf>
		if(telemetry.deltaAheadMs < 0)
 8001b12:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da16      	bge.n	8001b48 <_ZN8MainPage6UpdateE9Telemetryh+0xa7c>
			for(uint8_t i =0;i<4;i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	74fb      	strb	r3, [r7, #19]
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d811      	bhi.n	8001b48 <_ZN8MainPage6UpdateE9Telemetryh+0xa7c>
				if(buffer[i]=='+')
 8001b24:	7cfb      	ldrb	r3, [r7, #19]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001b2e:	2b2b      	cmp	r3, #43	; 0x2b
 8001b30:	d106      	bne.n	8001b40 <_ZN8MainPage6UpdateE9Telemetryh+0xa74>
				{
					buffer[i] = '-';
 8001b32:	7cfb      	ldrb	r3, [r7, #19]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	222d      	movs	r2, #45	; 0x2d
 8001b3a:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
					break;
 8001b3e:	e003      	b.n	8001b48 <_ZN8MainPage6UpdateE9Telemetryh+0xa7c>
			for(uint8_t i =0;i<4;i++)
 8001b40:	7cfb      	ldrb	r3, [r7, #19]
 8001b42:	3301      	adds	r3, #1
 8001b44:	74fb      	strb	r3, [r7, #19]
 8001b46:	e7ea      	b.n	8001b1e <_ZN8MainPage6UpdateE9Telemetryh+0xa52>
				}
		deltaAhead->Draw_Text(buffer, redraw || ((lastMode >> 1) & 1));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6898      	ldr	r0, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001b52:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <_ZN8MainPage6UpdateE9Telemetryh+0xa9c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <_ZN8MainPage6UpdateE9Telemetryh+0xaa0>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <_ZN8MainPage6UpdateE9Telemetryh+0xaa2>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f7fe fbd6 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		lastMode &= ~(1 << 1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001b7a:	f023 0302 	bic.w	r3, r3, #2
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	if(curTick - lastEndOfLapTick > 8000)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001b92:	d903      	bls.n	8001b9c <_ZN8MainPage6UpdateE9Telemetryh+0xad0>
		endOfLapTriggered = 0;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	//ERS & FUELBAR
	DrawBar(telemetry.ersBar,  ERSValue, 5, 60, 255, 18);
 8001b9c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001ba0:	b2d9      	uxtb	r1, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001ba8:	2312      	movs	r3, #18
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	23ff      	movs	r3, #255	; 0xff
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	233c      	movs	r3, #60	; 0x3c
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2305      	movs	r3, #5
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f910 	bl	8001ddc <_ZN8MainPage7DrawBarEhhtthh>
	DrawBar(telemetry.fuelBar, FuelValue, 458, 60, 255, 18);
 8001bbc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 205e 	ldrb.w	r2, [r3, #94]	; 0x5e
 8001bc8:	2312      	movs	r3, #18
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	23ff      	movs	r3, #255	; 0xff
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	233c      	movs	r3, #60	; 0x3c
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8ff 	bl	8001ddc <_ZN8MainPage7DrawBarEhhtthh>
}
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001be8:	b004      	add	sp, #16
 8001bea:	4770      	bx	lr
 8001bec:	88888889 	.word	0x88888889
 8001bf0:	0800bc6c 	.word	0x0800bc6c
 8001bf4:	0800bcb8 	.word	0x0800bcb8
 8001bf8:	0800dbe0 	.word	0x0800dbe0

08001bfc <_ZN8MainPageD1Ev>:

MainPage::~MainPage()
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
{
	delete gear;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681c      	ldr	r4, [r3, #0]
 8001c08:	2c00      	cmp	r4, #0
 8001c0a:	d006      	beq.n	8001c1a <_ZN8MainPageD1Ev+0x1e>
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7fe fb55 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001c12:	2118      	movs	r1, #24
 8001c14:	4620      	mov	r0, r4
 8001c16:	f009 fa93 	bl	800b140 <_ZdlPvj>
	delete curLapTime;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685c      	ldr	r4, [r3, #4]
 8001c1e:	2c00      	cmp	r4, #0
 8001c20:	d006      	beq.n	8001c30 <_ZN8MainPageD1Ev+0x34>
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7fe fb4a 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001c28:	2118      	movs	r1, #24
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f009 fa88 	bl	800b140 <_ZdlPvj>
	delete deltaAhead;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689c      	ldr	r4, [r3, #8]
 8001c34:	2c00      	cmp	r4, #0
 8001c36:	d006      	beq.n	8001c46 <_ZN8MainPageD1Ev+0x4a>
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7fe fb3f 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001c3e:	2118      	movs	r1, #24
 8001c40:	4620      	mov	r0, r4
 8001c42:	f009 fa7d 	bl	800b140 <_ZdlPvj>
	delete mix;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68dc      	ldr	r4, [r3, #12]
 8001c4a:	2c00      	cmp	r4, #0
 8001c4c:	d006      	beq.n	8001c5c <_ZN8MainPageD1Ev+0x60>
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7fe fb34 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001c54:	2118      	movs	r1, #24
 8001c56:	4620      	mov	r0, r4
 8001c58:	f009 fa72 	bl	800b140 <_ZdlPvj>
	delete ers;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691c      	ldr	r4, [r3, #16]
 8001c60:	2c00      	cmp	r4, #0
 8001c62:	d006      	beq.n	8001c72 <_ZN8MainPageD1Ev+0x76>
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7fe fb29 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001c6a:	2118      	movs	r1, #24
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f009 fa67 	bl	800b140 <_ZdlPvj>
	delete fuel;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695c      	ldr	r4, [r3, #20]
 8001c76:	2c00      	cmp	r4, #0
 8001c78:	d006      	beq.n	8001c88 <_ZN8MainPageD1Ev+0x8c>
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	f7fe fb1e 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001c80:	2118      	movs	r1, #24
 8001c82:	4620      	mov	r0, r4
 8001c84:	f009 fa5c 	bl	800b140 <_ZdlPvj>
	delete fuelDelta;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699c      	ldr	r4, [r3, #24]
 8001c8c:	2c00      	cmp	r4, #0
 8001c8e:	d006      	beq.n	8001c9e <_ZN8MainPageD1Ev+0xa2>
 8001c90:	4620      	mov	r0, r4
 8001c92:	f7fe fb13 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001c96:	2118      	movs	r1, #24
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f009 fa51 	bl	800b140 <_ZdlPvj>
	delete bestLap;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69dc      	ldr	r4, [r3, #28]
 8001ca2:	2c00      	cmp	r4, #0
 8001ca4:	d006      	beq.n	8001cb4 <_ZN8MainPageD1Ev+0xb8>
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7fe fb08 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001cac:	2118      	movs	r1, #24
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f009 fa46 	bl	800b140 <_ZdlPvj>
	delete deltaBest;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1c      	ldr	r4, [r3, #32]
 8001cb8:	2c00      	cmp	r4, #0
 8001cba:	d006      	beq.n	8001cca <_ZN8MainPageD1Ev+0xce>
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7fe fafd 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001cc2:	2118      	movs	r1, #24
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f009 fa3b 	bl	800b140 <_ZdlPvj>
	delete tireFL;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001cce:	2c00      	cmp	r4, #0
 8001cd0:	d006      	beq.n	8001ce0 <_ZN8MainPageD1Ev+0xe4>
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7fe faf2 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001cd8:	2118      	movs	r1, #24
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f009 fa30 	bl	800b140 <_ZdlPvj>
	delete tireFR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001ce4:	2c00      	cmp	r4, #0
 8001ce6:	d006      	beq.n	8001cf6 <_ZN8MainPageD1Ev+0xfa>
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7fe fae7 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001cee:	2118      	movs	r1, #24
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f009 fa25 	bl	800b140 <_ZdlPvj>
	delete tireRL;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	d006      	beq.n	8001d0c <_ZN8MainPageD1Ev+0x110>
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7fe fadc 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d04:	2118      	movs	r1, #24
 8001d06:	4620      	mov	r0, r4
 8001d08:	f009 fa1a 	bl	800b140 <_ZdlPvj>
	delete tireRR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d006      	beq.n	8001d22 <_ZN8MainPageD1Ev+0x126>
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7fe fad1 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d1a:	2118      	movs	r1, #24
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f009 fa0f 	bl	800b140 <_ZdlPvj>
	delete safetyCar;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8001d26:	2c00      	cmp	r4, #0
 8001d28:	d006      	beq.n	8001d38 <_ZN8MainPageD1Ev+0x13c>
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7fe fac6 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d30:	2118      	movs	r1, #24
 8001d32:	4620      	mov	r0, r4
 8001d34:	f009 fa04 	bl	800b140 <_ZdlPvj>
	delete drsOn;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001d3c:	2c00      	cmp	r4, #0
 8001d3e:	d006      	beq.n	8001d4e <_ZN8MainPageD1Ev+0x152>
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7fe fabb 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d46:	2118      	movs	r1, #24
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f009 f9f9 	bl	800b140 <_ZdlPvj>
	delete mixLabel;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001d52:	2c00      	cmp	r4, #0
 8001d54:	d006      	beq.n	8001d64 <_ZN8MainPageD1Ev+0x168>
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7fe fab0 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d5c:	2118      	movs	r1, #24
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f009 f9ee 	bl	800b140 <_ZdlPvj>
	delete leftLabel;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001d68:	2c00      	cmp	r4, #0
 8001d6a:	d006      	beq.n	8001d7a <_ZN8MainPageD1Ev+0x17e>
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7fe faa5 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d72:	2118      	movs	r1, #24
 8001d74:	4620      	mov	r0, r4
 8001d76:	f009 f9e3 	bl	800b140 <_ZdlPvj>
	delete ersLabel;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001d7e:	2c00      	cmp	r4, #0
 8001d80:	d006      	beq.n	8001d90 <_ZN8MainPageD1Ev+0x194>
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7fe fa9a 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d88:	2118      	movs	r1, #24
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	f009 f9d8 	bl	800b140 <_ZdlPvj>
	delete posLabel;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001d94:	2c00      	cmp	r4, #0
 8001d96:	d006      	beq.n	8001da6 <_ZN8MainPageD1Ev+0x1aa>
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe fa8f 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001d9e:	2118      	movs	r1, #24
 8001da0:	4620      	mov	r0, r4
 8001da2:	f009 f9cd 	bl	800b140 <_ZdlPvj>
	delete fuelLabel;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8001daa:	2c00      	cmp	r4, #0
 8001dac:	d006      	beq.n	8001dbc <_ZN8MainPageD1Ev+0x1c0>
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7fe fa84 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001db4:	2118      	movs	r1, #24
 8001db6:	4620      	mov	r0, r4
 8001db8:	f009 f9c2 	bl	800b140 <_ZdlPvj>
	delete lastLapTime;;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d006      	beq.n	8001dd2 <_ZN8MainPageD1Ev+0x1d6>
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7fe fa79 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8001dca:	2118      	movs	r1, #24
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f009 f9b7 	bl	800b140 <_ZdlPvj>
}
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd90      	pop	{r4, r7, pc}

08001ddc <_ZN8MainPage7DrawBarEhhtthh>:

void MainPage::DrawBar(uint8_t value, uint8_t prevVal, uint16_t X, uint16_t Y, uint8_t Height, uint8_t Widht)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	4608      	mov	r0, r1
 8001de6:	4611      	mov	r1, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	4603      	mov	r3, r0
 8001dec:	70fb      	strb	r3, [r7, #3]
 8001dee:	460b      	mov	r3, r1
 8001df0:	70bb      	strb	r3, [r7, #2]
 8001df2:	4613      	mov	r3, r2
 8001df4:	803b      	strh	r3, [r7, #0]
	if(value == prevVal)
 8001df6:	78fa      	ldrb	r2, [r7, #3]
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d047      	beq.n	8001e8e <_ZN8MainPage7DrawBarEhhtthh+0xb2>
		return;
	if(value > prevVal)
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	78bb      	ldrb	r3, [r7, #2]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d920      	bls.n	8001e48 <_ZN8MainPage7DrawBarEhhtthh+0x6c>
	{
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e06:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001e0a:	f002 ff1b 	bl	8004c44 <BSP_LCD_SetTextColor>
		for(int16_t i = prevVal; i < value;i++)
 8001e0e:	78bb      	ldrb	r3, [r7, #2]
 8001e10:	81fb      	strh	r3, [r7, #14]
 8001e12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	da35      	bge.n	8001e88 <_ZN8MainPage7DrawBarEhhtthh+0xac>
			BSP_LCD_FillRect(X, Height+Y-i, Widht, 1);
 8001e1c:	7f3b      	ldrb	r3, [r7, #28]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	8b3b      	ldrh	r3, [r7, #24]
 8001e22:	4413      	add	r3, r2
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	89fb      	ldrh	r3, [r7, #14]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	b299      	uxth	r1, r3
 8001e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	8838      	ldrh	r0, [r7, #0]
 8001e34:	2301      	movs	r3, #1
 8001e36:	f003 fb1f 	bl	8005478 <BSP_LCD_FillRect>
		for(int16_t i = prevVal; i < value;i++)
 8001e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3301      	adds	r3, #1
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	81fb      	strh	r3, [r7, #14]
 8001e46:	e7e4      	b.n	8001e12 <_ZN8MainPage7DrawBarEhhtthh+0x36>
	}
	else
	{
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f002 fefb 	bl	8004c44 <BSP_LCD_SetTextColor>
		for(int16_t i = prevVal; i >= value;i--)
 8001e4e:	78bb      	ldrb	r3, [r7, #2]
 8001e50:	81bb      	strh	r3, [r7, #12]
 8001e52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	db15      	blt.n	8001e88 <_ZN8MainPage7DrawBarEhhtthh+0xac>
			BSP_LCD_FillRect(X, Height+Y-i, Widht, 1);
 8001e5c:	7f3b      	ldrb	r3, [r7, #28]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	8b3b      	ldrh	r3, [r7, #24]
 8001e62:	4413      	add	r3, r2
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	89bb      	ldrh	r3, [r7, #12]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	b299      	uxth	r1, r3
 8001e6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	8838      	ldrh	r0, [r7, #0]
 8001e74:	2301      	movs	r3, #1
 8001e76:	f003 faff 	bl	8005478 <BSP_LCD_FillRect>
		for(int16_t i = prevVal; i >= value;i--)
 8001e7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	81bb      	strh	r3, [r7, #12]
 8001e86:	e7e4      	b.n	8001e52 <_ZN8MainPage7DrawBarEhhtthh+0x76>
	}
	prevVal = value;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	70bb      	strb	r3, [r7, #2]
 8001e8c:	e000      	b.n	8001e90 <_ZN8MainPage7DrawBarEhhtthh+0xb4>
		return;
 8001e8e:	bf00      	nop
}
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <_ZN10OutLapPageC1Ev>:
#include <OutLapPage.h>

OutLapPage::OutLapPage()
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	6078      	str	r0, [r7, #4]
{
	BSP_LCD_SetFont(&FreeSans24pt7b);
 8001ea0:	489d      	ldr	r0, [pc, #628]	; (8002118 <_ZN10OutLapPageC1Ev+0x280>)
 8001ea2:	f002 feef 	bl	8004c84 <BSP_LCD_SetFont>
	gear = new FlickerFreeText(210, 193, 2,(uint8_t*)"1", 1);
 8001ea6:	2018      	movs	r0, #24
 8001ea8:	f009 f94e 	bl	800b148 <_Znwj>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461c      	mov	r4, r3
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	4b99      	ldr	r3, [pc, #612]	; (800211c <_ZN10OutLapPageC1Ev+0x284>)
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	22c1      	movs	r2, #193	; 0xc1
 8001ebc:	21d2      	movs	r1, #210	; 0xd2
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7fe f980 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	601c      	str	r4, [r3, #0]

	BSP_LCD_SetFont(&FreeSans12pt7b);
 8001ec8:	4895      	ldr	r0, [pc, #596]	; (8002120 <_ZN10OutLapPageC1Ev+0x288>)
 8001eca:	f002 fedb 	bl	8004c84 <BSP_LCD_SetFont>
	mix = new FlickerFreeText(300, 252, 1, (uint8_t*)"1", 1);
 8001ece:	2018      	movs	r0, #24
 8001ed0:	f009 f93a 	bl	800b148 <_Znwj>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461c      	mov	r4, r3
 8001ed8:	2301      	movs	r3, #1
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	4b8f      	ldr	r3, [pc, #572]	; (800211c <_ZN10OutLapPageC1Ev+0x284>)
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	22fc      	movs	r2, #252	; 0xfc
 8001ee4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7fe f96b 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	605c      	str	r4, [r3, #4]
	ers = new FlickerFreeText(300, 280, 1, (uint8_t*)"1", 1);
 8001ef2:	2018      	movs	r0, #24
 8001ef4:	f009 f928 	bl	800b148 <_Znwj>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	461c      	mov	r4, r3
 8001efc:	2301      	movs	r3, #1
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	4b86      	ldr	r3, [pc, #536]	; (800211c <_ZN10OutLapPageC1Ev+0x284>)
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2301      	movs	r3, #1
 8001f06:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001f0a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7fe f958 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	609c      	str	r4, [r3, #8]
	ersBar = new FlickerFreeText(260, 308, 1, (uint8_t*)"100", 3);
 8001f18:	2018      	movs	r0, #24
 8001f1a:	f009 f915 	bl	800b148 <_Znwj>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461c      	mov	r4, r3
 8001f22:	2303      	movs	r3, #3
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	4b7f      	ldr	r3, [pc, #508]	; (8002124 <_ZN10OutLapPageC1Ev+0x28c>)
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f44f 729a 	mov.w	r2, #308	; 0x134
 8001f30:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7fe f945 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60dc      	str	r4, [r3, #12]
	speed = new FlickerFreeText(215, 225, 1, (uint8_t*)"100", 3);
 8001f3e:	2018      	movs	r0, #24
 8001f40:	f009 f902 	bl	800b148 <_Znwj>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461c      	mov	r4, r3
 8001f48:	2303      	movs	r3, #3
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	4b75      	ldr	r3, [pc, #468]	; (8002124 <_ZN10OutLapPageC1Ev+0x28c>)
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2301      	movs	r3, #1
 8001f52:	22e1      	movs	r2, #225	; 0xe1
 8001f54:	21d7      	movs	r1, #215	; 0xd7
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7fe f934 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	611c      	str	r4, [r3, #16]
	engineTemp = new FlickerFreeText(85, 232, 1, (uint8_t*)"1234", 4);
 8001f60:	2018      	movs	r0, #24
 8001f62:	f009 f8f1 	bl	800b148 <_Znwj>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461c      	mov	r4, r3
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	4b6e      	ldr	r3, [pc, #440]	; (8002128 <_ZN10OutLapPageC1Ev+0x290>)
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2301      	movs	r3, #1
 8001f74:	22e8      	movs	r2, #232	; 0xe8
 8001f76:	2155      	movs	r1, #85	; 0x55
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7fe f923 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	63dc      	str	r4, [r3, #60]	; 0x3c
	oilTemp = new FlickerFreeText(350, 232, 1, (uint8_t*)"1234", 4);
 8001f82:	2018      	movs	r0, #24
 8001f84:	f009 f8e0 	bl	800b148 <_Znwj>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461c      	mov	r4, r3
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	4b65      	ldr	r3, [pc, #404]	; (8002128 <_ZN10OutLapPageC1Ev+0x290>)
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2301      	movs	r3, #1
 8001f96:	22e8      	movs	r2, #232	; 0xe8
 8001f98:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f7fe f911 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641c      	str	r4, [r3, #64]	; 0x40

	BSP_LCD_SetFont(&FreeSans18pt7b);
 8001fa6:	4861      	ldr	r0, [pc, #388]	; (800212c <_ZN10OutLapPageC1Ev+0x294>)
 8001fa8:	f002 fe6c 	bl	8004c84 <BSP_LCD_SetFont>
	deltaAhead = new FlickerFreeText(127, 64, 1, (uint8_t*)"+11.11", 6);
 8001fac:	2018      	movs	r0, #24
 8001fae:	f009 f8cb 	bl	800b148 <_Znwj>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	4b5d      	ldr	r3, [pc, #372]	; (8002130 <_ZN10OutLapPageC1Ev+0x298>)
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	217f      	movs	r1, #127	; 0x7f
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7fe f8fd 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	615c      	str	r4, [r3, #20]
	deltaBehind = new FlickerFreeText(242, 64, 1, (uint8_t*)"+11.11", 6);
 8001fce:	2018      	movs	r0, #24
 8001fd0:	f009 f8ba 	bl	800b148 <_Znwj>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	2306      	movs	r3, #6
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	4b54      	ldr	r3, [pc, #336]	; (8002130 <_ZN10OutLapPageC1Ev+0x298>)
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	21f2      	movs	r1, #242	; 0xf2
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	f7fe f8ec 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619c      	str	r4, [r3, #24]
	tireFL = new FlickerFreeText(32, 40, 1, (uint8_t*)"111", 3);
 8001ff0:	2018      	movs	r0, #24
 8001ff2:	f009 f8a9 	bl	800b148 <_Znwj>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <_ZN10OutLapPageC1Ev+0x29c>)
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2301      	movs	r3, #1
 8002004:	2228      	movs	r2, #40	; 0x28
 8002006:	2120      	movs	r1, #32
 8002008:	4620      	mov	r0, r4
 800200a:	f7fe f8db 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	61dc      	str	r4, [r3, #28]
	tireFR = new FlickerFreeText(388, 40, 1, (uint8_t*)"111", 3);
 8002012:	2018      	movs	r0, #24
 8002014:	f009 f898 	bl	800b148 <_Znwj>
 8002018:	4603      	mov	r3, r0
 800201a:	461c      	mov	r4, r3
 800201c:	2303      	movs	r3, #3
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	4b44      	ldr	r3, [pc, #272]	; (8002134 <_ZN10OutLapPageC1Ev+0x29c>)
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2301      	movs	r3, #1
 8002026:	2228      	movs	r2, #40	; 0x28
 8002028:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800202c:	4620      	mov	r0, r4
 800202e:	f7fe f8c9 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	621c      	str	r4, [r3, #32]
	tireRL = new FlickerFreeText(32, 92, 1, (uint8_t*)"111", 3);
 8002036:	2018      	movs	r0, #24
 8002038:	f009 f886 	bl	800b148 <_Znwj>
 800203c:	4603      	mov	r3, r0
 800203e:	461c      	mov	r4, r3
 8002040:	2303      	movs	r3, #3
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <_ZN10OutLapPageC1Ev+0x29c>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2301      	movs	r3, #1
 800204a:	225c      	movs	r2, #92	; 0x5c
 800204c:	2120      	movs	r1, #32
 800204e:	4620      	mov	r0, r4
 8002050:	f7fe f8b8 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	625c      	str	r4, [r3, #36]	; 0x24
	tireRR = new FlickerFreeText(388, 92, 1, (uint8_t*)"111", 3);
 8002058:	2018      	movs	r0, #24
 800205a:	f009 f875 	bl	800b148 <_Znwj>
 800205e:	4603      	mov	r3, r0
 8002060:	461c      	mov	r4, r3
 8002062:	2303      	movs	r3, #3
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <_ZN10OutLapPageC1Ev+0x29c>)
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2301      	movs	r3, #1
 800206c:	225c      	movs	r2, #92	; 0x5c
 800206e:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8002072:	4620      	mov	r0, r4
 8002074:	f7fe f8a6 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629c      	str	r4, [r3, #40]	; 0x28
	brakeFL = new FlickerFreeText(32, 255, 1, (uint8_t*)"1111", 4);
 800207c:	2018      	movs	r0, #24
 800207e:	f009 f863 	bl	800b148 <_Znwj>
 8002082:	4603      	mov	r3, r0
 8002084:	461c      	mov	r4, r3
 8002086:	2304      	movs	r3, #4
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <_ZN10OutLapPageC1Ev+0x2a0>)
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	22ff      	movs	r2, #255	; 0xff
 8002092:	2120      	movs	r1, #32
 8002094:	4620      	mov	r0, r4
 8002096:	f7fe f895 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	62dc      	str	r4, [r3, #44]	; 0x2c
	brakeFR = new FlickerFreeText(378, 255, 1, (uint8_t*)"1111", 4);
 800209e:	2018      	movs	r0, #24
 80020a0:	f009 f852 	bl	800b148 <_Znwj>
 80020a4:	4603      	mov	r3, r0
 80020a6:	461c      	mov	r4, r3
 80020a8:	2304      	movs	r3, #4
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <_ZN10OutLapPageC1Ev+0x2a0>)
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7fe f883 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	631c      	str	r4, [r3, #48]	; 0x30
	brakeRL = new FlickerFreeText(32, 307, 1, (uint8_t*)"1111", 4);
 80020c2:	2018      	movs	r0, #24
 80020c4:	f009 f840 	bl	800b148 <_Znwj>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461c      	mov	r4, r3
 80020cc:	2304      	movs	r3, #4
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <_ZN10OutLapPageC1Ev+0x2a0>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2301      	movs	r3, #1
 80020d6:	f240 1233 	movw	r2, #307	; 0x133
 80020da:	2120      	movs	r1, #32
 80020dc:	4620      	mov	r0, r4
 80020de:	f7fe f871 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	635c      	str	r4, [r3, #52]	; 0x34
	brakeRR = new FlickerFreeText(378, 307, 1, (uint8_t*)"1111", 4);
 80020e6:	2018      	movs	r0, #24
 80020e8:	f009 f82e 	bl	800b148 <_Znwj>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461c      	mov	r4, r3
 80020f0:	2304      	movs	r3, #4
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <_ZN10OutLapPageC1Ev+0x2a0>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2301      	movs	r3, #1
 80020fa:	f240 1233 	movw	r2, #307	; 0x133
 80020fe:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002102:	4620      	mov	r0, r4
 8002104:	f7fe f85e 	bl	80001c4 <_ZN15FlickerFreeTextC1EtthPhh>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	639c      	str	r4, [r3, #56]	; 0x38
}
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop
 8002118:	0800fc0c 	.word	0x0800fc0c
 800211c:	0800bcc4 	.word	0x0800bcc4
 8002120:	0800c89c 	.word	0x0800c89c
 8002124:	0800bcc8 	.word	0x0800bcc8
 8002128:	0800bccc 	.word	0x0800bccc
 800212c:	0800dbe0 	.word	0x0800dbe0
 8002130:	0800bcd4 	.word	0x0800bcd4
 8002134:	0800bcdc 	.word	0x0800bcdc
 8002138:	0800bce0 	.word	0x0800bce0

0800213c <_ZN10OutLapPage6StaticE9Telemetry>:

void OutLapPage::Static(Telemetry telemetry)
{
 800213c:	b084      	sub	sp, #16
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	f107 0014 	add.w	r0, r7, #20
 800214a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800214e:	2000      	movs	r0, #0
 8002150:	f002 fdb0 	bl	8004cb4 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002154:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8002158:	f002 fd74 	bl	8004c44 <BSP_LCD_SetTextColor>

	BSP_LCD_FillRect(0, 125, BSP_LCD_GetXSize(), 75);
 800215c:	f002 fd5a 	bl	8004c14 <BSP_LCD_GetXSize>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	234b      	movs	r3, #75	; 0x4b
 8002166:	217d      	movs	r1, #125	; 0x7d
 8002168:	2000      	movs	r0, #0
 800216a:	f003 f985 	bl	8005478 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800216e:	2000      	movs	r0, #0
 8002170:	f002 fd68 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002174:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8002178:	f002 fd74 	bl	8004c64 <BSP_LCD_SetBackColor>

	BSP_LCD_SetFont(&FreeSans24pt7b);
 800217c:	4812      	ldr	r0, [pc, #72]	; (80021c8 <_ZN10OutLapPage6StaticE9Telemetry+0x8c>)
 800217e:	f002 fd81 	bl	8004c84 <BSP_LCD_SetFont>
	if((telemetry.flags >> 3) & 1)
 8002182:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <_ZN10OutLapPage6StaticE9Telemetry+0x62>
	{
		StaticOut();
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f81c 	bl	80021cc <_ZN10OutLapPage9StaticOutEv>
		lastMode = 0;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800219c:	e006      	b.n	80021ac <_ZN10OutLapPage6StaticE9Telemetry+0x70>

	}
	else
	{
		StaticCool();
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8c0 	bl	8002324 <_ZN10OutLapPage10StaticCoolEv>
		lastMode = 1;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	}

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80021ac:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80021b0:	f002 fd48 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f002 fd55 	bl	8004c64 <BSP_LCD_SetBackColor>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021c4:	b004      	add	sp, #16
 80021c6:	4770      	bx	lr
 80021c8:	0800fc0c 	.word	0x0800fc0c

080021cc <_ZN10OutLapPage9StaticOutEv>:

void OutLapPage::StaticOut()
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetFont(&FreeSans24pt7b);
 80021d4:	4845      	ldr	r0, [pc, #276]	; (80022ec <_ZN10OutLapPage9StaticOutEv+0x120>)
 80021d6:	f002 fd55 	bl	8004c84 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80021da:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80021de:	f002 fd31 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_Draw_Text((uint8_t*)"COOL", 25, 180, 1);
 80021e2:	2301      	movs	r3, #1
 80021e4:	22b4      	movs	r2, #180	; 0xb4
 80021e6:	2119      	movs	r1, #25
 80021e8:	4841      	ldr	r0, [pc, #260]	; (80022f0 <_ZN10OutLapPage9StaticOutEv+0x124>)
 80021ea:	f002 fd81 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"MODE", 315, 180, 1);
 80021ee:	2301      	movs	r3, #1
 80021f0:	22b4      	movs	r2, #180	; 0xb4
 80021f2:	f240 113b 	movw	r1, #315	; 0x13b
 80021f6:	483f      	ldr	r0, [pc, #252]	; (80022f4 <_ZN10OutLapPage9StaticOutEv+0x128>)
 80021f8:	f002 fd7a 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f002 fd21 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_Draw_Text((uint8_t*)"OUT", 50, 180, 1);
 8002202:	2301      	movs	r3, #1
 8002204:	22b4      	movs	r2, #180	; 0xb4
 8002206:	2132      	movs	r1, #50	; 0x32
 8002208:	483b      	ldr	r0, [pc, #236]	; (80022f8 <_ZN10OutLapPage9StaticOutEv+0x12c>)
 800220a:	f002 fd71 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"LAP", 340, 180, 1);
 800220e:	2301      	movs	r3, #1
 8002210:	22b4      	movs	r2, #180	; 0xb4
 8002212:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002216:	4839      	ldr	r0, [pc, #228]	; (80022fc <_ZN10OutLapPage9StaticOutEv+0x130>)
 8002218:	f002 fd6a 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800221c:	2000      	movs	r0, #0
 800221e:	f002 fd11 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-125-75+5);
 8002222:	f002 fcf7 	bl	8004c14 <BSP_LCD_GetXSize>
 8002226:	4603      	mov	r3, r0
 8002228:	461c      	mov	r4, r3
 800222a:	f002 fcff 	bl	8004c2c <BSP_LCD_GetYSize>
 800222e:	4603      	mov	r3, r0
 8002230:	3bc3      	subs	r3, #195	; 0xc3
 8002232:	b29b      	uxth	r3, r3
 8002234:	4622      	mov	r2, r4
 8002236:	2100      	movs	r1, #0
 8002238:	2000      	movs	r0, #0
 800223a:	f003 f91d 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(0, 200, BSP_LCD_GetXSize(), 120);
 800223e:	f002 fce9 	bl	8004c14 <BSP_LCD_GetXSize>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	2378      	movs	r3, #120	; 0x78
 8002248:	21c8      	movs	r1, #200	; 0xc8
 800224a:	2000      	movs	r0, #0
 800224c:	f003 f914 	bl	8005478 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002250:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8002254:	f002 fcf6 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002258:	2000      	movs	r0, #0
 800225a:	f002 fd03 	bl	8004c64 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&FreeSans9pt7b);
 800225e:	4828      	ldr	r0, [pc, #160]	; (8002300 <_ZN10OutLapPage9StaticOutEv+0x134>)
 8002260:	f002 fd10 	bl	8004c84 <BSP_LCD_SetFont>
	BSP_LCD_Draw_Text((uint8_t*)"TYRE TEMPS", 5, 60, 1);
 8002264:	2301      	movs	r3, #1
 8002266:	223c      	movs	r2, #60	; 0x3c
 8002268:	2105      	movs	r1, #5
 800226a:	4826      	ldr	r0, [pc, #152]	; (8002304 <_ZN10OutLapPage9StaticOutEv+0x138>)
 800226c:	f002 fd40 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"TYRE TEMPS", 360, 60, 1);
 8002270:	2301      	movs	r3, #1
 8002272:	223c      	movs	r2, #60	; 0x3c
 8002274:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8002278:	4822      	ldr	r0, [pc, #136]	; (8002304 <_ZN10OutLapPage9StaticOutEv+0x138>)
 800227a:	f002 fd39 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"BRAKE TEMPS", 5, 275, 1);
 800227e:	2301      	movs	r3, #1
 8002280:	f240 1213 	movw	r2, #275	; 0x113
 8002284:	2105      	movs	r1, #5
 8002286:	4820      	ldr	r0, [pc, #128]	; (8002308 <_ZN10OutLapPage9StaticOutEv+0x13c>)
 8002288:	f002 fd32 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"BRAKE TEMPS", 350, 275, 1);
 800228c:	2301      	movs	r3, #1
 800228e:	f240 1213 	movw	r2, #275	; 0x113
 8002292:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002296:	481c      	ldr	r0, [pc, #112]	; (8002308 <_ZN10OutLapPage9StaticOutEv+0x13c>)
 8002298:	f002 fd2a 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_Draw_Text((uint8_t*)"Ahead", 155, 30, 1);
 800229c:	2301      	movs	r3, #1
 800229e:	221e      	movs	r2, #30
 80022a0:	219b      	movs	r1, #155	; 0x9b
 80022a2:	481a      	ldr	r0, [pc, #104]	; (800230c <_ZN10OutLapPage9StaticOutEv+0x140>)
 80022a4:	f002 fd24 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"Behind", 275, 30, 1);
 80022a8:	2301      	movs	r3, #1
 80022aa:	221e      	movs	r2, #30
 80022ac:	f240 1113 	movw	r1, #275	; 0x113
 80022b0:	4817      	ldr	r0, [pc, #92]	; (8002310 <_ZN10OutLapPage9StaticOutEv+0x144>)
 80022b2:	f002 fd1d 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_SetFont(&FreeSans12pt7b);
 80022b6:	4817      	ldr	r0, [pc, #92]	; (8002314 <_ZN10OutLapPage9StaticOutEv+0x148>)
 80022b8:	f002 fce4 	bl	8004c84 <BSP_LCD_SetFont>
	BSP_LCD_Draw_Text((uint8_t*)"MIX MODE", 160, 252, 1);
 80022bc:	2301      	movs	r3, #1
 80022be:	22fc      	movs	r2, #252	; 0xfc
 80022c0:	21a0      	movs	r1, #160	; 0xa0
 80022c2:	4815      	ldr	r0, [pc, #84]	; (8002318 <_ZN10OutLapPage9StaticOutEv+0x14c>)
 80022c4:	f002 fd14 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"ERS MODE", 160, 280, 1);
 80022c8:	2301      	movs	r3, #1
 80022ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 80022ce:	21a0      	movs	r1, #160	; 0xa0
 80022d0:	4812      	ldr	r0, [pc, #72]	; (800231c <_ZN10OutLapPage9StaticOutEv+0x150>)
 80022d2:	f002 fd0d 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"SOC", 190, 308, 1);
 80022d6:	2301      	movs	r3, #1
 80022d8:	f44f 729a 	mov.w	r2, #308	; 0x134
 80022dc:	21be      	movs	r1, #190	; 0xbe
 80022de:	4810      	ldr	r0, [pc, #64]	; (8002320 <_ZN10OutLapPage9StaticOutEv+0x154>)
 80022e0:	f002 fd06 	bl	8004cf0 <BSP_LCD_Draw_Text>
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	0800fc0c 	.word	0x0800fc0c
 80022f0:	0800bce8 	.word	0x0800bce8
 80022f4:	0800bcf0 	.word	0x0800bcf0
 80022f8:	0800bcf8 	.word	0x0800bcf8
 80022fc:	0800bcfc 	.word	0x0800bcfc
 8002300:	08010390 	.word	0x08010390
 8002304:	0800bd00 	.word	0x0800bd00
 8002308:	0800bd0c 	.word	0x0800bd0c
 800230c:	0800bd18 	.word	0x0800bd18
 8002310:	0800bd20 	.word	0x0800bd20
 8002314:	0800c89c 	.word	0x0800c89c
 8002318:	0800bd28 	.word	0x0800bd28
 800231c:	0800bd34 	.word	0x0800bd34
 8002320:	0800bd40 	.word	0x0800bd40

08002324 <_ZN10OutLapPage10StaticCoolEv>:

void OutLapPage::StaticCool()
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetFont(&FreeSans24pt7b);
 800232c:	483e      	ldr	r0, [pc, #248]	; (8002428 <_ZN10OutLapPage10StaticCoolEv+0x104>)
 800232e:	f002 fca9 	bl	8004c84 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002332:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8002336:	f002 fc85 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_Draw_Text((uint8_t*)"OUT", 50, 180, 1);
 800233a:	2301      	movs	r3, #1
 800233c:	22b4      	movs	r2, #180	; 0xb4
 800233e:	2132      	movs	r1, #50	; 0x32
 8002340:	483a      	ldr	r0, [pc, #232]	; (800242c <_ZN10OutLapPage10StaticCoolEv+0x108>)
 8002342:	f002 fcd5 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"LAP", 340, 180, 1);
 8002346:	2301      	movs	r3, #1
 8002348:	22b4      	movs	r2, #180	; 0xb4
 800234a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800234e:	4838      	ldr	r0, [pc, #224]	; (8002430 <_ZN10OutLapPage10StaticCoolEv+0x10c>)
 8002350:	f002 fcce 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002354:	2000      	movs	r0, #0
 8002356:	f002 fc75 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_Draw_Text((uint8_t*)"COOL", 25, 180, 1);
 800235a:	2301      	movs	r3, #1
 800235c:	22b4      	movs	r2, #180	; 0xb4
 800235e:	2119      	movs	r1, #25
 8002360:	4834      	ldr	r0, [pc, #208]	; (8002434 <_ZN10OutLapPage10StaticCoolEv+0x110>)
 8002362:	f002 fcc5 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"MODE", 315, 180, 1);
 8002366:	2301      	movs	r3, #1
 8002368:	22b4      	movs	r2, #180	; 0xb4
 800236a:	f240 113b 	movw	r1, #315	; 0x13b
 800236e:	4832      	ldr	r0, [pc, #200]	; (8002438 <_ZN10OutLapPage10StaticCoolEv+0x114>)
 8002370:	f002 fcbe 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_SetTextColor(RC(0x06DF));
 8002374:	f240 60df 	movw	r0, #1759	; 0x6df
 8002378:	f002 fc64 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize()-125-75+5);
 800237c:	f002 fc4a 	bl	8004c14 <BSP_LCD_GetXSize>
 8002380:	4603      	mov	r3, r0
 8002382:	461c      	mov	r4, r3
 8002384:	f002 fc52 	bl	8004c2c <BSP_LCD_GetYSize>
 8002388:	4603      	mov	r3, r0
 800238a:	3bc3      	subs	r3, #195	; 0xc3
 800238c:	b29b      	uxth	r3, r3
 800238e:	4622      	mov	r2, r4
 8002390:	2100      	movs	r1, #0
 8002392:	2000      	movs	r0, #0
 8002394:	f003 f870 	bl	8005478 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(0, 200, BSP_LCD_GetXSize(), 120);
 8002398:	f002 fc3c 	bl	8004c14 <BSP_LCD_GetXSize>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	2378      	movs	r3, #120	; 0x78
 80023a2:	21c8      	movs	r1, #200	; 0xc8
 80023a4:	2000      	movs	r0, #0
 80023a6:	f003 f867 	bl	8005478 <BSP_LCD_FillRect>

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f002 fc4a 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(RC(0x06DF));
 80023b0:	f240 60df 	movw	r0, #1759	; 0x6df
 80023b4:	f002 fc56 	bl	8004c64 <BSP_LCD_SetBackColor>

	BSP_LCD_SetFont(&FreeSans9pt7b);
 80023b8:	4820      	ldr	r0, [pc, #128]	; (800243c <_ZN10OutLapPage10StaticCoolEv+0x118>)
 80023ba:	f002 fc63 	bl	8004c84 <BSP_LCD_SetFont>
	BSP_LCD_Draw_Text((uint8_t*)"Ahead", 155, 30, 1);
 80023be:	2301      	movs	r3, #1
 80023c0:	221e      	movs	r2, #30
 80023c2:	219b      	movs	r1, #155	; 0x9b
 80023c4:	481e      	ldr	r0, [pc, #120]	; (8002440 <_ZN10OutLapPage10StaticCoolEv+0x11c>)
 80023c6:	f002 fc93 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"Behind", 275, 30, 1);
 80023ca:	2301      	movs	r3, #1
 80023cc:	221e      	movs	r2, #30
 80023ce:	f240 1113 	movw	r1, #275	; 0x113
 80023d2:	481c      	ldr	r0, [pc, #112]	; (8002444 <_ZN10OutLapPage10StaticCoolEv+0x120>)
 80023d4:	f002 fc8c 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_SetFont(&FreeSans12pt7b);
 80023d8:	481b      	ldr	r0, [pc, #108]	; (8002448 <_ZN10OutLapPage10StaticCoolEv+0x124>)
 80023da:	f002 fc53 	bl	8004c84 <BSP_LCD_SetFont>
	BSP_LCD_Draw_Text((uint8_t*)"MIX MODE", 160, 252, 1);
 80023de:	2301      	movs	r3, #1
 80023e0:	22fc      	movs	r2, #252	; 0xfc
 80023e2:	21a0      	movs	r1, #160	; 0xa0
 80023e4:	4819      	ldr	r0, [pc, #100]	; (800244c <_ZN10OutLapPage10StaticCoolEv+0x128>)
 80023e6:	f002 fc83 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"ERS MODE", 160, 280, 1);
 80023ea:	2301      	movs	r3, #1
 80023ec:	f44f 728c 	mov.w	r2, #280	; 0x118
 80023f0:	21a0      	movs	r1, #160	; 0xa0
 80023f2:	4817      	ldr	r0, [pc, #92]	; (8002450 <_ZN10OutLapPage10StaticCoolEv+0x12c>)
 80023f4:	f002 fc7c 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"SOC", 190, 308, 1);
 80023f8:	2301      	movs	r3, #1
 80023fa:	f44f 729a 	mov.w	r2, #308	; 0x134
 80023fe:	21be      	movs	r1, #190	; 0xbe
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <_ZN10OutLapPage10StaticCoolEv+0x130>)
 8002402:	f002 fc75 	bl	8004cf0 <BSP_LCD_Draw_Text>

	BSP_LCD_Draw_Text((uint8_t*)"ENG T", 10, 232, 1);
 8002406:	2301      	movs	r3, #1
 8002408:	22e8      	movs	r2, #232	; 0xe8
 800240a:	210a      	movs	r1, #10
 800240c:	4812      	ldr	r0, [pc, #72]	; (8002458 <_ZN10OutLapPage10StaticCoolEv+0x134>)
 800240e:	f002 fc6f 	bl	8004cf0 <BSP_LCD_Draw_Text>
	BSP_LCD_Draw_Text((uint8_t*)"OIL T", 410, 232, 1);
 8002412:	2301      	movs	r3, #1
 8002414:	22e8      	movs	r2, #232	; 0xe8
 8002416:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800241a:	4810      	ldr	r0, [pc, #64]	; (800245c <_ZN10OutLapPage10StaticCoolEv+0x138>)
 800241c:	f002 fc68 	bl	8004cf0 <BSP_LCD_Draw_Text>
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}
 8002428:	0800fc0c 	.word	0x0800fc0c
 800242c:	0800bcf8 	.word	0x0800bcf8
 8002430:	0800bcfc 	.word	0x0800bcfc
 8002434:	0800bce8 	.word	0x0800bce8
 8002438:	0800bcf0 	.word	0x0800bcf0
 800243c:	08010390 	.word	0x08010390
 8002440:	0800bd18 	.word	0x0800bd18
 8002444:	0800bd20 	.word	0x0800bd20
 8002448:	0800c89c 	.word	0x0800c89c
 800244c:	0800bd28 	.word	0x0800bd28
 8002450:	0800bd34 	.word	0x0800bd34
 8002454:	0800bd40 	.word	0x0800bd40
 8002458:	0800bd44 	.word	0x0800bd44
 800245c:	0800bd4c 	.word	0x0800bd4c

08002460 <_ZN10OutLapPage6UpdateE9Telemetryh>:

void OutLapPage::Update(Telemetry telemetry, uint8_t redraw)
{
 8002460:	b084      	sub	sp, #16
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af02      	add	r7, sp, #8
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	f107 001c 	add.w	r0, r7, #28
 800246e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002472:	2000      	movs	r0, #0
 8002474:	f002 fbe6 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002478:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 800247c:	f002 fbf2 	bl	8004c64 <BSP_LCD_SetBackColor>
	//Gear
	BSP_LCD_SetFont(&FreeSans24pt7b);
 8002480:	48c0      	ldr	r0, [pc, #768]	; (8002784 <_ZN10OutLapPage6UpdateE9Telemetryh+0x324>)
 8002482:	f002 fbff 	bl	8004c84 <BSP_LCD_SetFont>
	if(telemetry.gear == -1)
 8002486:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d107      	bne.n	80024a0 <_ZN10OutLapPage6UpdateE9Telemetryh+0x40>
		snprintf((char*)buffer, 2, "R");
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3344      	adds	r3, #68	; 0x44
 8002494:	4abc      	ldr	r2, [pc, #752]	; (8002788 <_ZN10OutLapPage6UpdateE9Telemetryh+0x328>)
 8002496:	2102      	movs	r1, #2
 8002498:	4618      	mov	r0, r3
 800249a:	f008 ffc5 	bl	800b428 <sniprintf>
 800249e:	e014      	b.n	80024ca <_ZN10OutLapPage6UpdateE9Telemetryh+0x6a>
	else if(telemetry.gear == 0)
 80024a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x58>
		snprintf((char*)buffer, 2, "N");
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3344      	adds	r3, #68	; 0x44
 80024ac:	4ab7      	ldr	r2, [pc, #732]	; (800278c <_ZN10OutLapPage6UpdateE9Telemetryh+0x32c>)
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f008 ffb9 	bl	800b428 <sniprintf>
 80024b6:	e008      	b.n	80024ca <_ZN10OutLapPage6UpdateE9Telemetryh+0x6a>
	else
		snprintf((char*)buffer, 2, "%d", telemetry.gear);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80024be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80024c2:	4ab3      	ldr	r2, [pc, #716]	; (8002790 <_ZN10OutLapPage6UpdateE9Telemetryh+0x330>)
 80024c4:	2102      	movs	r1, #2
 80024c6:	f008 ffaf 	bl	800b428 <sniprintf>
	gear->Draw_Text(buffer, redraw);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3344      	adds	r3, #68	; 0x44
 80024d2:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80024d6:	4619      	mov	r1, r3
 80024d8:	f7fd ff22 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

	if((telemetry.flags >> 3) & 1)
 80024dc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8235 	beq.w	8002954 <_ZN10OutLapPage6UpdateE9Telemetryh+0x4f4>
	{
		if(lastMode != 0)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <_ZN10OutLapPage6UpdateE9Telemetryh+0x9a>
		{
			StaticOut();
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fe69 	bl	80021cc <_ZN10OutLapPage9StaticOutEv>
		}
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80024fa:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 80024fe:	f002 fba1 	bl	8004c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002502:	2000      	movs	r0, #0
 8002504:	f002 fbae 	bl	8004c64 <BSP_LCD_SetBackColor>
		BSP_LCD_SetFont(&FreeSans12pt7b);
 8002508:	48a2      	ldr	r0, [pc, #648]	; (8002794 <_ZN10OutLapPage6UpdateE9Telemetryh+0x334>)
 800250a:	f002 fbbb 	bl	8004c84 <BSP_LCD_SetFont>
		snprintf((char*)buffer, 4, "%3d", telemetry.speed);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002514:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002518:	4a9f      	ldr	r2, [pc, #636]	; (8002798 <_ZN10OutLapPage6UpdateE9Telemetryh+0x338>)
 800251a:	2104      	movs	r1, #4
 800251c:	f008 ff84 	bl	800b428 <sniprintf>
		speed->Draw_Text(buffer, redraw || (lastMode != 0));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6918      	ldr	r0, [r3, #16]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800252a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800252e:	2b00      	cmp	r3, #0
 8002530:	d104      	bne.n	800253c <_ZN10OutLapPage6UpdateE9Telemetryh+0xdc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <_ZN10OutLapPage6UpdateE9Telemetryh+0xe0>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <_ZN10OutLapPage6UpdateE9Telemetryh+0xe2>
 8002540:	2300      	movs	r3, #0
 8002542:	461a      	mov	r2, r3
 8002544:	f7fd feec 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 2, "%1d", telemetry.mix);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800254e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8002552:	4a92      	ldr	r2, [pc, #584]	; (800279c <_ZN10OutLapPage6UpdateE9Telemetryh+0x33c>)
 8002554:	2102      	movs	r1, #2
 8002556:	f008 ff67 	bl	800b428 <sniprintf>
		mix->Draw_Text(buffer, redraw || (lastMode != 0));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6858      	ldr	r0, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002564:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <_ZN10OutLapPage6UpdateE9Telemetryh+0x116>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <_ZN10OutLapPage6UpdateE9Telemetryh+0x11a>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <_ZN10OutLapPage6UpdateE9Telemetryh+0x11c>
 800257a:	2300      	movs	r3, #0
 800257c:	461a      	mov	r2, r3
 800257e:	f7fd fecf 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 2, "%1d", telemetry.ers);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002588:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800258c:	4a83      	ldr	r2, [pc, #524]	; (800279c <_ZN10OutLapPage6UpdateE9Telemetryh+0x33c>)
 800258e:	2102      	movs	r1, #2
 8002590:	f008 ff4a 	bl	800b428 <sniprintf>
		ers->Draw_Text(buffer, redraw || (lastMode != 0));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6898      	ldr	r0, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800259e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d104      	bne.n	80025b0 <_ZN10OutLapPage6UpdateE9Telemetryh+0x150>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x154>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x156>
 80025b4:	2300      	movs	r3, #0
 80025b6:	461a      	mov	r2, r3
 80025b8:	f7fd feb2 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 2, "%1d", telemetry.ers);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80025c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80025c6:	4a75      	ldr	r2, [pc, #468]	; (800279c <_ZN10OutLapPage6UpdateE9Telemetryh+0x33c>)
 80025c8:	2102      	movs	r1, #2
 80025ca:	f008 ff2d 	bl	800b428 <sniprintf>
		ers->Draw_Text(buffer, redraw || (lastMode != 0));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6898      	ldr	r0, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80025d8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <_ZN10OutLapPage6UpdateE9Telemetryh+0x18a>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <_ZN10OutLapPage6UpdateE9Telemetryh+0x18e>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <_ZN10OutLapPage6UpdateE9Telemetryh+0x190>
 80025ee:	2300      	movs	r3, #0
 80025f0:	461a      	mov	r2, r3
 80025f2:	f7fd fe95 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 4, "%3d", telemetry.ersBar*100/255);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80025fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002600:	461a      	mov	r2, r3
 8002602:	2364      	movs	r3, #100	; 0x64
 8002604:	fb03 f302 	mul.w	r3, r3, r2
 8002608:	4a65      	ldr	r2, [pc, #404]	; (80027a0 <_ZN10OutLapPage6UpdateE9Telemetryh+0x340>)
 800260a:	fb82 1203 	smull	r1, r2, r2, r3
 800260e:	441a      	add	r2, r3
 8002610:	11d2      	asrs	r2, r2, #7
 8002612:	17db      	asrs	r3, r3, #31
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	4a60      	ldr	r2, [pc, #384]	; (8002798 <_ZN10OutLapPage6UpdateE9Telemetryh+0x338>)
 8002618:	2104      	movs	r1, #4
 800261a:	f008 ff05 	bl	800b428 <sniprintf>
		ersBar->Draw_Text(buffer, redraw || (lastMode != 0));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68d8      	ldr	r0, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002628:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <_ZN10OutLapPage6UpdateE9Telemetryh+0x1da>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_ZN10OutLapPage6UpdateE9Telemetryh+0x1de>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <_ZN10OutLapPage6UpdateE9Telemetryh+0x1e0>
 800263e:	2300      	movs	r3, #0
 8002640:	461a      	mov	r2, r3
 8002642:	f7fd fe6d 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		BSP_LCD_SetFont(&FreeSans18pt7b);
 8002646:	4857      	ldr	r0, [pc, #348]	; (80027a4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x344>)
 8002648:	f002 fb1c 	bl	8004c84 <BSP_LCD_SetFont>
		snprintf((char*)buffer, 7, "%+03d.%02d", telemetry.deltaAheadSec, telemetry.deltaAheadMs < 0 ? -telemetry.deltaAheadMs : telemetry.deltaAheadMs);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002652:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8002656:	461a      	mov	r2, r3
 8002658:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800265c:	2b00      	cmp	r3, #0
 800265e:	bfb8      	it	lt
 8002660:	425b      	neglt	r3, r3
 8002662:	b29b      	uxth	r3, r3
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	4a4f      	ldr	r2, [pc, #316]	; (80027a8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x348>)
 800266a:	2107      	movs	r1, #7
 800266c:	f008 fedc 	bl	800b428 <sniprintf>
		if(telemetry.deltaAheadMs < 0)
 8002670:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002674:	2b00      	cmp	r3, #0
 8002676:	da16      	bge.n	80026a6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x246>
			for(uint8_t i =0;i<3;i++)
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d811      	bhi.n	80026a6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x246>
				if(buffer[i]=='+')
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800268c:	2b2b      	cmp	r3, #43	; 0x2b
 800268e:	d106      	bne.n	800269e <_ZN10OutLapPage6UpdateE9Telemetryh+0x23e>
				{
					buffer[i] = '-';
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	222d      	movs	r2, #45	; 0x2d
 8002698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					break;
 800269c:	e003      	b.n	80026a6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x246>
			for(uint8_t i =0;i<3;i++)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	3301      	adds	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e7ea      	b.n	800267c <_ZN10OutLapPage6UpdateE9Telemetryh+0x21c>
				}
		deltaAhead->Draw_Text(buffer, redraw || (lastMode != 0));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6958      	ldr	r0, [r3, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80026b0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d104      	bne.n	80026c2 <_ZN10OutLapPage6UpdateE9Telemetryh+0x262>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x266>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x268>
 80026c6:	2300      	movs	r3, #0
 80026c8:	461a      	mov	r2, r3
 80026ca:	f7fd fe29 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 7, "%+03d.%02d", telemetry.deltaBehindSec, telemetry.deltaBehindMs < 0 ? -telemetry.deltaBehindMs : telemetry.deltaBehindMs);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80026d4:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80026d8:	461a      	mov	r2, r3
 80026da:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bfb8      	it	lt
 80026e2:	425b      	neglt	r3, r3
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x348>)
 80026ec:	2107      	movs	r1, #7
 80026ee:	f008 fe9b 	bl	800b428 <sniprintf>
		if(telemetry.deltaBehindMs < 0)
 80026f2:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	da16      	bge.n	8002728 <_ZN10OutLapPage6UpdateE9Telemetryh+0x2c8>
			for(uint8_t i =0;i<3;i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	73bb      	strb	r3, [r7, #14]
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d811      	bhi.n	8002728 <_ZN10OutLapPage6UpdateE9Telemetryh+0x2c8>
				if(buffer[i]=='+')
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800270e:	2b2b      	cmp	r3, #43	; 0x2b
 8002710:	d106      	bne.n	8002720 <_ZN10OutLapPage6UpdateE9Telemetryh+0x2c0>
				{
					buffer[i] = '-';
 8002712:	7bbb      	ldrb	r3, [r7, #14]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	222d      	movs	r2, #45	; 0x2d
 800271a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					break;
 800271e:	e003      	b.n	8002728 <_ZN10OutLapPage6UpdateE9Telemetryh+0x2c8>
			for(uint8_t i =0;i<3;i++)
 8002720:	7bbb      	ldrb	r3, [r7, #14]
 8002722:	3301      	adds	r3, #1
 8002724:	73bb      	strb	r3, [r7, #14]
 8002726:	e7ea      	b.n	80026fe <_ZN10OutLapPage6UpdateE9Telemetryh+0x29e>
				}
		deltaBehind->Draw_Text(buffer, redraw || (lastMode != 0));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6998      	ldr	r0, [r3, #24]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002732:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002736:	2b00      	cmp	r3, #0
 8002738:	d104      	bne.n	8002744 <_ZN10OutLapPage6UpdateE9Telemetryh+0x2e4>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <_ZN10OutLapPage6UpdateE9Telemetryh+0x2e8>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <_ZN10OutLapPage6UpdateE9Telemetryh+0x2ea>
 8002748:	2300      	movs	r3, #0
 800274a:	461a      	mov	r2, r3
 800274c:	f7fd fde8 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 4, "%3d", telemetry.tireFL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002756:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800275a:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <_ZN10OutLapPage6UpdateE9Telemetryh+0x338>)
 800275c:	2104      	movs	r1, #4
 800275e:	f008 fe63 	bl	800b428 <sniprintf>
		tireFL->Draw_Text(buffer, redraw || (lastMode != 0));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69d8      	ldr	r0, [r3, #28]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800276c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <_ZN10OutLapPage6UpdateE9Telemetryh+0x31e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <_ZN10OutLapPage6UpdateE9Telemetryh+0x34c>
 800277e:	2301      	movs	r3, #1
 8002780:	e015      	b.n	80027ae <_ZN10OutLapPage6UpdateE9Telemetryh+0x34e>
 8002782:	bf00      	nop
 8002784:	0800fc0c 	.word	0x0800fc0c
 8002788:	0800bd54 	.word	0x0800bd54
 800278c:	0800bd58 	.word	0x0800bd58
 8002790:	0800bd5c 	.word	0x0800bd5c
 8002794:	0800c89c 	.word	0x0800c89c
 8002798:	0800bd60 	.word	0x0800bd60
 800279c:	0800bd64 	.word	0x0800bd64
 80027a0:	80808081 	.word	0x80808081
 80027a4:	0800dbe0 	.word	0x0800dbe0
 80027a8:	0800bd68 	.word	0x0800bd68
 80027ac:	2300      	movs	r3, #0
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7fd fdb6 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d", telemetry.tireFR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80027ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80027be:	4aba      	ldr	r2, [pc, #744]	; (8002aa8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x648>)
 80027c0:	2104      	movs	r1, #4
 80027c2:	f008 fe31 	bl	800b428 <sniprintf>
		tireFR->Draw_Text(buffer, redraw || (lastMode != 0));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a18      	ldr	r0, [r3, #32]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80027d0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <_ZN10OutLapPage6UpdateE9Telemetryh+0x382>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x386>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x388>
 80027e6:	2300      	movs	r3, #0
 80027e8:	461a      	mov	r2, r3
 80027ea:	f7fd fd99 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d", telemetry.tireRL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80027f4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80027f8:	4aab      	ldr	r2, [pc, #684]	; (8002aa8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x648>)
 80027fa:	2104      	movs	r1, #4
 80027fc:	f008 fe14 	bl	800b428 <sniprintf>
		tireRL->Draw_Text(buffer, redraw || (lastMode != 0));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800280a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <_ZN10OutLapPage6UpdateE9Telemetryh+0x3bc>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <_ZN10OutLapPage6UpdateE9Telemetryh+0x3c0>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <_ZN10OutLapPage6UpdateE9Telemetryh+0x3c2>
 8002820:	2300      	movs	r3, #0
 8002822:	461a      	mov	r2, r3
 8002824:	f7fd fd7c 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 4, "%3d", telemetry.tireRR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800282e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002832:	4a9d      	ldr	r2, [pc, #628]	; (8002aa8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x648>)
 8002834:	2104      	movs	r1, #4
 8002836:	f008 fdf7 	bl	800b428 <sniprintf>
		tireRR->Draw_Text(buffer, redraw || (lastMode != 0));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002844:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <_ZN10OutLapPage6UpdateE9Telemetryh+0x3f6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <_ZN10OutLapPage6UpdateE9Telemetryh+0x3fa>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <_ZN10OutLapPage6UpdateE9Telemetryh+0x3fc>
 800285a:	2300      	movs	r3, #0
 800285c:	461a      	mov	r2, r3
 800285e:	f7fd fd5f 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 5, "%4d", telemetry.brakeFL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002868:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800286c:	4a8f      	ldr	r2, [pc, #572]	; (8002aac <_ZN10OutLapPage6UpdateE9Telemetryh+0x64c>)
 800286e:	2105      	movs	r1, #5
 8002870:	f008 fdda 	bl	800b428 <sniprintf>
		brakeFL->Draw_Text(buffer, redraw || (lastMode != 0));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800287e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <_ZN10OutLapPage6UpdateE9Telemetryh+0x430>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <_ZN10OutLapPage6UpdateE9Telemetryh+0x434>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <_ZN10OutLapPage6UpdateE9Telemetryh+0x436>
 8002894:	2300      	movs	r3, #0
 8002896:	461a      	mov	r2, r3
 8002898:	f7fd fd42 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 5, "%4d", telemetry.brakeFR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80028a2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80028a6:	4a81      	ldr	r2, [pc, #516]	; (8002aac <_ZN10OutLapPage6UpdateE9Telemetryh+0x64c>)
 80028a8:	2105      	movs	r1, #5
 80028aa:	f008 fdbd 	bl	800b428 <sniprintf>
		brakeFR->Draw_Text(buffer, redraw || (lastMode != 0));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80028b8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <_ZN10OutLapPage6UpdateE9Telemetryh+0x46a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <_ZN10OutLapPage6UpdateE9Telemetryh+0x46e>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <_ZN10OutLapPage6UpdateE9Telemetryh+0x470>
 80028ce:	2300      	movs	r3, #0
 80028d0:	461a      	mov	r2, r3
 80028d2:	f7fd fd25 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 5, "%4d", telemetry.brakeRL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80028dc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 80028e0:	4a72      	ldr	r2, [pc, #456]	; (8002aac <_ZN10OutLapPage6UpdateE9Telemetryh+0x64c>)
 80028e2:	2105      	movs	r1, #5
 80028e4:	f008 fda0 	bl	800b428 <sniprintf>
		brakeRL->Draw_Text(buffer, redraw || (lastMode != 0));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80028f2:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d104      	bne.n	8002904 <_ZN10OutLapPage6UpdateE9Telemetryh+0x4a4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <_ZN10OutLapPage6UpdateE9Telemetryh+0x4a8>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <_ZN10OutLapPage6UpdateE9Telemetryh+0x4aa>
 8002908:	2300      	movs	r3, #0
 800290a:	461a      	mov	r2, r3
 800290c:	f7fd fd08 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 5, "%4d", telemetry.brakeRR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002916:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800291a:	4a64      	ldr	r2, [pc, #400]	; (8002aac <_ZN10OutLapPage6UpdateE9Telemetryh+0x64c>)
 800291c:	2105      	movs	r1, #5
 800291e:	f008 fd83 	bl	800b428 <sniprintf>
		brakeRR->Draw_Text(buffer, redraw || (lastMode != 0));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800292c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <_ZN10OutLapPage6UpdateE9Telemetryh+0x4de>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <_ZN10OutLapPage6UpdateE9Telemetryh+0x4e2>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <_ZN10OutLapPage6UpdateE9Telemetryh+0x4e4>
 8002942:	2300      	movs	r3, #0
 8002944:	461a      	mov	r2, r3
 8002946:	f7fd fceb 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		lastMode = 0;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8002952:	e17c      	b.n	8002c4e <_ZN10OutLapPage6UpdateE9Telemetryh+0x7ee>
	}
	else
	{
		if(lastMode != 1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800295a:	2b01      	cmp	r3, #1
 800295c:	d002      	beq.n	8002964 <_ZN10OutLapPage6UpdateE9Telemetryh+0x504>
		{
			StaticCool();
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fce0 	bl	8002324 <_ZN10OutLapPage10StaticCoolEv>
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002964:	2000      	movs	r0, #0
 8002966:	f002 f96d 	bl	8004c44 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(RC(0x06DF));
 800296a:	f240 60df 	movw	r0, #1759	; 0x6df
 800296e:	f002 f979 	bl	8004c64 <BSP_LCD_SetBackColor>
		BSP_LCD_SetFont(&FreeSans12pt7b);
 8002972:	484f      	ldr	r0, [pc, #316]	; (8002ab0 <_ZN10OutLapPage6UpdateE9Telemetryh+0x650>)
 8002974:	f002 f986 	bl	8004c84 <BSP_LCD_SetFont>
		snprintf((char*)buffer, 4, "%3d", telemetry.speed);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800297e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002982:	4a49      	ldr	r2, [pc, #292]	; (8002aa8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x648>)
 8002984:	2104      	movs	r1, #4
 8002986:	f008 fd4f 	bl	800b428 <sniprintf>
		speed->Draw_Text(buffer, redraw || (lastMode != 1));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6918      	ldr	r0, [r3, #16]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002994:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002998:	2b00      	cmp	r3, #0
 800299a:	d104      	bne.n	80029a6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x546>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <_ZN10OutLapPage6UpdateE9Telemetryh+0x54a>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <_ZN10OutLapPage6UpdateE9Telemetryh+0x54c>
 80029aa:	2300      	movs	r3, #0
 80029ac:	461a      	mov	r2, r3
 80029ae:	f7fd fcb7 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 2, "%1d", telemetry.mix);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80029b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80029bc:	4a3d      	ldr	r2, [pc, #244]	; (8002ab4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x654>)
 80029be:	2102      	movs	r1, #2
 80029c0:	f008 fd32 	bl	800b428 <sniprintf>
		mix->Draw_Text(buffer, redraw || (lastMode != 1));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6858      	ldr	r0, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f103 0144 	add.w	r1, r3, #68	; 0x44
 80029ce:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <_ZN10OutLapPage6UpdateE9Telemetryh+0x580>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x584>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <_ZN10OutLapPage6UpdateE9Telemetryh+0x586>
 80029e4:	2300      	movs	r3, #0
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7fd fc9a 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 2, "%1d", telemetry.ers);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80029f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80029f6:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x654>)
 80029f8:	2102      	movs	r1, #2
 80029fa:	f008 fd15 	bl	800b428 <sniprintf>
		ers->Draw_Text(buffer, redraw || (lastMode != 1));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6898      	ldr	r0, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002a08:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <_ZN10OutLapPage6UpdateE9Telemetryh+0x5ba>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d001      	beq.n	8002a1e <_ZN10OutLapPage6UpdateE9Telemetryh+0x5be>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <_ZN10OutLapPage6UpdateE9Telemetryh+0x5c0>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	461a      	mov	r2, r3
 8002a22:	f7fd fc7d 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 2, "%1d", telemetry.ers);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002a2c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x654>)
 8002a32:	2102      	movs	r1, #2
 8002a34:	f008 fcf8 	bl	800b428 <sniprintf>
		ers->Draw_Text(buffer, redraw || (lastMode != 1));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6898      	ldr	r0, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002a42:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d104      	bne.n	8002a54 <_ZN10OutLapPage6UpdateE9Telemetryh+0x5f4>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d001      	beq.n	8002a58 <_ZN10OutLapPage6UpdateE9Telemetryh+0x5f8>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <_ZN10OutLapPage6UpdateE9Telemetryh+0x5fa>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f7fd fc60 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 4, "%3d", telemetry.ersBar*100/255);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002a66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2364      	movs	r3, #100	; 0x64
 8002a6e:	fb03 f302 	mul.w	r3, r3, r2
 8002a72:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x658>)
 8002a74:	fb82 1203 	smull	r1, r2, r2, r3
 8002a78:	441a      	add	r2, r3
 8002a7a:	11d2      	asrs	r2, r2, #7
 8002a7c:	17db      	asrs	r3, r3, #31
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x648>)
 8002a82:	2104      	movs	r1, #4
 8002a84:	f008 fcd0 	bl	800b428 <sniprintf>
		ersBar->Draw_Text(buffer, redraw || (lastMode != 1));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68d8      	ldr	r0, [r3, #12]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002a92:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x644>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00b      	beq.n	8002abc <_ZN10OutLapPage6UpdateE9Telemetryh+0x65c>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e00a      	b.n	8002abe <_ZN10OutLapPage6UpdateE9Telemetryh+0x65e>
 8002aa8:	0800bd60 	.word	0x0800bd60
 8002aac:	0800bd74 	.word	0x0800bd74
 8002ab0:	0800c89c 	.word	0x0800c89c
 8002ab4:	0800bd64 	.word	0x0800bd64
 8002ab8:	80808081 	.word	0x80808081
 8002abc:	2300      	movs	r3, #0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f7fd fc2e 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 5, "%4d", telemetry.engineTemp);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002aca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002ace:	4a67      	ldr	r2, [pc, #412]	; (8002c6c <_ZN10OutLapPage6UpdateE9Telemetryh+0x80c>)
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	f008 fca9 	bl	800b428 <sniprintf>
		engineTemp->Draw_Text(buffer, redraw | (lastMode != 0));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	f997 3078 	ldrsb.w	r3, [r7, #120]	; 0x78
 8002af6:	4313      	orrs	r3, r2
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	f7fd fc0f 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>
		snprintf((char*)buffer, 5, "%4d", telemetry.oilTemp);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002b08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b0c:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <_ZN10OutLapPage6UpdateE9Telemetryh+0x80c>)
 8002b0e:	2105      	movs	r1, #5
 8002b10:	f008 fc8a 	bl	800b428 <sniprintf>
		oilTemp->Draw_Text(buffer, redraw || (lastMode != 0));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002b1e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d104      	bne.n	8002b30 <_ZN10OutLapPage6UpdateE9Telemetryh+0x6d0>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <_ZN10OutLapPage6UpdateE9Telemetryh+0x6d4>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <_ZN10OutLapPage6UpdateE9Telemetryh+0x6d6>
 8002b34:	2300      	movs	r3, #0
 8002b36:	461a      	mov	r2, r3
 8002b38:	f7fd fbf2 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		BSP_LCD_SetFont(&FreeSans18pt7b);
 8002b3c:	484c      	ldr	r0, [pc, #304]	; (8002c70 <_ZN10OutLapPage6UpdateE9Telemetryh+0x810>)
 8002b3e:	f002 f8a1 	bl	8004c84 <BSP_LCD_SetFont>
		snprintf((char*)buffer, 7, "%+3d.%02d", telemetry.deltaAheadSec, telemetry.deltaAheadMs < 0 ? -telemetry.deltaAheadMs : telemetry.deltaAheadMs);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002b48:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	bfb8      	it	lt
 8002b56:	425b      	neglt	r3, r3
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <_ZN10OutLapPage6UpdateE9Telemetryh+0x814>)
 8002b60:	2107      	movs	r1, #7
 8002b62:	f008 fc61 	bl	800b428 <sniprintf>
		if(telemetry.deltaAheadMs < 0)
 8002b66:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da16      	bge.n	8002b9c <_ZN10OutLapPage6UpdateE9Telemetryh+0x73c>
			for(uint8_t i =0;i<3;i++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	737b      	strb	r3, [r7, #13]
 8002b72:	7b7b      	ldrb	r3, [r7, #13]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d811      	bhi.n	8002b9c <_ZN10OutLapPage6UpdateE9Telemetryh+0x73c>
				if(buffer[i]=='+')
 8002b78:	7b7b      	ldrb	r3, [r7, #13]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b82:	2b2b      	cmp	r3, #43	; 0x2b
 8002b84:	d106      	bne.n	8002b94 <_ZN10OutLapPage6UpdateE9Telemetryh+0x734>
				{
					buffer[i] = '-';
 8002b86:	7b7b      	ldrb	r3, [r7, #13]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	222d      	movs	r2, #45	; 0x2d
 8002b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					break;
 8002b92:	e003      	b.n	8002b9c <_ZN10OutLapPage6UpdateE9Telemetryh+0x73c>
			for(uint8_t i =0;i<3;i++)
 8002b94:	7b7b      	ldrb	r3, [r7, #13]
 8002b96:	3301      	adds	r3, #1
 8002b98:	737b      	strb	r3, [r7, #13]
 8002b9a:	e7ea      	b.n	8002b72 <_ZN10OutLapPage6UpdateE9Telemetryh+0x712>
				}
		deltaAhead->Draw_Text(buffer, redraw || (lastMode != 0));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6958      	ldr	r0, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002ba6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <_ZN10OutLapPage6UpdateE9Telemetryh+0x758>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <_ZN10OutLapPage6UpdateE9Telemetryh+0x75c>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <_ZN10OutLapPage6UpdateE9Telemetryh+0x75e>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f7fd fbae 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		snprintf((char*)buffer, 7, "%+3d.%02d", telemetry.deltaBehindSec, telemetry.deltaBehindMs < 0 ? -telemetry.deltaBehindMs : telemetry.deltaBehindMs);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8002bca:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	bfb8      	it	lt
 8002bd8:	425b      	neglt	r3, r3
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	4613      	mov	r3, r2
 8002be0:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <_ZN10OutLapPage6UpdateE9Telemetryh+0x814>)
 8002be2:	2107      	movs	r1, #7
 8002be4:	f008 fc20 	bl	800b428 <sniprintf>
		if(telemetry.deltaBehindMs < 0)
 8002be8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da16      	bge.n	8002c1e <_ZN10OutLapPage6UpdateE9Telemetryh+0x7be>
			for(uint8_t i =0;i<3;i++)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	733b      	strb	r3, [r7, #12]
 8002bf4:	7b3b      	ldrb	r3, [r7, #12]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d811      	bhi.n	8002c1e <_ZN10OutLapPage6UpdateE9Telemetryh+0x7be>
				if(buffer[i]=='+')
 8002bfa:	7b3b      	ldrb	r3, [r7, #12]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c04:	2b2b      	cmp	r3, #43	; 0x2b
 8002c06:	d106      	bne.n	8002c16 <_ZN10OutLapPage6UpdateE9Telemetryh+0x7b6>
				{
					buffer[i] = '-';
 8002c08:	7b3b      	ldrb	r3, [r7, #12]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	222d      	movs	r2, #45	; 0x2d
 8002c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
					break;
 8002c14:	e003      	b.n	8002c1e <_ZN10OutLapPage6UpdateE9Telemetryh+0x7be>
			for(uint8_t i =0;i<3;i++)
 8002c16:	7b3b      	ldrb	r3, [r7, #12]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	733b      	strb	r3, [r7, #12]
 8002c1c:	e7ea      	b.n	8002bf4 <_ZN10OutLapPage6UpdateE9Telemetryh+0x794>
				}
		deltaBehind->Draw_Text(buffer, redraw || (lastMode != 0));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6998      	ldr	r0, [r3, #24]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002c28:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <_ZN10OutLapPage6UpdateE9Telemetryh+0x7da>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <_ZN10OutLapPage6UpdateE9Telemetryh+0x7de>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <_ZN10OutLapPage6UpdateE9Telemetryh+0x7e0>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	461a      	mov	r2, r3
 8002c42:	f7fd fb6d 	bl	8000320 <_ZN15FlickerFreeText9Draw_TextEPhh>

		lastMode = 1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	}

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002c4e:	f64f 201f 	movw	r0, #64031	; 0xfa1f
 8002c52:	f001 fff7 	bl	8004c44 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f002 f804 	bl	8004c64 <BSP_LCD_SetBackColor>
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c66:	b004      	add	sp, #16
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	0800bd74 	.word	0x0800bd74
 8002c70:	0800dbe0 	.word	0x0800dbe0
 8002c74:	0800bd78 	.word	0x0800bd78

08002c78 <_ZN10OutLapPageD1Ev>:

OutLapPage::~OutLapPage()
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
{
	delete gear;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681c      	ldr	r4, [r3, #0]
 8002c84:	2c00      	cmp	r4, #0
 8002c86:	d006      	beq.n	8002c96 <_ZN10OutLapPageD1Ev+0x1e>
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7fd fb17 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002c8e:	2118      	movs	r1, #24
 8002c90:	4620      	mov	r0, r4
 8002c92:	f008 fa55 	bl	800b140 <_ZdlPvj>
	delete mix;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685c      	ldr	r4, [r3, #4]
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d006      	beq.n	8002cac <_ZN10OutLapPageD1Ev+0x34>
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7fd fb0c 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002ca4:	2118      	movs	r1, #24
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f008 fa4a 	bl	800b140 <_ZdlPvj>
	delete ers;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689c      	ldr	r4, [r3, #8]
 8002cb0:	2c00      	cmp	r4, #0
 8002cb2:	d006      	beq.n	8002cc2 <_ZN10OutLapPageD1Ev+0x4a>
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	f7fd fb01 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002cba:	2118      	movs	r1, #24
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f008 fa3f 	bl	800b140 <_ZdlPvj>
	delete ersBar;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68dc      	ldr	r4, [r3, #12]
 8002cc6:	2c00      	cmp	r4, #0
 8002cc8:	d006      	beq.n	8002cd8 <_ZN10OutLapPageD1Ev+0x60>
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7fd faf6 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002cd0:	2118      	movs	r1, #24
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f008 fa34 	bl	800b140 <_ZdlPvj>
	delete speed;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691c      	ldr	r4, [r3, #16]
 8002cdc:	2c00      	cmp	r4, #0
 8002cde:	d006      	beq.n	8002cee <_ZN10OutLapPageD1Ev+0x76>
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f7fd faeb 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002ce6:	2118      	movs	r1, #24
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f008 fa29 	bl	800b140 <_ZdlPvj>
	delete deltaAhead;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695c      	ldr	r4, [r3, #20]
 8002cf2:	2c00      	cmp	r4, #0
 8002cf4:	d006      	beq.n	8002d04 <_ZN10OutLapPageD1Ev+0x8c>
 8002cf6:	4620      	mov	r0, r4
 8002cf8:	f7fd fae0 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002cfc:	2118      	movs	r1, #24
 8002cfe:	4620      	mov	r0, r4
 8002d00:	f008 fa1e 	bl	800b140 <_ZdlPvj>
	delete deltaBehind;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699c      	ldr	r4, [r3, #24]
 8002d08:	2c00      	cmp	r4, #0
 8002d0a:	d006      	beq.n	8002d1a <_ZN10OutLapPageD1Ev+0xa2>
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f7fd fad5 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002d12:	2118      	movs	r1, #24
 8002d14:	4620      	mov	r0, r4
 8002d16:	f008 fa13 	bl	800b140 <_ZdlPvj>
	delete tireFL;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69dc      	ldr	r4, [r3, #28]
 8002d1e:	2c00      	cmp	r4, #0
 8002d20:	d006      	beq.n	8002d30 <_ZN10OutLapPageD1Ev+0xb8>
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7fd faca 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002d28:	2118      	movs	r1, #24
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f008 fa08 	bl	800b140 <_ZdlPvj>
	delete tireFR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1c      	ldr	r4, [r3, #32]
 8002d34:	2c00      	cmp	r4, #0
 8002d36:	d006      	beq.n	8002d46 <_ZN10OutLapPageD1Ev+0xce>
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f7fd fabf 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002d3e:	2118      	movs	r1, #24
 8002d40:	4620      	mov	r0, r4
 8002d42:	f008 f9fd 	bl	800b140 <_ZdlPvj>
	delete tireRL;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d4a:	2c00      	cmp	r4, #0
 8002d4c:	d006      	beq.n	8002d5c <_ZN10OutLapPageD1Ev+0xe4>
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7fd fab4 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002d54:	2118      	movs	r1, #24
 8002d56:	4620      	mov	r0, r4
 8002d58:	f008 f9f2 	bl	800b140 <_ZdlPvj>
	delete tireRR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002d60:	2c00      	cmp	r4, #0
 8002d62:	d006      	beq.n	8002d72 <_ZN10OutLapPageD1Ev+0xfa>
 8002d64:	4620      	mov	r0, r4
 8002d66:	f7fd faa9 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002d6a:	2118      	movs	r1, #24
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f008 f9e7 	bl	800b140 <_ZdlPvj>
	delete brakeFL;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002d76:	2c00      	cmp	r4, #0
 8002d78:	d006      	beq.n	8002d88 <_ZN10OutLapPageD1Ev+0x110>
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7fd fa9e 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002d80:	2118      	movs	r1, #24
 8002d82:	4620      	mov	r0, r4
 8002d84:	f008 f9dc 	bl	800b140 <_ZdlPvj>
	delete brakeFR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8002d8c:	2c00      	cmp	r4, #0
 8002d8e:	d006      	beq.n	8002d9e <_ZN10OutLapPageD1Ev+0x126>
 8002d90:	4620      	mov	r0, r4
 8002d92:	f7fd fa93 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002d96:	2118      	movs	r1, #24
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f008 f9d1 	bl	800b140 <_ZdlPvj>
	delete brakeRL;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002da2:	2c00      	cmp	r4, #0
 8002da4:	d006      	beq.n	8002db4 <_ZN10OutLapPageD1Ev+0x13c>
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7fd fa88 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002dac:	2118      	movs	r1, #24
 8002dae:	4620      	mov	r0, r4
 8002db0:	f008 f9c6 	bl	800b140 <_ZdlPvj>
	delete brakeRR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8002db8:	2c00      	cmp	r4, #0
 8002dba:	d006      	beq.n	8002dca <_ZN10OutLapPageD1Ev+0x152>
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f7fd fa7d 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002dc2:	2118      	movs	r1, #24
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f008 f9bb 	bl	800b140 <_ZdlPvj>
	delete engineTemp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8002dce:	2c00      	cmp	r4, #0
 8002dd0:	d006      	beq.n	8002de0 <_ZN10OutLapPageD1Ev+0x168>
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7fd fa72 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002dd8:	2118      	movs	r1, #24
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f008 f9b0 	bl	800b140 <_ZdlPvj>
	delete oilTemp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002de4:	2c00      	cmp	r4, #0
 8002de6:	d006      	beq.n	8002df6 <_ZN10OutLapPageD1Ev+0x17e>
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7fd fa67 	bl	80002bc <_ZN15FlickerFreeTextD1Ev>
 8002dee:	2118      	movs	r1, #24
 8002df0:	4620      	mov	r0, r4
 8002df2:	f008 f9a5 	bl	800b140 <_ZdlPvj>
}
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}

08002e00 <HAL_ADC_ConvCpltCallback>:
volatile uint8_t error = 0;
volatile uint8_t first = 1;

Telemetry telemetry = {0,};

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_I2C_ListenCpltCallback>:
volatile uint32_t value2 = 0;
volatile uint8_t lastState = 0;
volatile uint8_t listening = 0;

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	if(error == 1)
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_I2C_ListenCpltCallback+0x5c>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_I2C_ListenCpltCallback+0x24>
		HAL_I2C_EnableListen_IT(&hi2c1);
 8002e30:	4810      	ldr	r0, [pc, #64]	; (8002e74 <HAL_I2C_ListenCpltCallback+0x60>)
 8002e32:	f004 faab 	bl	800738c <HAL_I2C_EnableListen_IT>
 8002e36:	e013      	b.n	8002e60 <HAL_I2C_ListenCpltCallback+0x4c>
	else
	{
		value = HAL_GetTick() - lastTick;
 8002e38:	f002 fbc0 	bl	80055bc <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_I2C_ListenCpltCallback+0x64>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <HAL_I2C_ListenCpltCallback+0x68>)
 8002e46:	6013      	str	r3, [r2, #0]
		lastTick = HAL_GetTick();
 8002e48:	f002 fbb8 	bl	80055bc <HAL_GetTick>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_I2C_ListenCpltCallback+0x64>)
 8002e50:	6013      	str	r3, [r2, #0]
		count++;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_I2C_ListenCpltCallback+0x6c>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <HAL_I2C_ListenCpltCallback+0x6c>)
 8002e5e:	801a      	strh	r2, [r3, #0]
	}
	error = 0;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_I2C_ListenCpltCallback+0x5c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200000f4 	.word	0x200000f4
 8002e74:	200006c0 	.word	0x200006c0
 8002e78:	20000154 	.word	0x20000154
 8002e7c:	20000164 	.word	0x20000164
 8002e80:	2000015a 	.word	0x2000015a

08002e84 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
 8002e90:	4613      	mov	r3, r2
 8002e92:	803b      	strh	r3, [r7, #0]
	if(TransferDirection==I2C_DIRECTION_TRANSMIT)
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d109      	bne.n	8002eae <HAL_I2C_AddrCallback+0x2a>
	{
		first = 3;
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_I2C_AddrCallback+0x40>)
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_DMA(hi2c, (uint8_t*)&telemetry, sizeof(telemetry), I2C_NEXT_FRAME);
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	225c      	movs	r2, #92	; 0x5c
 8002ea4:	4908      	ldr	r1, [pc, #32]	; (8002ec8 <HAL_I2C_AddrCallback+0x44>)
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f004 f936 	bl	8007118 <HAL_I2C_Slave_Seq_Receive_DMA>
	}
	else
		HAL_I2C_Slave_Seq_Transmit_DMA(hi2c, (uint8_t*)&telemetry, sizeof(telemetry), I2C_NEXT_FRAME);
}
 8002eac:	e005      	b.n	8002eba <HAL_I2C_AddrCallback+0x36>
		HAL_I2C_Slave_Seq_Transmit_DMA(hi2c, (uint8_t*)&telemetry, sizeof(telemetry), I2C_NEXT_FRAME);
 8002eae:	2304      	movs	r3, #4
 8002eb0:	225c      	movs	r2, #92	; 0x5c
 8002eb2:	4905      	ldr	r1, [pc, #20]	; (8002ec8 <HAL_I2C_AddrCallback+0x44>)
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f003 fff5 	bl	8006ea4 <HAL_I2C_Slave_Seq_Transmit_DMA>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000001 	.word	0x20000001
 8002ec8:	200000f8 	.word	0x200000f8

08002ecc <HAL_I2C_MasterRxCpltCallback>:

const int8_t increment[16] = {0, -1, 1, 0, 1, 0, 0, -1, -1, 0, 0, 1, 0, 1, -1, 0};

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	if(first == 1)
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_I2C_MasterRxCpltCallback+0x30>
	{
		first = 2;
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8002eea:	2202      	movs	r2, #2
 8002eec:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t)(0x21<<1), button_buf2, 2);
 8002eee:	2302      	movs	r3, #2
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <HAL_I2C_MasterRxCpltCallback+0xc4>)
 8002ef2:	2142      	movs	r1, #66	; 0x42
 8002ef4:	4827      	ldr	r0, [pc, #156]	; (8002f94 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 8002ef6:	f003 fead 	bl	8006c54 <HAL_I2C_Master_Receive_DMA>
		//HAL_I2C_EnableListen_IT(&hi2c1);
		value2 = HAL_GetTick() - lastTick2;
		lastTick2 = HAL_GetTick();
		count2++;
	}
}
 8002efa:	e043      	b.n	8002f84 <HAL_I2C_MasterRxCpltCallback+0xb8>
	else if(first == 2)
 8002efc:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d039      	beq.n	8002f84 <HAL_I2C_MasterRxCpltCallback+0xb8>
		first = 0;
 8002f10:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_I2C_MasterRxCpltCallback+0xc0>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
		uint8_t state = button_buf2[1] & 0b11;
 8002f16:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <HAL_I2C_MasterRxCpltCallback+0xc4>)
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	73fb      	strb	r3, [r7, #15]
		if(state != lastState)
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_I2C_MasterRxCpltCallback+0x90>
			count += increment[state | (lastState << 2)];
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4313      	orrs	r3, r2
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_I2C_MasterRxCpltCallback+0xd0>)
 8002f44:	56d3      	ldrsb	r3, [r2, r3]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8002f54:	801a      	strh	r2, [r3, #0]
			lastState = state;
 8002f56:	4a10      	ldr	r2, [pc, #64]	; (8002f98 <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	7013      	strb	r3, [r2, #0]
		value2 = HAL_GetTick() - lastTick2;
 8002f5c:	f002 fb2e 	bl	80055bc <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 8002f6a:	6013      	str	r3, [r2, #0]
		lastTick2 = HAL_GetTick();
 8002f6c:	f002 fb26 	bl	80055bc <HAL_GetTick>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8002f74:	6013      	str	r3, [r2, #0]
		count2++;
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_I2C_MasterRxCpltCallback+0xe0>)
 8002f82:	801a      	strh	r2, [r3, #0]
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000001 	.word	0x20000001
 8002f90:	200000dc 	.word	0x200000dc
 8002f94:	200006c0 	.word	0x200006c0
 8002f98:	2000016c 	.word	0x2000016c
 8002f9c:	0800bdc8 	.word	0x0800bdc8
 8002fa0:	2000015a 	.word	0x2000015a
 8002fa4:	20000160 	.word	0x20000160
 8002fa8:	20000168 	.word	0x20000168
 8002fac:	20000158 	.word	0x20000158

08002fb0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	error = 1;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_I2C_ErrorCallback+0x44>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
	if(first == 1 || first == 2)
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <HAL_I2C_ErrorCallback+0x48>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d004      	beq.n	8002fd2 <HAL_I2C_ErrorCallback+0x22>
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_I2C_ErrorCallback+0x48>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_ErrorCallback+0x26>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_I2C_ErrorCallback+0x28>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_I2C_ErrorCallback+0x3a>
	{
		i2cError++;
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <HAL_I2C_ErrorCallback+0x4c>)
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_I2C_ErrorCallback+0x4c>)
 8002fe8:	801a      	strh	r2, [r3, #0]
	}
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	200000f4 	.word	0x200000f4
 8002ff8:	20000001 	.word	0x20000001
 8002ffc:	2000015c 	.word	0x2000015c

08003000 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8003008:	2100      	movs	r1, #0
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f007 f93e 	bl	800a28c <HAL_TIM_PWM_Stop_DMA>
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d127      	bne.n	8003078 <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		//HAL_I2C_DisableListen_IT(&hi2c1);
		first = 1;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
		listening++;
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	b2da      	uxtb	r2, r3
 8003038:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800303a:	701a      	strb	r2, [r3, #0]
		if(listening >= 10)
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b09      	cmp	r3, #9
 8003044:	bf8c      	ite	hi
 8003046:	2301      	movhi	r3, #1
 8003048:	2300      	movls	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01d      	beq.n	800308c <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			if(listening == 10)
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b0a      	cmp	r3, #10
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_TIM_PeriodElapsedCallback+0x52>
				HAL_I2C_DisableListen_IT(&hi2c1);
 8003064:	480e      	ldr	r0, [pc, #56]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003066:	f004 f9c6 	bl	80073f6 <HAL_I2C_DisableListen_IT>
			HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t)(0x20<<1), button_buf, 2);
 800306a:	2302      	movs	r3, #2
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800306e:	2140      	movs	r1, #64	; 0x40
 8003070:	480b      	ldr	r0, [pc, #44]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003072:	f003 fdef 	bl	8006c54 <HAL_I2C_Master_Receive_DMA>
	{
		listening = 0;
		HAL_I2C_EnableListen_IT(&hi2c1);
	}

}
 8003076:	e009      	b.n	800308c <HAL_TIM_PeriodElapsedCallback+0x74>
	}else if (htim == &htim4)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d105      	bne.n	800308c <HAL_TIM_PeriodElapsedCallback+0x74>
		listening = 0;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
		HAL_I2C_EnableListen_IT(&hi2c1);
 8003086:	4806      	ldr	r0, [pc, #24]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003088:	f004 f980 	bl	800738c <HAL_I2C_EnableListen_IT>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000714 	.word	0x20000714
 8003098:	20000001 	.word	0x20000001
 800309c:	2000016d 	.word	0x2000016d
 80030a0:	200006c0 	.word	0x200006c0
 80030a4:	200000d8 	.word	0x200000d8
 80030a8:	20000678 	.word	0x20000678

080030ac <cppmain>:

void cppmain() {
 80030ac:	b5b0      	push	{r4, r5, r7, lr}
 80030ae:	b0bc      	sub	sp, #240	; 0xf0
 80030b0:	af14      	add	r7, sp, #80	; 0x50
	button_buf[0] = 0xff;
 80030b2:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <cppmain+0x108>)
 80030b4:	22ff      	movs	r2, #255	; 0xff
 80030b6:	701a      	strb	r2, [r3, #0]
	button_buf[1] = 0xff;
 80030b8:	4b3e      	ldr	r3, [pc, #248]	; (80031b4 <cppmain+0x108>)
 80030ba:	22ff      	movs	r2, #255	; 0xff
 80030bc:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x20<<1), button_buf, 2, 100);
 80030be:	2364      	movs	r3, #100	; 0x64
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2302      	movs	r3, #2
 80030c4:	4a3b      	ldr	r2, [pc, #236]	; (80031b4 <cppmain+0x108>)
 80030c6:	2140      	movs	r1, #64	; 0x40
 80030c8:	483b      	ldr	r0, [pc, #236]	; (80031b8 <cppmain+0x10c>)
 80030ca:	f003 fcc5 	bl	8006a58 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(0x21<<1), button_buf, 2, 100);
 80030ce:	2364      	movs	r3, #100	; 0x64
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	2302      	movs	r3, #2
 80030d4:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <cppmain+0x108>)
 80030d6:	2142      	movs	r1, #66	; 0x42
 80030d8:	4837      	ldr	r0, [pc, #220]	; (80031b8 <cppmain+0x10c>)
 80030da:	f003 fcbd 	bl	8006a58 <HAL_I2C_Master_Transmit>

	ws2812_init();
 80030de:	f000 fe2f 	bl	8003d40 <_Z11ws2812_initv>
	HAL_TIM_Base_Start_IT(&htim3);
 80030e2:	4836      	ldr	r0, [pc, #216]	; (80031bc <cppmain+0x110>)
 80030e4:	f006 fe8e 	bl	8009e04 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, ADC_BUF, 5);
 80030e8:	2205      	movs	r2, #5
 80030ea:	4935      	ldr	r1, [pc, #212]	; (80031c0 <cppmain+0x114>)
 80030ec:	4835      	ldr	r0, [pc, #212]	; (80031c4 <cppmain+0x118>)
 80030ee:	f002 fb6b 	bl	80057c8 <HAL_ADC_Start_DMA>

	BSP_LCD_Init();
 80030f2:	f001 fd71 	bl	8004bd8 <BSP_LCD_Init>

	LCDTelemetry lcdTelemetry = LCDTelemetry();
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd f949 	bl	8000390 <_ZN12LCDTelemetryC1Ev>
	while(running){
 80030fe:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <cppmain+0x11c>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d04e      	beq.n	80031a4 <cppmain+0xf8>
		//snprintf(trans_str, 63, "ADC %d %d %d %d %d\n", (uint16_t)ADC_BUF[0], (uint16_t)ADC_BUF[1], (uint16_t)ADC_BUF[2], (uint16_t)ADC_BUF[3], (uint16_t)ADC_BUF[4]);

		telemetry.speed = i2cError;
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <cppmain+0x120>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	b21a      	sxth	r2, r3
 800310e:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <cppmain+0x124>)
 8003110:	849a      	strh	r2, [r3, #36]	; 0x24
		telemetry.brakeFL = count;
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <cppmain+0x128>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	b21a      	sxth	r2, r3
 800311a:	4b2d      	ldr	r3, [pc, #180]	; (80031d0 <cppmain+0x124>)
 800311c:	84da      	strh	r2, [r3, #38]	; 0x26
		telemetry.brakeRL = count2;
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <cppmain+0x12c>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	b21a      	sxth	r2, r3
 8003126:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <cppmain+0x124>)
 8003128:	855a      	strh	r2, [r3, #42]	; 0x2a
		telemetry.brakeFR = value;
 800312a:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <cppmain+0x130>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	b21a      	sxth	r2, r3
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <cppmain+0x124>)
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28
		telemetry.brakeRR = value2;
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <cppmain+0x134>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b21a      	sxth	r2, r3
 800313a:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <cppmain+0x124>)
 800313c:	859a      	strh	r2, [r3, #44]	; 0x2c

		telemetry.flags = 8;
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <cppmain+0x124>)
 8003140:	2208      	movs	r2, #8
 8003142:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

		telemetry.tireFL = button_buf[0];
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <cppmain+0x108>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b21a      	sxth	r2, r3
 800314c:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <cppmain+0x124>)
 800314e:	829a      	strh	r2, [r3, #20]
		telemetry.tireFR = button_buf2[0];
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <cppmain+0x138>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b21a      	sxth	r2, r3
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <cppmain+0x124>)
 8003158:	82da      	strh	r2, [r3, #22]
		telemetry.tireRL = button_buf[1];
 800315a:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <cppmain+0x108>)
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	b21a      	sxth	r2, r3
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <cppmain+0x124>)
 8003162:	831a      	strh	r2, [r3, #24]
		telemetry.tireRR = button_buf2[1];
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <cppmain+0x138>)
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	b21a      	sxth	r2, r3
 800316a:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <cppmain+0x124>)
 800316c:	835a      	strh	r2, [r3, #26]

		lcdTelemetry.Update(telemetry);
 800316e:	4c18      	ldr	r4, [pc, #96]	; (80031d0 <cppmain+0x124>)
 8003170:	1d3d      	adds	r5, r7, #4
 8003172:	4668      	mov	r0, sp
 8003174:	f104 030c 	add.w	r3, r4, #12
 8003178:	2250      	movs	r2, #80	; 0x50
 800317a:	4619      	mov	r1, r3
 800317c:	f008 f844 	bl	800b208 <memcpy>
 8003180:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003184:	4628      	mov	r0, r5
 8003186:	f7fd f9c1 	bl	800050c <_ZN12LCDTelemetry6UpdateE9Telemetry>
		ws1212_setup(telemetry);
 800318a:	4c11      	ldr	r4, [pc, #68]	; (80031d0 <cppmain+0x124>)
 800318c:	4668      	mov	r0, sp
 800318e:	f104 0310 	add.w	r3, r4, #16
 8003192:	224c      	movs	r2, #76	; 0x4c
 8003194:	4619      	mov	r1, r3
 8003196:	f008 f837 	bl	800b208 <memcpy>
 800319a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800319e:	f000 fde9 	bl	8003d74 <_Z12ws1212_setup9Telemetry>
	while(running){
 80031a2:	e7ac      	b.n	80030fe <cppmain+0x52>
	LCDTelemetry lcdTelemetry = LCDTelemetry();
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd fd02 	bl	8000bb0 <_ZN12LCDTelemetryD1Ev>
	}

}
 80031ac:	bf00      	nop
 80031ae:	37a0      	adds	r7, #160	; 0xa0
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bdb0      	pop	{r4, r5, r7, pc}
 80031b4:	200000d8 	.word	0x200000d8
 80031b8:	200006c0 	.word	0x200006c0
 80031bc:	20000714 	.word	0x20000714
 80031c0:	200000e0 	.word	0x200000e0
 80031c4:	2000075c 	.word	0x2000075c
 80031c8:	20000000 	.word	0x20000000
 80031cc:	2000015c 	.word	0x2000015c
 80031d0:	200000f8 	.word	0x200000f8
 80031d4:	2000015a 	.word	0x2000015a
 80031d8:	20000158 	.word	0x20000158
 80031dc:	20000164 	.word	0x20000164
 80031e0:	20000168 	.word	0x20000168
 80031e4:	200000dc 	.word	0x200000dc

080031e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ee:	f002 f98d 	bl	800550c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031f2:	f000 f835 	bl	8003260 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80031f6:	4b19      	ldr	r3, [pc, #100]	; (800325c <main+0x74>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <main+0x74>)
 80031fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003200:	61d3      	str	r3, [r2, #28]
 8003202:	4b16      	ldr	r3, [pc, #88]	; (800325c <main+0x74>)
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
   HAL_Delay(100);
 800320e:	2064      	movs	r0, #100	; 0x64
 8003210:	f002 f9de 	bl	80055d0 <HAL_Delay>
   __HAL_RCC_I2C1_FORCE_RESET();
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <main+0x74>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <main+0x74>)
 800321a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800321e:	6113      	str	r3, [r2, #16]
   HAL_Delay(100);
 8003220:	2064      	movs	r0, #100	; 0x64
 8003222:	f002 f9d5 	bl	80055d0 <HAL_Delay>
   __HAL_RCC_I2C1_RELEASE_RESET();
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <main+0x74>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4a0c      	ldr	r2, [pc, #48]	; (800325c <main+0x74>)
 800322c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003230:	6113      	str	r3, [r2, #16]
   HAL_Delay(100);
 8003232:	2064      	movs	r0, #100	; 0x64
 8003234:	f002 f9cc 	bl	80055d0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003238:	f000 fa52 	bl	80036e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800323c:	f000 fa22 	bl	8003684 <MX_DMA_Init>
  MX_I2C1_Init();
 8003240:	f000 f8e2 	bl	8003408 <MX_I2C1_Init>
  MX_ADC1_Init();
 8003244:	f000 f868 	bl	8003318 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003248:	f000 f90c 	bl	8003464 <MX_TIM2_Init>
  MX_TIM3_Init();
 800324c:	f000 f97e 	bl	800354c <MX_TIM3_Init>
  MX_TIM4_Init();
 8003250:	f000 f9ca 	bl	80035e8 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  cppmain();
 8003254:	f7ff ff2a 	bl	80030ac <cppmain>
  while (1)
 8003258:	e7fe      	b.n	8003258 <main+0x70>
 800325a:	bf00      	nop
 800325c:	40021000 	.word	0x40021000

08003260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b094      	sub	sp, #80	; 0x50
 8003264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800326a:	2228      	movs	r2, #40	; 0x28
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f007 ffd8 	bl	800b224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003274:	f107 0314 	add.w	r3, r7, #20
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003290:	2301      	movs	r3, #1
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800329a:	2300      	movs	r3, #0
 800329c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800329e:	2301      	movs	r3, #1
 80032a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032a2:	2302      	movs	r3, #2
 80032a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80032ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80032b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032b6:	4618      	mov	r0, r3
 80032b8:	f006 f898 	bl	80093ec <HAL_RCC_OscConfig>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80032c2:	f000 fa65 	bl	8003790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032c6:	230f      	movs	r3, #15
 80032c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032ca:	2302      	movs	r3, #2
 80032cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	2102      	movs	r1, #2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f006 fb02 	bl	80098ec <HAL_RCC_ClockConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80032ee:	f000 fa4f 	bl	8003790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80032f2:	2302      	movs	r3, #2
 80032f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80032f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032fc:	1d3b      	adds	r3, r7, #4
 80032fe:	4618      	mov	r0, r3
 8003300:	f006 fc7a 	bl	8009bf8 <HAL_RCCEx_PeriphCLKConfig>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800330a:	f000 fa41 	bl	8003790 <Error_Handler>
  }
}
 800330e:	bf00      	nop
 8003310:	3750      	adds	r7, #80	; 0x50
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003328:	4b35      	ldr	r3, [pc, #212]	; (8003400 <MX_ADC1_Init+0xe8>)
 800332a:	4a36      	ldr	r2, [pc, #216]	; (8003404 <MX_ADC1_Init+0xec>)
 800332c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800332e:	4b34      	ldr	r3, [pc, #208]	; (8003400 <MX_ADC1_Init+0xe8>)
 8003330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003334:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003336:	4b32      	ldr	r3, [pc, #200]	; (8003400 <MX_ADC1_Init+0xe8>)
 8003338:	2201      	movs	r2, #1
 800333a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <MX_ADC1_Init+0xe8>)
 800333e:	2200      	movs	r2, #0
 8003340:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003342:	4b2f      	ldr	r3, [pc, #188]	; (8003400 <MX_ADC1_Init+0xe8>)
 8003344:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003348:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800334a:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <MX_ADC1_Init+0xe8>)
 800334c:	2200      	movs	r2, #0
 800334e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8003350:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <MX_ADC1_Init+0xe8>)
 8003352:	2205      	movs	r2, #5
 8003354:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003356:	482a      	ldr	r0, [pc, #168]	; (8003400 <MX_ADC1_Init+0xe8>)
 8003358:	f002 f95e 	bl	8005618 <HAL_ADC_Init>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003362:	f000 fa15 	bl	8003790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003366:	2302      	movs	r3, #2
 8003368:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800336a:	2301      	movs	r3, #1
 800336c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800336e:	2307      	movs	r3, #7
 8003370:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	4619      	mov	r1, r3
 8003376:	4822      	ldr	r0, [pc, #136]	; (8003400 <MX_ADC1_Init+0xe8>)
 8003378:	f002 fb16 	bl	80059a8 <HAL_ADC_ConfigChannel>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003382:	f000 fa05 	bl	8003790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003386:	2303      	movs	r3, #3
 8003388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800338a:	2302      	movs	r3, #2
 800338c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800338e:	1d3b      	adds	r3, r7, #4
 8003390:	4619      	mov	r1, r3
 8003392:	481b      	ldr	r0, [pc, #108]	; (8003400 <MX_ADC1_Init+0xe8>)
 8003394:	f002 fb08 	bl	80059a8 <HAL_ADC_ConfigChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800339e:	f000 f9f7 	bl	8003790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80033a2:	2304      	movs	r3, #4
 80033a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80033a6:	2303      	movs	r3, #3
 80033a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4814      	ldr	r0, [pc, #80]	; (8003400 <MX_ADC1_Init+0xe8>)
 80033b0:	f002 fafa 	bl	80059a8 <HAL_ADC_ConfigChannel>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80033ba:	f000 f9e9 	bl	8003790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80033be:	2305      	movs	r3, #5
 80033c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80033c2:	2304      	movs	r3, #4
 80033c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	480d      	ldr	r0, [pc, #52]	; (8003400 <MX_ADC1_Init+0xe8>)
 80033cc:	f002 faec 	bl	80059a8 <HAL_ADC_ConfigChannel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80033d6:	f000 f9db 	bl	8003790 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80033da:	2306      	movs	r3, #6
 80033dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80033de:	2305      	movs	r3, #5
 80033e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4806      	ldr	r0, [pc, #24]	; (8003400 <MX_ADC1_Init+0xe8>)
 80033e8:	f002 fade 	bl	80059a8 <HAL_ADC_ConfigChannel>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80033f2:	f000 f9cd 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000075c 	.word	0x2000075c
 8003404:	40012400 	.word	0x40012400

08003408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <MX_I2C1_Init+0x50>)
 800340e:	4a13      	ldr	r2, [pc, #76]	; (800345c <MX_I2C1_Init+0x54>)
 8003410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <MX_I2C1_Init+0x50>)
 8003414:	4a12      	ldr	r2, [pc, #72]	; (8003460 <MX_I2C1_Init+0x58>)
 8003416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <MX_I2C1_Init+0x50>)
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 72;
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <MX_I2C1_Init+0x50>)
 8003420:	2248      	movs	r2, #72	; 0x48
 8003422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <MX_I2C1_Init+0x50>)
 8003426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800342a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <MX_I2C1_Init+0x50>)
 800342e:	2200      	movs	r2, #0
 8003430:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <MX_I2C1_Init+0x50>)
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <MX_I2C1_Init+0x50>)
 800343a:	2200      	movs	r2, #0
 800343c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <MX_I2C1_Init+0x50>)
 8003440:	2200      	movs	r2, #0
 8003442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <MX_I2C1_Init+0x50>)
 8003446:	f003 f9c3 	bl	80067d0 <HAL_I2C_Init>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003450:	f000 f99e 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003454:	bf00      	nop
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200006c0 	.word	0x200006c0
 800345c:	40005400 	.word	0x40005400
 8003460:	00061a80 	.word	0x00061a80

08003464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	; 0x38
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800346a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003478:	f107 0320 	add.w	r3, r7, #32
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003482:	1d3b      	adds	r3, r7, #4
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <MX_TIM2_Init+0xe4>)
 8003496:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800349a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800349c:	4b2a      	ldr	r3, [pc, #168]	; (8003548 <MX_TIM2_Init+0xe4>)
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <MX_TIM2_Init+0xe4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 80034a8:	4b27      	ldr	r3, [pc, #156]	; (8003548 <MX_TIM2_Init+0xe4>)
 80034aa:	2259      	movs	r2, #89	; 0x59
 80034ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <MX_TIM2_Init+0xe4>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b4:	4b24      	ldr	r3, [pc, #144]	; (8003548 <MX_TIM2_Init+0xe4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034ba:	4823      	ldr	r0, [pc, #140]	; (8003548 <MX_TIM2_Init+0xe4>)
 80034bc:	f006 fc52 	bl	8009d64 <HAL_TIM_Base_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80034c6:	f000 f963 	bl	8003790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d4:	4619      	mov	r1, r3
 80034d6:	481c      	ldr	r0, [pc, #112]	; (8003548 <MX_TIM2_Init+0xe4>)
 80034d8:	f007 f95c 	bl	800a794 <HAL_TIM_ConfigClockSource>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80034e2:	f000 f955 	bl	8003790 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034e6:	4818      	ldr	r0, [pc, #96]	; (8003548 <MX_TIM2_Init+0xe4>)
 80034e8:	f006 fcde 	bl	8009ea8 <HAL_TIM_PWM_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80034f2:	f000 f94d 	bl	8003790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034fe:	f107 0320 	add.w	r3, r7, #32
 8003502:	4619      	mov	r1, r3
 8003504:	4810      	ldr	r0, [pc, #64]	; (8003548 <MX_TIM2_Init+0xe4>)
 8003506:	f007 fdab 	bl	800b060 <HAL_TIMEx_MasterConfigSynchronization>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003510:	f000 f93e 	bl	8003790 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003514:	2360      	movs	r3, #96	; 0x60
 8003516:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	2200      	movs	r2, #0
 8003528:	4619      	mov	r1, r3
 800352a:	4807      	ldr	r0, [pc, #28]	; (8003548 <MX_TIM2_Init+0xe4>)
 800352c:	f007 f874 	bl	800a618 <HAL_TIM_PWM_ConfigChannel>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003536:	f000 f92b 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800353a:	4803      	ldr	r0, [pc, #12]	; (8003548 <MX_TIM2_Init+0xe4>)
 800353c:	f000 fac2 	bl	8003ac4 <HAL_TIM_MspPostInit>

}
 8003540:	bf00      	nop
 8003542:	3738      	adds	r7, #56	; 0x38
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000814 	.word	0x20000814

0800354c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003552:	f107 0308 	add.w	r3, r7, #8
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003560:	463b      	mov	r3, r7
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <MX_TIM3_Init+0x94>)
 800356a:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <MX_TIM3_Init+0x98>)
 800356c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003570:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8003574:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003578:	2200      	movs	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <MX_TIM3_Init+0x94>)
 800357e:	2201      	movs	r2, #1
 8003580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003584:	2200      	movs	r2, #0
 8003586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <MX_TIM3_Init+0x94>)
 800358a:	2200      	movs	r2, #0
 800358c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800358e:	4814      	ldr	r0, [pc, #80]	; (80035e0 <MX_TIM3_Init+0x94>)
 8003590:	f006 fbe8 	bl	8009d64 <HAL_TIM_Base_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800359a:	f000 f8f9 	bl	8003790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800359e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035a4:	f107 0308 	add.w	r3, r7, #8
 80035a8:	4619      	mov	r1, r3
 80035aa:	480d      	ldr	r0, [pc, #52]	; (80035e0 <MX_TIM3_Init+0x94>)
 80035ac:	f007 f8f2 	bl	800a794 <HAL_TIM_ConfigClockSource>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80035b6:	f000 f8eb 	bl	8003790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035c2:	463b      	mov	r3, r7
 80035c4:	4619      	mov	r1, r3
 80035c6:	4806      	ldr	r0, [pc, #24]	; (80035e0 <MX_TIM3_Init+0x94>)
 80035c8:	f007 fd4a 	bl	800b060 <HAL_TIMEx_MasterConfigSynchronization>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80035d2:	f000 f8dd 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000714 	.word	0x20000714
 80035e4:	40000400 	.word	0x40000400

080035e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035fc:	463b      	mov	r3, r7
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <MX_TIM4_Init+0x94>)
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <MX_TIM4_Init+0x98>)
 8003608:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 36000-1;
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <MX_TIM4_Init+0x94>)
 800360c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8003610:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <MX_TIM4_Init+0x94>)
 8003614:	2200      	movs	r2, #0
 8003616:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 200-1;
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <MX_TIM4_Init+0x94>)
 800361a:	22c7      	movs	r2, #199	; 0xc7
 800361c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <MX_TIM4_Init+0x94>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <MX_TIM4_Init+0x94>)
 8003626:	2200      	movs	r2, #0
 8003628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800362a:	4814      	ldr	r0, [pc, #80]	; (800367c <MX_TIM4_Init+0x94>)
 800362c:	f006 fb9a 	bl	8009d64 <HAL_TIM_Base_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003636:	f000 f8ab 	bl	8003790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800363a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800363e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003640:	f107 0308 	add.w	r3, r7, #8
 8003644:	4619      	mov	r1, r3
 8003646:	480d      	ldr	r0, [pc, #52]	; (800367c <MX_TIM4_Init+0x94>)
 8003648:	f007 f8a4 	bl	800a794 <HAL_TIM_ConfigClockSource>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003652:	f000 f89d 	bl	8003790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003656:	2300      	movs	r3, #0
 8003658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800365e:	463b      	mov	r3, r7
 8003660:	4619      	mov	r1, r3
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <MX_TIM4_Init+0x94>)
 8003664:	f007 fcfc 	bl	800b060 <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800366e:	f000 f88f 	bl	8003790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000678 	.word	0x20000678
 8003680:	40000800 	.word	0x40000800

08003684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <MX_DMA_Init+0x58>)
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4a13      	ldr	r2, [pc, #76]	; (80036dc <MX_DMA_Init+0x58>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6153      	str	r3, [r2, #20]
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <MX_DMA_Init+0x58>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	200b      	movs	r0, #11
 80036a8:	f002 fc4f 	bl	8005f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036ac:	200b      	movs	r0, #11
 80036ae:	f002 fc68 	bl	8005f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	200f      	movs	r0, #15
 80036b8:	f002 fc47 	bl	8005f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80036bc:	200f      	movs	r0, #15
 80036be:	f002 fc60 	bl	8005f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80036c2:	2200      	movs	r2, #0
 80036c4:	2100      	movs	r1, #0
 80036c6:	2011      	movs	r0, #17
 80036c8:	f002 fc3f 	bl	8005f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80036cc:	2011      	movs	r0, #17
 80036ce:	f002 fc58 	bl	8005f82 <HAL_NVIC_EnableIRQ>

}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000

080036e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e6:	f107 0310 	add.w	r3, r7, #16
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <MX_GPIO_Init+0xa8>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4a23      	ldr	r2, [pc, #140]	; (8003788 <MX_GPIO_Init+0xa8>)
 80036fa:	f043 0310 	orr.w	r3, r3, #16
 80036fe:	6193      	str	r3, [r2, #24]
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <MX_GPIO_Init+0xa8>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <MX_GPIO_Init+0xa8>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <MX_GPIO_Init+0xa8>)
 8003712:	f043 0320 	orr.w	r3, r3, #32
 8003716:	6193      	str	r3, [r2, #24]
 8003718:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <MX_GPIO_Init+0xa8>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <MX_GPIO_Init+0xa8>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <MX_GPIO_Init+0xa8>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	6193      	str	r3, [r2, #24]
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <MX_GPIO_Init+0xa8>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <MX_GPIO_Init+0xa8>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4a11      	ldr	r2, [pc, #68]	; (8003788 <MX_GPIO_Init+0xa8>)
 8003742:	f043 0308 	orr.w	r3, r3, #8
 8003746:	6193      	str	r3, [r2, #24]
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <MX_GPIO_Init+0xa8>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800375a:	480c      	ldr	r0, [pc, #48]	; (800378c <MX_GPIO_Init+0xac>)
 800375c:	f003 f820 	bl	80067a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8003760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003766:	2301      	movs	r3, #1
 8003768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	2302      	movs	r3, #2
 8003770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8003772:	f107 0310 	add.w	r3, r7, #16
 8003776:	4619      	mov	r1, r3
 8003778:	4804      	ldr	r0, [pc, #16]	; (800378c <MX_GPIO_Init+0xac>)
 800377a:	f002 fe8d 	bl	8006498 <HAL_GPIO_Init>

}
 800377e:	bf00      	nop
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	40011000 	.word	0x40011000

08003790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003794:	b672      	cpsid	i
}
 8003796:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003798:	e7fe      	b.n	8003798 <Error_Handler+0x8>
	...

0800379c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_MspInit+0x5c>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <HAL_MspInit+0x5c>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6193      	str	r3, [r2, #24]
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_MspInit+0x5c>)
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	60bb      	str	r3, [r7, #8]
 80037b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_MspInit+0x5c>)
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <HAL_MspInit+0x5c>)
 80037c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c4:	61d3      	str	r3, [r2, #28]
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_MspInit+0x5c>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_MspInit+0x60>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_MspInit+0x60>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ee:	bf00      	nop
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40010000 	.word	0x40010000

08003800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <HAL_ADC_MspInit+0xc0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d14a      	bne.n	80038b6 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003820:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_ADC_MspInit+0xc4>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_ADC_MspInit+0xc4>)
 8003826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800382a:	6193      	str	r3, [r2, #24]
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <HAL_ADC_MspInit+0xc4>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <HAL_ADC_MspInit+0xc4>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_ADC_MspInit+0xc4>)
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	6193      	str	r3, [r2, #24]
 8003844:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <HAL_ADC_MspInit+0xc4>)
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003850:	237c      	movs	r3, #124	; 0x7c
 8003852:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003854:	2303      	movs	r3, #3
 8003856:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	f107 0310 	add.w	r3, r7, #16
 800385c:	4619      	mov	r1, r3
 800385e:	481a      	ldr	r0, [pc, #104]	; (80038c8 <HAL_ADC_MspInit+0xc8>)
 8003860:	f002 fe1a 	bl	8006498 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <HAL_ADC_MspInit+0xd0>)
 8003868:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 800386c:	2200      	movs	r2, #0
 800386e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003870:	4b16      	ldr	r3, [pc, #88]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 800387e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003882:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 8003886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800388a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 800388e:	2220      	movs	r2, #32
 8003890:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 8003894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003898:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800389a:	480c      	ldr	r0, [pc, #48]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 800389c:	f002 fb8c 	bl	8005fb8 <HAL_DMA_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80038a6:	f7ff ff73 	bl	8003790 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 80038ae:	621a      	str	r2, [r3, #32]
 80038b0:	4a06      	ldr	r2, [pc, #24]	; (80038cc <HAL_ADC_MspInit+0xcc>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038b6:	bf00      	nop
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40012400 	.word	0x40012400
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010800 	.word	0x40010800
 80038cc:	2000078c 	.word	0x2000078c
 80038d0:	40020008 	.word	0x40020008

080038d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0310 	add.w	r3, r7, #16
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <HAL_I2C_MspInit+0xdc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d159      	bne.n	80039a8 <HAL_I2C_MspInit+0xd4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f4:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <HAL_I2C_MspInit+0xe0>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4a2e      	ldr	r2, [pc, #184]	; (80039b4 <HAL_I2C_MspInit+0xe0>)
 80038fa:	f043 0308 	orr.w	r3, r3, #8
 80038fe:	6193      	str	r3, [r2, #24]
 8003900:	4b2c      	ldr	r3, [pc, #176]	; (80039b4 <HAL_I2C_MspInit+0xe0>)
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800390c:	23c0      	movs	r3, #192	; 0xc0
 800390e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003910:	2312      	movs	r3, #18
 8003912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003914:	2303      	movs	r3, #3
 8003916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	4619      	mov	r1, r3
 800391e:	4826      	ldr	r0, [pc, #152]	; (80039b8 <HAL_I2C_MspInit+0xe4>)
 8003920:	f002 fdba 	bl	8006498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_I2C_MspInit+0xe0>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_I2C_MspInit+0xe0>)
 800392a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800392e:	61d3      	str	r3, [r2, #28]
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_I2C_MspInit+0xe0>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 800393e:	4a20      	ldr	r2, [pc, #128]	; (80039c0 <HAL_I2C_MspInit+0xec>)
 8003940:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003942:	4b1e      	ldr	r3, [pc, #120]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 8003944:	2200      	movs	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003948:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800395a:	4b18      	ldr	r3, [pc, #96]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 800395c:	2200      	movs	r2, #0
 800395e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 8003962:	2200      	movs	r2, #0
 8003964:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003966:	4b15      	ldr	r3, [pc, #84]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 8003968:	2200      	movs	r2, #0
 800396a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800396c:	4813      	ldr	r0, [pc, #76]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 800396e:	f002 fb23 	bl	8005fb8 <HAL_DMA_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8003978:	f7ff ff0a 	bl	8003790 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
 8003982:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <HAL_I2C_MspInit+0xe8>)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003988:	2200      	movs	r2, #0
 800398a:	2100      	movs	r1, #0
 800398c:	201f      	movs	r0, #31
 800398e:	f002 fadc 	bl	8005f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003992:	201f      	movs	r0, #31
 8003994:	f002 faf5 	bl	8005f82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003998:	2200      	movs	r2, #0
 800399a:	2100      	movs	r1, #0
 800399c:	2020      	movs	r0, #32
 800399e:	f002 fad4 	bl	8005f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80039a2:	2020      	movs	r0, #32
 80039a4:	f002 faed 	bl	8005f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039a8:	bf00      	nop
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40005400 	.word	0x40005400
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40010c00 	.word	0x40010c00
 80039bc:	200007d0 	.word	0x200007d0
 80039c0:	40020080 	.word	0x40020080

080039c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d135      	bne.n	8003a42 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039d6:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	4a35      	ldr	r2, [pc, #212]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	61d3      	str	r3, [r2, #28]
 80039e2:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80039ee:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 80039f0:	4a31      	ldr	r2, [pc, #196]	; (8003ab8 <HAL_TIM_Base_MspInit+0xf4>)
 80039f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 80039f6:	2210      	movs	r2, #16
 80039f8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80039fa:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003a00:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a06:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a0c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a14:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003a1c:	4b25      	ldr	r3, [pc, #148]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003a24:	4823      	ldr	r0, [pc, #140]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a26:	f002 fac7 	bl	8005fb8 <HAL_DMA_Init>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8003a30:	f7ff feae 	bl	8003790 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
 8003a3a:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <HAL_TIM_Base_MspInit+0xf0>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a40:	e032      	b.n	8003aa8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1d      	ldr	r2, [pc, #116]	; (8003abc <HAL_TIM_Base_MspInit+0xf8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d114      	bne.n	8003a76 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a4c:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	61d3      	str	r3, [r2, #28]
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2100      	movs	r1, #0
 8003a68:	201d      	movs	r0, #29
 8003a6a:	f002 fa6e 	bl	8005f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003a6e:	201d      	movs	r0, #29
 8003a70:	f002 fa87 	bl	8005f82 <HAL_NVIC_EnableIRQ>
}
 8003a74:	e018      	b.n	8003aa8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM4)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <HAL_TIM_Base_MspInit+0xfc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d113      	bne.n	8003aa8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	61d3      	str	r3, [r2, #28]
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_TIM_Base_MspInit+0xec>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	201e      	movs	r0, #30
 8003a9e:	f002 fa54 	bl	8005f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003aa2:	201e      	movs	r0, #30
 8003aa4:	f002 fa6d 	bl	8005f82 <HAL_NVIC_EnableIRQ>
}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	20000634 	.word	0x20000634
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800

08003ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d12a      	bne.n	8003b3a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_TIM_MspPostInit+0x80>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	4a16      	ldr	r2, [pc, #88]	; (8003b44 <HAL_TIM_MspPostInit+0x80>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6193      	str	r3, [r2, #24]
 8003af0:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_TIM_MspPostInit+0x80>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b06:	2303      	movs	r3, #3
 8003b08:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0a:	f107 030c 	add.w	r3, r7, #12
 8003b0e:	4619      	mov	r1, r3
 8003b10:	480d      	ldr	r0, [pc, #52]	; (8003b48 <HAL_TIM_MspPostInit+0x84>)
 8003b12:	f002 fcc1 	bl	8006498 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_TIM_MspPostInit+0x88>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <HAL_TIM_MspPostInit+0x88>)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40010800 	.word	0x40010800
 8003b4c:	40010000 	.word	0x40010000

08003b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b54:	e7fe      	b.n	8003b54 <NMI_Handler+0x4>

08003b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5a:	e7fe      	b.n	8003b5a <HardFault_Handler+0x4>

08003b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b60:	e7fe      	b.n	8003b60 <MemManage_Handler+0x4>

08003b62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b66:	e7fe      	b.n	8003b66 <BusFault_Handler+0x4>

08003b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b6c:	e7fe      	b.n	8003b6c <UsageFault_Handler+0x4>

08003b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b96:	f001 fcff 	bl	8005598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <DMA1_Channel1_IRQHandler+0x10>)
 8003ba6:	f002 fb37 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000078c 	.word	0x2000078c

08003bb4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <DMA1_Channel5_IRQHandler+0x10>)
 8003bba:	f002 fb2d 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000634 	.word	0x20000634

08003bc8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <DMA1_Channel7_IRQHandler+0x10>)
 8003bce:	f002 fb23 	bl	8006218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200007d0 	.word	0x200007d0

08003bdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <TIM3_IRQHandler+0x10>)
 8003be2:	f006 fc11 	bl	800a408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000714 	.word	0x20000714

08003bf0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bf4:	4802      	ldr	r0, [pc, #8]	; (8003c00 <TIM4_IRQHandler+0x10>)
 8003bf6:	f006 fc07 	bl	800a408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000678 	.word	0x20000678

08003c04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c08:	4802      	ldr	r0, [pc, #8]	; (8003c14 <I2C1_EV_IRQHandler+0x10>)
 8003c0a:	f003 fc2e 	bl	800746a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200006c0 	.word	0x200006c0

08003c18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c1c:	4802      	ldr	r0, [pc, #8]	; (8003c28 <I2C1_ER_IRQHandler+0x10>)
 8003c1e:	f003 fd95 	bl	800774c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200006c0 	.word	0x200006c0

08003c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
	return 1;
 8003c30:	2301      	movs	r3, #1
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr

08003c3a <_kill>:

int _kill(int pid, int sig)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c44:	f007 faa6 	bl	800b194 <__errno>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2216      	movs	r2, #22
 8003c4c:	601a      	str	r2, [r3, #0]
	return -1;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <_exit>:

void _exit (int status)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c62:	f04f 31ff 	mov.w	r1, #4294967295
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffe7 	bl	8003c3a <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c6c:	e7fe      	b.n	8003c6c <_exit+0x12>
	...

08003c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <_sbrk+0x5c>)
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <_sbrk+0x60>)
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <_sbrk+0x64>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <_sbrk+0x64>)
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <_sbrk+0x68>)
 8003c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c92:	4b10      	ldr	r3, [pc, #64]	; (8003cd4 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d207      	bcs.n	8003cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca0:	f007 fa78 	bl	800b194 <__errno>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	220c      	movs	r2, #12
 8003ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	e009      	b.n	8003cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <_sbrk+0x64>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <_sbrk+0x64>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_sbrk+0x64>)
 8003cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20005000 	.word	0x20005000
 8003cd0:	00000400 	.word	0x00000400
 8003cd4:	20000170 	.word	0x20000170
 8003cd8:	20000880 	.word	0x20000880

08003cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <_Z13ws2812_setLEDiiii>:
uint16_t BUF_DMA [ARRAY_LEN] = {0};
uint8_t LED_Data[LED_COUNT][4];
extern TIM_HandleTypeDef htim2;

void ws2812_setLED(int LEDnum, int Red, int Green, int Blue)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	b2d9      	uxtb	r1, r3
 8003cfa:	4a10      	ldr	r2, [pc, #64]	; (8003d3c <_Z13ws2812_setLEDiiii+0x54>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	b2d9      	uxtb	r1, r3
 8003d06:	4a0d      	ldr	r2, [pc, #52]	; (8003d3c <_Z13ws2812_setLEDiiii+0x54>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	460a      	mov	r2, r1
 8003d10:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	b2d9      	uxtb	r1, r3
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <_Z13ws2812_setLEDiiii+0x54>)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	460a      	mov	r2, r1
 8003d20:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	b2d9      	uxtb	r1, r3
 8003d26:	4a05      	ldr	r2, [pc, #20]	; (8003d3c <_Z13ws2812_setLEDiiii+0x54>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	460a      	mov	r2, r1
 8003d30:	70da      	strb	r2, [r3, #3]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	200005c8 	.word	0x200005c8

08003d40 <_Z11ws2812_initv>:

void ws2812_init(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
  for(uint16_t i=0;i<ARRAY_LEN;i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	80fb      	strh	r3, [r7, #6]
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	f240 2229 	movw	r2, #553	; 0x229
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d808      	bhi.n	8003d66 <_Z11ws2812_initv+0x26>
	  BUF_DMA[i] = 0;
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	4a06      	ldr	r2, [pc, #24]	; (8003d70 <_Z11ws2812_initv+0x30>)
 8003d58:	2100      	movs	r1, #0
 8003d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(uint16_t i=0;i<ARRAY_LEN;i++)
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	3301      	adds	r3, #1
 8003d62:	80fb      	strh	r3, [r7, #6]
 8003d64:	e7f1      	b.n	8003d4a <_Z11ws2812_initv+0xa>
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	20000174 	.word	0x20000174

08003d74 <_Z12ws1212_setup9Telemetry>:

void ws1212_setup(Telemetry telemetry)
{
 8003d74:	b084      	sub	sp, #16
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b088      	sub	sp, #32
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8003d80:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t brightness = 30;
 8003d84:	231e      	movs	r3, #30
 8003d86:	72fb      	strb	r3, [r7, #11]
	for(uint8_t i=0;i<LED_COUNT;i+=5)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	7ffb      	ldrb	r3, [r7, #31]
 8003d8e:	2b14      	cmp	r3, #20
 8003d90:	d85f      	bhi.n	8003e52 <_Z12ws1212_setup9Telemetry+0xde>
	{
		int16_t tmp = telemetry.led[i/5];
 8003d92:	7ffb      	ldrb	r3, [r7, #31]
 8003d94:	4a5e      	ldr	r2, [pc, #376]	; (8003f10 <_Z12ws1212_setup9Telemetry+0x19c>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	089b      	lsrs	r3, r3, #2
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3328      	adds	r3, #40	; 0x28
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003da6:	4413      	add	r3, r2
 8003da8:	885b      	ldrh	r3, [r3, #2]
 8003daa:	813b      	strh	r3, [r7, #8]
		for(uint8_t j =i;j<i+5;j++)
 8003dac:	7ffb      	ldrb	r3, [r7, #31]
 8003dae:	77bb      	strb	r3, [r7, #30]
 8003db0:	7ffb      	ldrb	r3, [r7, #31]
 8003db2:	1d1a      	adds	r2, r3, #4
 8003db4:	7fbb      	ldrb	r3, [r7, #30]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	db47      	blt.n	8003e4a <_Z12ws1212_setup9Telemetry+0xd6>
		{
			uint8_t led = (tmp >> (3*(j-i))) & 7;
 8003dba:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8003dbe:	7fba      	ldrb	r2, [r7, #30]
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	fa41 f303 	asr.w	r3, r1, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	71fb      	strb	r3, [r7, #7]
			if(led == 0)
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <_Z12ws1212_setup9Telemetry+0x74>
				ws2812_setLED(j, 0, 0, 0);
 8003ddc:	7fb8      	ldrb	r0, [r7, #30]
 8003dde:	2300      	movs	r3, #0
 8003de0:	2200      	movs	r2, #0
 8003de2:	2100      	movs	r1, #0
 8003de4:	f7ff ff80 	bl	8003ce8 <_Z13ws2812_setLEDiiii>
			if(led == 0b100)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d105      	bne.n	8003dfa <_Z12ws1212_setup9Telemetry+0x86>
				ws2812_setLED(j, brightness, 0, 0);
 8003dee:	7fb8      	ldrb	r0, [r7, #30]
 8003df0:	7af9      	ldrb	r1, [r7, #11]
 8003df2:	2300      	movs	r3, #0
 8003df4:	2200      	movs	r2, #0
 8003df6:	f7ff ff77 	bl	8003ce8 <_Z13ws2812_setLEDiiii>
			if(led == 0b010)
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d105      	bne.n	8003e0c <_Z12ws1212_setup9Telemetry+0x98>
				ws2812_setLED(j, 0, brightness, 0);
 8003e00:	7fb8      	ldrb	r0, [r7, #30]
 8003e02:	7afa      	ldrb	r2, [r7, #11]
 8003e04:	2300      	movs	r3, #0
 8003e06:	2100      	movs	r1, #0
 8003e08:	f7ff ff6e 	bl	8003ce8 <_Z13ws2812_setLEDiiii>
			if(led == 0b001)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <_Z12ws1212_setup9Telemetry+0xaa>
				ws2812_setLED(j, 0, 0, brightness);
 8003e12:	7fb8      	ldrb	r0, [r7, #30]
 8003e14:	7afb      	ldrb	r3, [r7, #11]
 8003e16:	2200      	movs	r2, #0
 8003e18:	2100      	movs	r1, #0
 8003e1a:	f7ff ff65 	bl	8003ce8 <_Z13ws2812_setLEDiiii>
			if(led == 0b110)
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	2b06      	cmp	r3, #6
 8003e22:	d105      	bne.n	8003e30 <_Z12ws1212_setup9Telemetry+0xbc>
				ws2812_setLED(j, brightness, brightness, 0);
 8003e24:	7fb8      	ldrb	r0, [r7, #30]
 8003e26:	7af9      	ldrb	r1, [r7, #11]
 8003e28:	7afa      	ldrb	r2, [r7, #11]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f7ff ff5c 	bl	8003ce8 <_Z13ws2812_setLEDiiii>
			if(led == 0b111)
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	2b07      	cmp	r3, #7
 8003e34:	d105      	bne.n	8003e42 <_Z12ws1212_setup9Telemetry+0xce>
				ws2812_setLED(j, brightness, brightness, brightness);
 8003e36:	7fb8      	ldrb	r0, [r7, #30]
 8003e38:	7af9      	ldrb	r1, [r7, #11]
 8003e3a:	7afa      	ldrb	r2, [r7, #11]
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
 8003e3e:	f7ff ff53 	bl	8003ce8 <_Z13ws2812_setLEDiiii>
		for(uint8_t j =i;j<i+5;j++)
 8003e42:	7fbb      	ldrb	r3, [r7, #30]
 8003e44:	3301      	adds	r3, #1
 8003e46:	77bb      	strb	r3, [r7, #30]
 8003e48:	e7b2      	b.n	8003db0 <_Z12ws1212_setup9Telemetry+0x3c>
	for(uint8_t i=0;i<LED_COUNT;i+=5)
 8003e4a:	7ffb      	ldrb	r3, [r7, #31]
 8003e4c:	3305      	adds	r3, #5
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e79c      	b.n	8003d8c <_Z12ws1212_setup9Telemetry+0x18>
		}
	}

	uint32_t indx=0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
	uint32_t color;

	for (int i= 0; i<LED_COUNT; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b14      	cmp	r3, #20
 8003e5e:	dc37      	bgt.n	8003ed0 <_Z12ws1212_setup9Telemetry+0x15c>
	{
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8003e60:	4a2c      	ldr	r2, [pc, #176]	; (8003f14 <_Z12ws1212_setup9Telemetry+0x1a0>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	785b      	ldrb	r3, [r3, #1]
 8003e6a:	041a      	lsls	r2, r3, #16
 8003e6c:	4929      	ldr	r1, [pc, #164]	; (8003f14 <_Z12ws1212_setup9Telemetry+0x1a0>)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	789b      	ldrb	r3, [r3, #2]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	4926      	ldr	r1, [pc, #152]	; (8003f14 <_Z12ws1212_setup9Telemetry+0x1a0>)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	78db      	ldrb	r3, [r3, #3]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	603b      	str	r3, [r7, #0]
		for (int i=23; i>=0; i--)
 8003e88:	2317      	movs	r3, #23
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	db1a      	blt.n	8003ec8 <_Z12ws1212_setup9Telemetry+0x154>
		{
			if (color&(1<<i))
 8003e92:	2201      	movs	r2, #1
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <_Z12ws1212_setup9Telemetry+0x13c>
				BUF_DMA[indx] = HIGH;
 8003ea4:	4a1c      	ldr	r2, [pc, #112]	; (8003f18 <_Z12ws1212_setup9Telemetry+0x1a4>)
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	213c      	movs	r1, #60	; 0x3c
 8003eaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003eae:	e004      	b.n	8003eba <_Z12ws1212_setup9Telemetry+0x146>
			else
				BUF_DMA[indx] = LOW;
 8003eb0:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <_Z12ws1212_setup9Telemetry+0x1a4>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	211e      	movs	r1, #30
 8003eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	61bb      	str	r3, [r7, #24]
		for (int i=23; i>=0; i--)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e7e1      	b.n	8003e8c <_Z12ws1212_setup9Telemetry+0x118>
	for (int i= 0; i<LED_COUNT; i++)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e7c4      	b.n	8003e5a <_Z12ws1212_setup9Telemetry+0xe6>
		}
	}
	for (int i=0; i<50; i++)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b31      	cmp	r3, #49	; 0x31
 8003ed8:	dc0b      	bgt.n	8003ef2 <_Z12ws1212_setup9Telemetry+0x17e>
	{
		BUF_DMA[indx] = 0;
 8003eda:	4a0f      	ldr	r2, [pc, #60]	; (8003f18 <_Z12ws1212_setup9Telemetry+0x1a4>)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<50; i++)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3301      	adds	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e7f0      	b.n	8003ed4 <_Z12ws1212_setup9Telemetry+0x160>
	}
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)BUF_DMA, indx);
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	4a08      	ldr	r2, [pc, #32]	; (8003f18 <_Z12ws1212_setup9Telemetry+0x1a4>)
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4808      	ldr	r0, [pc, #32]	; (8003f1c <_Z12ws1212_setup9Telemetry+0x1a8>)
 8003efc:	f006 f82c 	bl	8009f58 <HAL_TIM_PWM_Start_DMA>
}
 8003f00:	bf00      	nop
 8003f02:	3720      	adds	r7, #32
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f0a:	b004      	add	sp, #16
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	cccccccd 	.word	0xcccccccd
 8003f14:	200005c8 	.word	0x200005c8
 8003f18:	20000174 	.word	0x20000174
 8003f1c:	20000814 	.word	0x20000814

08003f20 <ili9488_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt); }

//-----------------------------------------------------------------------------
void ili9488_Init(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  if((Is_ili9488_Initialized & ILI9488_LCD_INITIALIZED) == 0)
 8003f24:	4b40      	ldr	r3, [pc, #256]	; (8004028 <ili9488_Init+0x108>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d115      	bne.n	8003f5c <ili9488_Init+0x3c>
  {
    Is_ili9488_Initialized |= ILI9488_LCD_INITIALIZED;
 8003f30:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <ili9488_Init+0x108>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <ili9488_Init+0x108>)
 8003f3c:	701a      	strb	r2, [r3, #0]
    if((Is_ili9488_Initialized & ILI9488_IO_INITIALIZED) == 0)
 8003f3e:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <ili9488_Init+0x108>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <ili9488_Init+0x2e>
      LCD_IO_Init();
 8003f4a:	f000 fb61 	bl	8004610 <LCD_IO_Init>
    Is_ili9488_Initialized |= ILI9488_IO_INITIALIZED;
 8003f4e:	4b36      	ldr	r3, [pc, #216]	; (8004028 <ili9488_Init+0x108>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	f043 0302 	orr.w	r3, r3, #2
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	4b33      	ldr	r3, [pc, #204]	; (8004028 <ili9488_Init+0x108>)
 8003f5a:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(105);
 8003f5c:	2069      	movs	r0, #105	; 0x69
 8003f5e:	f000 fb41 	bl	80045e4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SWRESET);
 8003f62:	2001      	movs	r0, #1
 8003f64:	f000 fbb8 	bl	80046d8 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8003f68:	2005      	movs	r0, #5
 8003f6a:	f000 fb3b 	bl	80045e4 <LCD_Delay>
  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRP1, (uint8_t *)"\x00\x03\x09\x08\x16\x0A\x3F\x78\x4C\x09\x0A\x08\x16\x1A\x0F", 15);
 8003f6e:	220f      	movs	r2, #15
 8003f70:	492e      	ldr	r1, [pc, #184]	; (800402c <ili9488_Init+0x10c>)
 8003f72:	20e0      	movs	r0, #224	; 0xe0
 8003f74:	f000 fca2 	bl	80048bc <LCD_IO_WriteCmd8MultipleData8>
  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9488_GMCTRN1, (uint8_t *)"\x00\x16\x19\x03\x0F\x05\x32\x45\x46\x04\x0E\x0D\x35\x37\x0F", 15);
 8003f78:	220f      	movs	r2, #15
 8003f7a:	492d      	ldr	r1, [pc, #180]	; (8004030 <ili9488_Init+0x110>)
 8003f7c:	20e1      	movs	r0, #225	; 0xe1
 8003f7e:	f000 fc9d 	bl	80048bc <LCD_IO_WriteCmd8MultipleData8>
  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8003f82:	2202      	movs	r2, #2
 8003f84:	492b      	ldr	r1, [pc, #172]	; (8004034 <ili9488_Init+0x114>)
 8003f86:	20c0      	movs	r0, #192	; 0xc0
 8003f88:	f000 fc98 	bl	80048bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8003f8c:	2005      	movs	r0, #5
 8003f8e:	f000 fb29 	bl	80045e4 <LCD_Delay>
  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8(ILI9488_PWCTR2); LCD_IO_WriteData8(0x41);
 8003f92:	20c1      	movs	r0, #193	; 0xc1
 8003f94:	f000 fba0 	bl	80046d8 <LCD_IO_WriteCmd8>
 8003f98:	2041      	movs	r0, #65	; 0x41
 8003f9a:	f000 fbcd 	bl	8004738 <LCD_IO_WriteData8>
  LCD_Delay(5);
 8003f9e:	2005      	movs	r0, #5
 8003fa0:	f000 fb20 	bl	80045e4 <LCD_Delay>
  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9488_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	4924      	ldr	r1, [pc, #144]	; (8004038 <ili9488_Init+0x118>)
 8003fa8:	20c5      	movs	r0, #197	; 0xc5
 8003faa:	f000 fc87 	bl	80048bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8003fae:	2005      	movs	r0, #5
 8003fb0:	f000 fb18 	bl	80045e4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x80); // Interface Mode Control (SDO NOT USE)
  #else
  LCD_IO_WriteCmd8(ILI9488_IMCTR); LCD_IO_WriteData8(0x00); // Interface Mode Control (SDO USE)
  #endif
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_PIXFMT); LCD_IO_WriteData8(0x55); // Interface Pixel Format (16 bit)
 8003fb4:	203a      	movs	r0, #58	; 0x3a
 8003fb6:	f000 fb8f 	bl	80046d8 <LCD_IO_WriteCmd8>
 8003fba:	2055      	movs	r0, #85	; 0x55
 8003fbc:	f000 fbbc 	bl	8004738 <LCD_IO_WriteData8>
  #endif
  LCD_IO_WriteCmd8(ILI9488_FRMCTR1); LCD_IO_WriteData8(0xA0); // Frame rate (60Hz)
 8003fc0:	20b1      	movs	r0, #177	; 0xb1
 8003fc2:	f000 fb89 	bl	80046d8 <LCD_IO_WriteCmd8>
 8003fc6:	20a0      	movs	r0, #160	; 0xa0
 8003fc8:	f000 fbb6 	bl	8004738 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_INVCTR); LCD_IO_WriteData8(0x02); // Display Inversion Control (2-dot)
 8003fcc:	20b4      	movs	r0, #180	; 0xb4
 8003fce:	f000 fb83 	bl	80046d8 <LCD_IO_WriteCmd8>
 8003fd2:	2002      	movs	r0, #2
 8003fd4:	f000 fbb0 	bl	8004738 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_DFUNCTR, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8003fd8:	2202      	movs	r2, #2
 8003fda:	4918      	ldr	r1, [pc, #96]	; (800403c <ili9488_Init+0x11c>)
 8003fdc:	20b6      	movs	r0, #182	; 0xb6
 8003fde:	f000 fc6d 	bl	80048bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8(ILI9488_IMGFUNCT); LCD_IO_WriteData8(0x00); // Set Image Functio (Disable 24 bit data)
 8003fe2:	20e9      	movs	r0, #233	; 0xe9
 8003fe4:	f000 fb78 	bl	80046d8 <LCD_IO_WriteCmd8>
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f000 fba5 	bl	8004738 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9488_ADJCTR3, (uint8_t *)"\xA9\x51\x2C\x82", 4); // Adjust Control (D7 stream, loose)
 8003fee:	2204      	movs	r2, #4
 8003ff0:	4913      	ldr	r1, [pc, #76]	; (8004040 <ili9488_Init+0x120>)
 8003ff2:	20f7      	movs	r0, #247	; 0xf7
 8003ff4:	f000 fc62 	bl	80048bc <LCD_IO_WriteCmd8MultipleData8>
  LCD_Delay(5);
 8003ff8:	2005      	movs	r0, #5
 8003ffa:	f000 faf3 	bl	80045e4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Exit Sleep
 8003ffe:	2011      	movs	r0, #17
 8004000:	f000 fb6a 	bl	80046d8 <LCD_IO_WriteCmd8>
  LCD_Delay(120);
 8004004:	2078      	movs	r0, #120	; 0x78
 8004006:	f000 faed 	bl	80045e4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_DISPON);      // Display on
 800400a:	2029      	movs	r0, #41	; 0x29
 800400c:	f000 fb64 	bl	80046d8 <LCD_IO_WriteCmd8>
  LCD_Delay(5);
 8004010:	2005      	movs	r0, #5
 8004012:	f000 fae7 	bl	80045e4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 8004016:	2036      	movs	r0, #54	; 0x36
 8004018:	f000 fb5e 	bl	80046d8 <LCD_IO_WriteCmd8>
 800401c:	2028      	movs	r0, #40	; 0x28
 800401e:	f000 fb8b 	bl	8004738 <LCD_IO_WriteData8>
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	2000061c 	.word	0x2000061c
 800402c:	0800bd84 	.word	0x0800bd84
 8004030:	0800bd94 	.word	0x0800bd94
 8004034:	0800bda4 	.word	0x0800bda4
 8004038:	0800bda8 	.word	0x0800bda8
 800403c:	0800bdac 	.word	0x0800bdac
 8004040:	0800bdb0 	.word	0x0800bdb0

08004044 <ili9488_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOn(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPOUT);      // Display on
 8004048:	2011      	movs	r0, #17
 800404a:	f000 fb45 	bl	80046d8 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(1);
 800404e:	2001      	movs	r0, #1
 8004050:	f000 fad3 	bl	80045fa <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}

08004058 <ili9488_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9488_DisplayOff(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  ILI9488_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9488_SLPIN);       // Display off
 800405c:	2010      	movs	r0, #16
 800405e:	f000 fb3b 	bl	80046d8 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8004062:	2000      	movs	r0, #0
 8004064:	f000 fac9 	bl	80045fa <LCD_IO_Bl_OnOff>
  ILI9488_LCDMUTEX_POP();
}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}

0800406c <ili9488_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9488_GetLcdPixelWidth(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  return ILI9488_MAX_X + 1;
 8004070:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <ili9488_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9488_GetLcdPixelHeight(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return ILI9488_MAX_Y + 1;
 8004080:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8004084:	4618      	mov	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <ili9488_ReadID>:
  * @brief  Get the ILI9488 ID.
  * @param  None
  * @retval The ILI9488 ID
  */
uint16_t ili9488_ReadID(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
  uint32_t id = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();

  if(Is_ili9488_Initialized == 0)
 8004096:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <ili9488_ReadID+0x3c>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <ili9488_ReadID+0x16>
  {
    ili9488_Init();
 800409e:	f7ff ff3f 	bl	8003f20 <ili9488_Init>

  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 0);
  id <<= 1;
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData8(0x04, (uint8_t *)&id, 3, 1);
 80040a2:	1d39      	adds	r1, r7, #4
 80040a4:	2301      	movs	r3, #1
 80040a6:	2203      	movs	r2, #3
 80040a8:	2004      	movs	r0, #4
 80040aa:	f000 fcb5 	bl	8004a18 <LCD_IO_ReadCmd8MultipleData8>
  #endif
  // printf("ID:%08X\r\n", (unsigned int)id);

  ILI9488_LCDMUTEX_POP();

  if(id == 0x00668054)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a06      	ldr	r2, [pc, #24]	; (80040cc <ili9488_ReadID+0x40>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d102      	bne.n	80040bc <ili9488_ReadID+0x30>
    return 0x9488;
 80040b6:	f249 4388 	movw	r3, #38024	; 0x9488
 80040ba:	e000      	b.n	80040be <ili9488_ReadID+0x32>
  return 0;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2000061c 	.word	0x2000061c
 80040cc:	00668054 	.word	0x00668054

080040d0 <ili9488_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9488_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	460a      	mov	r2, r1
 80040da:	80fb      	strh	r3, [r7, #6]
 80040dc:	4613      	mov	r3, r2
 80040de:	80bb      	strh	r3, [r7, #4]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 80040e0:	202a      	movs	r0, #42	; 0x2a
 80040e2:	f000 faf9 	bl	80046d8 <LCD_IO_WriteCmd8>
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	0a1b      	lsrs	r3, r3, #8
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fb22 	bl	8004738 <LCD_IO_WriteData8>
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fb1d 	bl	8004738 <LCD_IO_WriteData8>
 80040fe:	88fb      	ldrh	r3, [r7, #6]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	b29b      	uxth	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fb16 	bl	8004738 <LCD_IO_WriteData8>
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fb11 	bl	8004738 <LCD_IO_WriteData8>
 8004116:	202b      	movs	r0, #43	; 0x2b
 8004118:	f000 fade 	bl	80046d8 <LCD_IO_WriteCmd8>
 800411c:	88bb      	ldrh	r3, [r7, #4]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	b29b      	uxth	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fb07 	bl	8004738 <LCD_IO_WriteData8>
 800412a:	88bb      	ldrh	r3, [r7, #4]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fb02 	bl	8004738 <LCD_IO_WriteData8>
 8004134:	88bb      	ldrh	r3, [r7, #4]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	b29b      	uxth	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4618      	mov	r0, r3
 800413e:	f000 fafb 	bl	8004738 <LCD_IO_WriteData8>
 8004142:	88bb      	ldrh	r3, [r7, #4]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	f000 faf6 	bl	8004738 <LCD_IO_WriteData8>
  ILI9488_LCDMUTEX_POP();
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <ili9488_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9488_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	80fb      	strh	r3, [r7, #6]
 800415e:	460b      	mov	r3, r1
 8004160:	80bb      	strh	r3, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	807b      	strh	r3, [r7, #2]
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 8004166:	202a      	movs	r0, #42	; 0x2a
 8004168:	f000 fab6 	bl	80046d8 <LCD_IO_WriteCmd8>
 800416c:	88fb      	ldrh	r3, [r7, #6]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	b29b      	uxth	r3, r3
 8004172:	b2db      	uxtb	r3, r3
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fadf 	bl	8004738 <LCD_IO_WriteData8>
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fada 	bl	8004738 <LCD_IO_WriteData8>
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	b29b      	uxth	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fad3 	bl	8004738 <LCD_IO_WriteData8>
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4618      	mov	r0, r3
 8004198:	f000 face 	bl	8004738 <LCD_IO_WriteData8>
 800419c:	202b      	movs	r0, #43	; 0x2b
 800419e:	f000 fa9b 	bl	80046d8 <LCD_IO_WriteCmd8>
 80041a2:	88bb      	ldrh	r3, [r7, #4]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fac4 	bl	8004738 <LCD_IO_WriteData8>
 80041b0:	88bb      	ldrh	r3, [r7, #4]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fabf 	bl	8004738 <LCD_IO_WriteData8>
 80041ba:	88bb      	ldrh	r3, [r7, #4]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fab8 	bl	8004738 <LCD_IO_WriteData8>
 80041c8:	88bb      	ldrh	r3, [r7, #4]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fab3 	bl	8004738 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
  ili9488_write16to24(RGBCode);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_RAMWR); LCD_IO_WriteData16(RGBCode);
 80041d2:	202c      	movs	r0, #44	; 0x2c
 80041d4:	f000 fa80 	bl	80046d8 <LCD_IO_WriteCmd8>
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 fad4 	bl	8004788 <LCD_IO_WriteData16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <ili9488_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9488_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	460a      	mov	r2, r1
 80041f2:	80fb      	strh	r3, [r7, #6]
 80041f4:	4613      	mov	r3, r2
 80041f6:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9488_LCDMUTEX_PUSH();
  ILI9488_SETCURSOR(Xpos, Ypos);
 80041f8:	202a      	movs	r0, #42	; 0x2a
 80041fa:	f000 fa6d 	bl	80046d8 <LCD_IO_WriteCmd8>
 80041fe:	88fb      	ldrh	r3, [r7, #6]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	b29b      	uxth	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fa96 	bl	8004738 <LCD_IO_WriteData8>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa91 	bl	8004738 <LCD_IO_WriteData8>
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	0a1b      	lsrs	r3, r3, #8
 800421a:	b29b      	uxth	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fa8a 	bl	8004738 <LCD_IO_WriteData8>
 8004224:	88fb      	ldrh	r3, [r7, #6]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fa85 	bl	8004738 <LCD_IO_WriteData8>
 800422e:	202b      	movs	r0, #43	; 0x2b
 8004230:	f000 fa52 	bl	80046d8 <LCD_IO_WriteCmd8>
 8004234:	88bb      	ldrh	r3, [r7, #4]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	b29b      	uxth	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fa7b 	bl	8004738 <LCD_IO_WriteData8>
 8004242:	88bb      	ldrh	r3, [r7, #4]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fa76 	bl	8004738 <LCD_IO_WriteData8>
 800424c:	88bb      	ldrh	r3, [r7, #4]
 800424e:	0a1b      	lsrs	r3, r3, #8
 8004250:	b29b      	uxth	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fa6f 	bl	8004738 <LCD_IO_WriteData8>
 800425a:	88bb      	ldrh	r3, [r7, #4]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fa6a 	bl	8004738 <LCD_IO_WriteData8>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, &ret, 1, 1);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, &ret, 1, 1);
 8004264:	f107 010e 	add.w	r1, r7, #14
 8004268:	2301      	movs	r3, #1
 800426a:	2201      	movs	r2, #1
 800426c:	202e      	movs	r0, #46	; 0x2e
 800426e:	f000 fc39 	bl	8004ae4 <LCD_IO_ReadCmd8MultipleData16>
  #endif
  ILI9488_LCDMUTEX_POP();
  return ret;
 8004272:	89fb      	ldrh	r3, [r7, #14]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <ili9488_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9488_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4604      	mov	r4, r0
 8004284:	4608      	mov	r0, r1
 8004286:	4611      	mov	r1, r2
 8004288:	461a      	mov	r2, r3
 800428a:	4623      	mov	r3, r4
 800428c:	80fb      	strh	r3, [r7, #6]
 800428e:	4603      	mov	r3, r0
 8004290:	80bb      	strh	r3, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	807b      	strh	r3, [r7, #2]
 8004296:	4613      	mov	r3, r2
 8004298:	803b      	strh	r3, [r7, #0]
  #elif ILI9488_INTERFACE == 1
  #if (LCD_ORIENTATION == 0)
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Width - Xpos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Xpos);
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
  #elif (LCD_ORIENTATION == 1)
  LCD_IO_WriteCmd8(ILI9488_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800429a:	202a      	movs	r0, #42	; 0x2a
 800429c:	f000 fa1c 	bl	80046d8 <LCD_IO_WriteCmd8>
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fa45 	bl	8004738 <LCD_IO_WriteData8>
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fa40 	bl	8004738 <LCD_IO_WriteData8>
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	887b      	ldrh	r3, [r7, #2]
 80042bc:	4413      	add	r3, r2
 80042be:	3b01      	subs	r3, #1
 80042c0:	121b      	asrs	r3, r3, #8
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fa37 	bl	8004738 <LCD_IO_WriteData8>
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	887b      	ldrh	r3, [r7, #2]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fa2c 	bl	8004738 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80042e0:	202b      	movs	r0, #43	; 0x2b
 80042e2:	f000 f9f9 	bl	80046d8 <LCD_IO_WriteCmd8>
 80042e6:	88bb      	ldrh	r3, [r7, #4]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa22 	bl	8004738 <LCD_IO_WriteData8>
 80042f4:	88bb      	ldrh	r3, [r7, #4]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fa1d 	bl	8004738 <LCD_IO_WriteData8>
 80042fe:	88ba      	ldrh	r2, [r7, #4]
 8004300:	883b      	ldrh	r3, [r7, #0]
 8004302:	4413      	add	r3, r2
 8004304:	3b01      	subs	r3, #1
 8004306:	121b      	asrs	r3, r3, #8
 8004308:	b2db      	uxtb	r3, r3
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fa14 	bl	8004738 <LCD_IO_WriteData8>
 8004310:	88bb      	ldrh	r3, [r7, #4]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	883b      	ldrh	r3, [r7, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4413      	add	r3, r2
 800431a:	b2db      	uxtb	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fa09 	bl	8004738 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9488_PASET); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - Height - Ypos); LCD_IO_WriteData16_to_2x8(ILI9488_LCD_PIXEL_WIDTH - 1 - Ypos);
  #endif
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bd90      	pop	{r4, r7, pc}

0800432e <ili9488_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800432e:	b590      	push	{r4, r7, lr}
 8004330:	b085      	sub	sp, #20
 8004332:	af02      	add	r7, sp, #8
 8004334:	4604      	mov	r4, r0
 8004336:	4608      	mov	r0, r1
 8004338:	4611      	mov	r1, r2
 800433a:	461a      	mov	r2, r3
 800433c:	4623      	mov	r3, r4
 800433e:	80fb      	strh	r3, [r7, #6]
 8004340:	4603      	mov	r3, r0
 8004342:	80bb      	strh	r3, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	807b      	strh	r3, [r7, #2]
 8004348:	4613      	mov	r3, r2
 800434a:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, Length, 1, RGBCode);
 800434c:	883a      	ldrh	r2, [r7, #0]
 800434e:	8879      	ldrh	r1, [r7, #2]
 8004350:	88b8      	ldrh	r0, [r7, #4]
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2301      	movs	r3, #1
 8004358:	f000 f820 	bl	800439c <ili9488_FillRect>
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	bd90      	pop	{r4, r7, pc}

08004364 <ili9488_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9488_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004364:	b590      	push	{r4, r7, lr}
 8004366:	b085      	sub	sp, #20
 8004368:	af02      	add	r7, sp, #8
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	4611      	mov	r1, r2
 8004370:	461a      	mov	r2, r3
 8004372:	4623      	mov	r3, r4
 8004374:	80fb      	strh	r3, [r7, #6]
 8004376:	4603      	mov	r3, r0
 8004378:	80bb      	strh	r3, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	807b      	strh	r3, [r7, #2]
 800437e:	4613      	mov	r3, r2
 8004380:	803b      	strh	r3, [r7, #0]
  ili9488_FillRect(Xpos, Ypos, 1, Length, RGBCode);
 8004382:	883a      	ldrh	r2, [r7, #0]
 8004384:	8879      	ldrh	r1, [r7, #2]
 8004386:	88b8      	ldrh	r0, [r7, #4]
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	2201      	movs	r2, #1
 8004390:	f000 f804 	bl	800439c <ili9488_FillRect>
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	bd90      	pop	{r4, r7, pc}

0800439c <ili9488_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9488_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	80fb      	strh	r3, [r7, #6]
 80043ae:	4603      	mov	r3, r0
 80043b0:	80bb      	strh	r3, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	807b      	strh	r3, [r7, #2]
 80043b6:	4613      	mov	r3, r2
 80043b8:	803b      	strh	r3, [r7, #0]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80043ba:	883b      	ldrh	r3, [r7, #0]
 80043bc:	887a      	ldrh	r2, [r7, #2]
 80043be:	88b9      	ldrh	r1, [r7, #4]
 80043c0:	88f8      	ldrh	r0, [r7, #6]
 80043c2:	f7ff ff5b 	bl	800427c <ili9488_SetDisplayWindow>
  LCD_IO_WriteCmd8(ILI9488_RAMWR);
  uint32_t XYsize = Xsize * Ysize;
  while(XYsize--)
    ili9488_write16to24(RGBCode);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8DataFill16(ILI9488_RAMWR, RGBCode, Xsize * Ysize);
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	883a      	ldrh	r2, [r7, #0]
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	461a      	mov	r2, r3
 80043d0:	8b3b      	ldrh	r3, [r7, #24]
 80043d2:	4619      	mov	r1, r3
 80043d4:	202c      	movs	r0, #44	; 0x2c
 80043d6:	f000 fa13 	bl	8004800 <LCD_IO_WriteCmd8DataFill16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}

080043e2 <ili9488_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9488_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	4603      	mov	r3, r0
 80043ea:	603a      	str	r2, [r7, #0]
 80043ec:	80fb      	strh	r3, [r7, #6]
 80043ee:	460b      	mov	r3, r1
 80043f0:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
  /* Read bitmap size */
  Ypos += pbmp[22] + (pbmp[23] << 8) - 1;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	3316      	adds	r3, #22
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b29a      	uxth	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	3317      	adds	r3, #23
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	b29b      	uxth	r3, r3
 800440e:	4413      	add	r3, r2
 8004410:	b29a      	uxth	r2, r3
 8004412:	88bb      	ldrh	r3, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	80bb      	strh	r3, [r7, #4]
  size = *(volatile uint16_t *) (pbmp + 2);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	3302      	adds	r3, #2
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	60bb      	str	r3, [r7, #8]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	3304      	adds	r3, #4
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	461a      	mov	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	330a      	adds	r3, #10
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	60fb      	str	r3, [r7, #12]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	041b      	lsls	r3, r3, #16
 800444c:	461a      	mov	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  size = (size - index)/2;
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	60bb      	str	r3, [r7, #8]
  pbmp += index;
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	603b      	str	r3, [r7, #0]
    ili9488_write16to24(*(uint16_t *)pbmp);
    pbmp+= 2;
  }
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_UP);
 8004466:	2036      	movs	r0, #54	; 0x36
 8004468:	f000 f936 	bl	80046d8 <LCD_IO_WriteCmd8>
 800446c:	2068      	movs	r0, #104	; 0x68
 800446e:	f000 f963 	bl	8004738 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, (uint16_t *)pbmp, size);
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	202c      	movs	r0, #44	; 0x2c
 8004478:	f000 fa6c 	bl	8004954 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9488_MADCTL); LCD_IO_WriteData8(ILI9488_MAD_DATA_RIGHT_THEN_DOWN);
 800447c:	2036      	movs	r0, #54	; 0x36
 800447e:	f000 f92b 	bl	80046d8 <LCD_IO_WriteCmd8>
 8004482:	2028      	movs	r0, #40	; 0x28
 8004484:	f000 f958 	bl	8004738 <LCD_IO_WriteData8>
  #endif

  ILI9488_LCDMUTEX_POP();
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <ili9488_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	4604      	mov	r4, r0
 8004498:	4608      	mov	r0, r1
 800449a:	4611      	mov	r1, r2
 800449c:	461a      	mov	r2, r3
 800449e:	4623      	mov	r3, r4
 80044a0:	80fb      	strh	r3, [r7, #6]
 80044a2:	4603      	mov	r3, r0
 80044a4:	80bb      	strh	r3, [r7, #4]
 80044a6:	460b      	mov	r3, r1
 80044a8:	807b      	strh	r3, [r7, #2]
 80044aa:	4613      	mov	r3, r2
 80044ac:	803b      	strh	r3, [r7, #0]
  uint32_t size;

  size = (Xsize * Ysize);
 80044ae:	887b      	ldrh	r3, [r7, #2]
 80044b0:	883a      	ldrh	r2, [r7, #0]
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	60fb      	str	r3, [r7, #12]

  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80044b8:	883b      	ldrh	r3, [r7, #0]
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	88b9      	ldrh	r1, [r7, #4]
 80044be:	88f8      	ldrh	r0, [r7, #6]
 80044c0:	f7ff fedc 	bl	800427c <ili9488_SetDisplayWindow>
  {
    ili9488_write16to24(*pdata);
    pdata++;
  }
  #elif ILI9488_INTERFACE == 1
  LCD_IO_WriteCmd8MultipleData16(ILI9488_RAMWR, pdata, size);
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	6a39      	ldr	r1, [r7, #32]
 80044c8:	202c      	movs	r0, #44	; 0x2c
 80044ca:	f000 fa43 	bl	8004954 <LCD_IO_WriteCmd8MultipleData16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd90      	pop	{r4, r7, pc}

080044d6 <ili9488_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9488_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pdata)
{
 80044d6:	b590      	push	{r4, r7, lr}
 80044d8:	b085      	sub	sp, #20
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4604      	mov	r4, r0
 80044de:	4608      	mov	r0, r1
 80044e0:	4611      	mov	r1, r2
 80044e2:	461a      	mov	r2, r3
 80044e4:	4623      	mov	r3, r4
 80044e6:	80fb      	strh	r3, [r7, #6]
 80044e8:	4603      	mov	r3, r0
 80044ea:	80bb      	strh	r3, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	807b      	strh	r3, [r7, #2]
 80044f0:	4613      	mov	r3, r2
 80044f2:	803b      	strh	r3, [r7, #0]
  uint32_t size = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
  size = (Xsize * Ysize);
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	883a      	ldrh	r2, [r7, #0]
 80044fc:	fb02 f303 	mul.w	r3, r2, r3
 8004500:	60fb      	str	r3, [r7, #12]
  ILI9488_LCDMUTEX_PUSH();
  ili9488_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8004502:	883b      	ldrh	r3, [r7, #0]
 8004504:	887a      	ldrh	r2, [r7, #2]
 8004506:	88b9      	ldrh	r1, [r7, #4]
 8004508:	88f8      	ldrh	r0, [r7, #6]
 800450a:	f7ff feb7 	bl	800427c <ili9488_SetDisplayWindow>
  #if ILI9488_INTERFACE == 0
  LCD_IO_ReadCmd8MultipleData24to16(ILI9488_RAMRD, pdata, size, 1);
  #elif ILI9488_INTERFACE == 1
  LCD_IO_ReadCmd8MultipleData16(ILI9488_RAMRD, pdata, size, 1);
 800450e:	2301      	movs	r3, #1
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	6a39      	ldr	r1, [r7, #32]
 8004514:	202e      	movs	r0, #46	; 0x2e
 8004516:	f000 fae5 	bl	8004ae4 <LCD_IO_ReadCmd8MultipleData16>
  #endif
  ILI9488_LCDMUTEX_POP();
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	bd90      	pop	{r4, r7, pc}
	...

08004524 <ili9488_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9488_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	80fb      	strh	r3, [r7, #6]
 800452e:	460b      	mov	r3, r1
 8004530:	80bb      	strh	r3, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9488_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 8004536:	4b29      	ldr	r3, [pc, #164]	; (80045dc <ili9488_Scroll+0xb8>)
 8004538:	885b      	ldrh	r3, [r3, #2]
 800453a:	88ba      	ldrh	r2, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d104      	bne.n	800454a <ili9488_Scroll+0x26>
 8004540:	4b26      	ldr	r3, [pc, #152]	; (80045dc <ili9488_Scroll+0xb8>)
 8004542:	88db      	ldrh	r3, [r3, #6]
 8004544:	887a      	ldrh	r2, [r7, #2]
 8004546:	429a      	cmp	r2, r3
 8004548:	d013      	beq.n	8004572 <ili9488_Scroll+0x4e>
  {
    scrparam[1] = TopFix;
 800454a:	4a24      	ldr	r2, [pc, #144]	; (80045dc <ili9488_Scroll+0xb8>)
 800454c:	88bb      	ldrh	r3, [r7, #4]
 800454e:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 8004550:	4a22      	ldr	r2, [pc, #136]	; (80045dc <ili9488_Scroll+0xb8>)
 8004552:	887b      	ldrh	r3, [r7, #2]
 8004554:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9488_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 8004556:	88ba      	ldrh	r2, [r7, #4]
 8004558:	887b      	ldrh	r3, [r7, #2]
 800455a:	4413      	add	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	f5c3 73f0 	rsb	r3, r3, #480	; 0x1e0
 8004562:	b29a      	uxth	r2, r3
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <ili9488_Scroll+0xb8>)
 8004566:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9488_VSCRDEF, &scrparam[1], 3);
 8004568:	2203      	movs	r2, #3
 800456a:	491d      	ldr	r1, [pc, #116]	; (80045e0 <ili9488_Scroll+0xbc>)
 800456c:	2033      	movs	r0, #51	; 0x33
 800456e:	f000 f9f1 	bl	8004954 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 8004572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004576:	425b      	negs	r3, r3
 8004578:	4a18      	ldr	r2, [pc, #96]	; (80045dc <ili9488_Scroll+0xb8>)
 800457a:	8892      	ldrh	r2, [r2, #4]
 800457c:	fb93 f1f2 	sdiv	r1, r3, r2
 8004580:	fb02 f201 	mul.w	r2, r2, r1
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8004588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800458c:	2b00      	cmp	r3, #0
 800458e:	da0a      	bge.n	80045a6 <ili9488_Scroll+0x82>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <ili9488_Scroll+0xb8>)
 8004592:	889a      	ldrh	r2, [r3, #4]
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	4413      	add	r3, r2
 8004598:	b29a      	uxth	r2, r3
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <ili9488_Scroll+0xb8>)
 800459c:	885b      	ldrh	r3, [r3, #2]
 800459e:	4413      	add	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	80fb      	strh	r3, [r7, #6]
 80045a4:	e005      	b.n	80045b2 <ili9488_Scroll+0x8e>
  else
    Scroll = Scroll + scrparam[1];
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <ili9488_Scroll+0xb8>)
 80045a8:	885a      	ldrh	r2, [r3, #2]
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	4413      	add	r3, r2
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 80045b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <ili9488_Scroll+0xb8>)
 80045b8:	8812      	ldrh	r2, [r2, #0]
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <ili9488_Scroll+0xae>
  {
    scrparam[0] = Scroll;
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <ili9488_Scroll+0xb8>)
 80045c2:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9488_VSCRSADD, scrparam[0], 1);
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <ili9488_Scroll+0xb8>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	4619      	mov	r1, r3
 80045cc:	2037      	movs	r0, #55	; 0x37
 80045ce:	f000 f917 	bl	8004800 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9488_LCDMUTEX_POP();
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000620 	.word	0x20000620
 80045e0:	20000622 	.word	0x20000622

080045e4 <LCD_Delay>:
#pragma pop
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 ffef 	bl	80055d0 <HAL_Delay>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	4603      	mov	r3, r0
 8004602:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr
	...

08004610 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  #define GPIOX_CLOCK_LCD_RD    GPIOX_CLOCK(LCD_RD)
  #else
  #define GPIOX_CLOCK_LCD_RD    0
  #endif
	
  RCC->APB2ENR |= (GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_WR) |
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <LCD_IO_Init+0xa8>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	4a27      	ldr	r2, [pc, #156]	; (80046b8 <LCD_IO_Init+0xa8>)
 800461a:	f043 030c 	orr.w	r3, r3, #12
 800461e:	6193      	str	r3, [r2, #24]
                   GPIOX_CLOCK(LCD_D0) | GPIOX_CLOCK(LCD_D1) | GPIOX_CLOCK(LCD_D2) | GPIOX_CLOCK(LCD_D3) |
                   GPIOX_CLOCK(LCD_D4) | GPIOX_CLOCK(LCD_D5) | GPIOX_CLOCK(LCD_D6) | GPIOX_CLOCK(LCD_D7) |
                   GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL  | GPIOX_CLOCK_LCD_RD);
	
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_RST_OFF;                          // RST = 1
 8004620:	4b26      	ldr	r3, [pc, #152]	; (80046bc <LCD_IO_Init+0xac>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_RST);
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <LCD_IO_Init+0xb0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 030f 	bic.w	r3, r3, #15
 800462e:	4a24      	ldr	r2, [pc, #144]	; (80046c0 <LCD_IO_Init+0xb0>)
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A    /* backlight */
  GPIOX_MODE(MODE_PP_OUT_2MHZ, LCD_BL);
  LCD_IO_Bl_OnOff(1);
  #endif

  GPIOX_ODR(LCD_CS) = 1;                /* CS = 1 */
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <LCD_IO_Init+0xb4>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]
  LCD_RS_DATA;                          /* RS = 1 */
 800463c:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <LCD_IO_Init+0xb8>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_WR) = 1;                /* WR = 1 */
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <LCD_IO_Init+0xbc>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_RD) = 1;                /* RD = 1 */
 8004648:	4b21      	ldr	r3, [pc, #132]	; (80046d0 <LCD_IO_Init+0xc0>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
  #endif

  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_CS);
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <LCD_IO_Init+0xb0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004656:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <LCD_IO_Init+0xb0>)
 8004658:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800465c:	6013      	str	r3, [r2, #0]
  #if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RD);
 800465e:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <LCD_IO_Init+0xb0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004666:	4a16      	ldr	r2, [pc, #88]	; (80046c0 <LCD_IO_Init+0xb0>)
 8004668:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800466c:	6013      	str	r3, [r2, #0]
  #endif
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_WR);
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <LCD_IO_Init+0xc4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004676:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <LCD_IO_Init+0xc4>)
 8004678:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800467c:	6013      	str	r3, [r2, #0]
  GPIOX_MODE(MODE_PP_OUT_50MHZ, LCD_RS);
 800467e:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <LCD_IO_Init+0xc4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 030f 	bic.w	r3, r3, #15
 8004686:	4a13      	ldr	r2, [pc, #76]	; (80046d4 <LCD_IO_Init+0xc4>)
 8004688:	f043 0303 	orr.w	r3, r3, #3
 800468c:	6013      	str	r3, [r2, #0]

  LCD_DIRWRITE;                         /* data pins set the output direction */
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <LCD_IO_Init+0xb0>)
 8004690:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004694:	605a      	str	r2, [r3, #4]

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8004696:	2001      	movs	r0, #1
 8004698:	f7ff ffa4 	bl	80045e4 <LCD_Delay>
  LCD_RST_ON;                           /* RST = 0 */
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <LCD_IO_Init+0xac>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 80046a2:	2001      	movs	r0, #1
 80046a4:	f7ff ff9e 	bl	80045e4 <LCD_Delay>
  LCD_RST_OFF;                          /* RST = 1 */
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <LCD_IO_Init+0xac>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f7ff ff98 	bl	80045e4 <LCD_Delay>
  ADCX->SMPR2 |= TS_SAMPLETIME << (3 * (TS_YP_ADCCH));
  #endif
  ADCX->CR2 |= ADC_CR2_CAL;
  while(ADCX->CR2 & ADC_CR2_CAL);
  #endif /* #if TS_ADC > 0 */
}
 80046b4:	bf00      	nop
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	42218180 	.word	0x42218180
 80046c0:	40010c00 	.word	0x40010c00
 80046c4:	42218194 	.word	0x42218194
 80046c8:	42210180 	.word	0x42210180
 80046cc:	42210184 	.word	0x42210184
 80046d0:	42218184 	.word	0x42218184
 80046d4:	40010800 	.word	0x40010800

080046d8 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	4603      	mov	r3, r0
 80046e0:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <LCD_IO_WriteCmd8+0x4c>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <LCD_IO_WriteCmd8+0x50>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	4a0f      	ldr	r2, [pc, #60]	; (800472c <LCD_IO_WriteCmd8+0x54>)
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	7013      	strb	r3, [r2, #0]
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <LCD_IO_WriteCmd8+0x54>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <LCD_IO_WriteCmd8+0x58>)
 8004700:	611a      	str	r2, [r3, #16]
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <LCD_IO_WriteCmd8+0x5c>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <LCD_IO_WriteCmd8+0x5c>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <LCD_IO_WriteCmd8+0x50>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <LCD_IO_WriteCmd8+0x4c>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	42218194 	.word	0x42218194
 8004728:	42210180 	.word	0x42210180
 800472c:	2000085c 	.word	0x2000085c
 8004730:	40010c00 	.word	0x40010c00
 8004734:	42210184 	.word	0x42210184

08004738 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	71fb      	strb	r3, [r7, #7]
  LCD_CS_ON;
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <LCD_IO_WriteData8+0x40>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
  LCD_DATA8_WRITE(Data);
 8004748:	4a0c      	ldr	r2, [pc, #48]	; (800477c <LCD_IO_WriteData8+0x44>)
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	7013      	strb	r3, [r2, #0]
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <LCD_IO_WriteData8+0x44>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <LCD_IO_WriteData8+0x48>)
 800475a:	611a      	str	r2, [r3, #16]
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <LCD_IO_WriteData8+0x4c>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <LCD_IO_WriteData8+0x4c>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <LCD_IO_WriteData8+0x40>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	42218194 	.word	0x42218194
 800477c:	2000085c 	.word	0x2000085c
 8004780:	40010c00 	.word	0x40010c00
 8004784:	42210184 	.word	0x42210184

08004788 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	4603      	mov	r3, r0
 8004790:	80fb      	strh	r3, [r7, #6]
  LCD_CS_ON;
 8004792:	4b17      	ldr	r3, [pc, #92]	; (80047f0 <LCD_IO_WriteData16+0x68>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
  LCD_DATA16_WRITE(Data);
 8004798:	88fb      	ldrh	r3, [r7, #6]
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	b29b      	uxth	r3, r3
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <LCD_IO_WriteData16+0x6c>)
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <LCD_IO_WriteData16+0x6c>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <LCD_IO_WriteData16+0x70>)
 80047b0:	611a      	str	r2, [r3, #16]
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <LCD_IO_WriteData16+0x74>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	4b10      	ldr	r3, [pc, #64]	; (80047fc <LCD_IO_WriteData16+0x74>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	88fb      	ldrh	r3, [r7, #6]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <LCD_IO_WriteData16+0x6c>)
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <LCD_IO_WriteData16+0x6c>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <LCD_IO_WriteData16+0x70>)
 80047d2:	611a      	str	r2, [r3, #16]
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <LCD_IO_WriteData16+0x74>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	4b08      	ldr	r3, [pc, #32]	; (80047fc <LCD_IO_WriteData16+0x74>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <LCD_IO_WriteData16+0x68>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	42218194 	.word	0x42218194
 80047f4:	2000085c 	.word	0x2000085c
 80047f8:	40010c00 	.word	0x40010c00
 80047fc:	42210184 	.word	0x42210184

08004800 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	603a      	str	r2, [r7, #0]
 800480a:	71fb      	strb	r3, [r7, #7]
 800480c:	460b      	mov	r3, r1
 800480e:	80bb      	strh	r3, [r7, #4]
  LCD_CS_ON;
 8004810:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <LCD_IO_WriteCmd8DataFill16+0xa8>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8004816:	4b25      	ldr	r3, [pc, #148]	; (80048ac <LCD_IO_WriteCmd8DataFill16+0xac>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	4a24      	ldr	r2, [pc, #144]	; (80048b0 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	7013      	strb	r3, [r2, #0]
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 800482e:	611a      	str	r2, [r3, #16]
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <LCD_IO_WriteCmd8DataFill16+0xac>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]
  while(Size--)
 8004842:	e023      	b.n	800488c <LCD_IO_WriteCmd8DataFill16+0x8c>
  {
    LCD_DATA16_WRITE(Data);
 8004844:	88bb      	ldrh	r3, [r7, #4]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	b29b      	uxth	r3, r3
 800484a:	b2da      	uxtb	r2, r3
 800484c:	4b18      	ldr	r3, [pc, #96]	; (80048b0 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800485a:	4b16      	ldr	r3, [pc, #88]	; (80048b4 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 800485c:	611a      	str	r2, [r3, #16]
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	88bb      	ldrh	r3, [r7, #4]
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <LCD_IO_WriteCmd8DataFill16+0xb0>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <LCD_IO_WriteCmd8DataFill16+0xb4>)
 800487e:	611a      	str	r2, [r3, #16]
 8004880:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <LCD_IO_WriteCmd8DataFill16+0xb8>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
  while(Size--)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	603a      	str	r2, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1d6      	bne.n	8004844 <LCD_IO_WriteCmd8DataFill16+0x44>
  }
  LCD_CS_OFF;
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <LCD_IO_WriteCmd8DataFill16+0xa8>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	42218194 	.word	0x42218194
 80048ac:	42210180 	.word	0x42210180
 80048b0:	2000085c 	.word	0x2000085c
 80048b4:	40010c00 	.word	0x40010c00
 80048b8:	42210184 	.word	0x42210184

080048bc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <LCD_IO_WriteCmd8MultipleData8+0x84>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 80048d0:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <LCD_IO_WriteCmd8MultipleData8+0x88>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	7013      	strb	r3, [r2, #0]
 80048dc:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <LCD_IO_WriteCmd8MultipleData8+0x90>)
 80048e8:	611a      	str	r2, [r3, #16]
 80048ea:	4b19      	ldr	r3, [pc, #100]	; (8004950 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	4b17      	ldr	r3, [pc, #92]	; (8004950 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <LCD_IO_WriteCmd8MultipleData8+0x88>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  while(Size--)
 80048fc:	e013      	b.n	8004926 <LCD_IO_WriteCmd8MultipleData8+0x6a>
  {
    LCD_DATA8_WRITE(*pData);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <LCD_IO_WriteCmd8MultipleData8+0x8c>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <LCD_IO_WriteCmd8MultipleData8+0x90>)
 8004912:	611a      	str	r2, [r3, #16]
 8004914:	4b0e      	ldr	r3, [pc, #56]	; (8004950 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <LCD_IO_WriteCmd8MultipleData8+0x94>)
 800491c:	2201      	movs	r2, #1
 800491e:	601a      	str	r2, [r3, #0]
    pData ++;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	3301      	adds	r3, #1
 8004924:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e6      	bne.n	80048fe <LCD_IO_WriteCmd8MultipleData8+0x42>
  }
  LCD_CS_OFF;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <LCD_IO_WriteCmd8MultipleData8+0x84>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	42218194 	.word	0x42218194
 8004944:	42210180 	.word	0x42210180
 8004948:	2000085c 	.word	0x2000085c
 800494c:	40010c00 	.word	0x40010c00
 8004950:	42210184 	.word	0x42210184

08004954 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	73fb      	strb	r3, [r7, #15]
  LCD_CS_ON;
 8004962:	4b28      	ldr	r3, [pc, #160]	; (8004a04 <LCD_IO_WriteCmd8MultipleData16+0xb0>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <LCD_IO_WriteCmd8MultipleData16+0xb4>)
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	4a27      	ldr	r2, [pc, #156]	; (8004a0c <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	7013      	strb	r3, [r2, #0]
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 8004980:	611a      	str	r2, [r3, #16]
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <LCD_IO_WriteCmd8MultipleData16+0xb4>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
  while(Size--)
 8004994:	e028      	b.n	80049e8 <LCD_IO_WriteCmd8MultipleData16+0x94>
  {
    LCD_DATA16_WRITE(*pData);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	0a1b      	lsrs	r3, r3, #8
 800499c:	b29b      	uxth	r3, r3
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	021b      	lsls	r3, r3, #8
 80049aa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80049ae:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 80049b0:	611a      	str	r2, [r3, #16]
 80049b2:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <LCD_IO_WriteCmd8MultipleData16+0xb8>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <LCD_IO_WriteCmd8MultipleData16+0xbc>)
 80049d4:	611a      	str	r2, [r3, #16]
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <LCD_IO_WriteCmd8MultipleData16+0xc0>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
    pData ++;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3302      	adds	r3, #2
 80049e6:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1e5a      	subs	r2, r3, #1
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1d1      	bne.n	8004996 <LCD_IO_WriteCmd8MultipleData16+0x42>
  }
  LCD_CS_OFF;
 80049f2:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <LCD_IO_WriteCmd8MultipleData16+0xb0>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
}
 80049f8:	bf00      	nop
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	42218194 	.word	0x42218194
 8004a08:	42210180 	.word	0x42210180
 8004a0c:	2000085c 	.word	0x2000085c
 8004a10:	40010c00 	.word	0x40010c00
 8004a14:	42210184 	.word	0x42210184

08004a18 <LCD_IO_ReadCmd8MultipleData8>:
}

//-----------------------------------------------------------------------------
#if GPIOX_PORTNUM(LCD_RD) >=  GPIOX_PORTNUM_A
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]
  uint8_t  d;
  LCD_CS_ON;
 8004a28:	4b28      	ldr	r3, [pc, #160]	; (8004acc <LCD_IO_ReadCmd8MultipleData8+0xb4>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8004a2e:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <LCD_IO_ReadCmd8MultipleData8+0xb8>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <LCD_IO_ReadCmd8MultipleData8+0xbc>)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	7013      	strb	r3, [r2, #0]
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <LCD_IO_ReadCmd8MultipleData8+0xbc>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8004a46:	611a      	str	r2, [r3, #16]
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	4b23      	ldr	r3, [pc, #140]	; (8004adc <LCD_IO_ReadCmd8MultipleData8+0xc4>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <LCD_IO_ReadCmd8MultipleData8+0xb8>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8004a5c:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8004a60:	605a      	str	r2, [r3, #4]
  while(DummySize--)
 8004a62:	e008      	b.n	8004a76 <LCD_IO_ReadCmd8MultipleData8+0x5e>
    LCD_DUMMY_READ;
 8004a64:	4b1e      	ldr	r3, [pc, #120]	; (8004ae0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	1e5a      	subs	r2, r3, #1
 8004a7a:	603a      	str	r2, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f1      	bne.n	8004a64 <LCD_IO_ReadCmd8MultipleData8+0x4c>
  while(Size--)
 8004a80:	e012      	b.n	8004aa8 <LCD_IO_ReadCmd8MultipleData8+0x90>
  {
    LCD_DATA8_READ(d);
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0a1b      	lsrs	r3, r3, #8
 8004a94:	75fb      	strb	r3, [r7, #23]
 8004a96:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <LCD_IO_ReadCmd8MultipleData8+0xc8>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
    *pData = d;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	7dfa      	ldrb	r2, [r7, #23]
 8004aa0:	701a      	strb	r2, [r3, #0]
    pData++;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1e5a      	subs	r2, r3, #1
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e7      	bne.n	8004a82 <LCD_IO_ReadCmd8MultipleData8+0x6a>
  }
  LCD_CS_OFF;
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <LCD_IO_ReadCmd8MultipleData8+0xb4>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <LCD_IO_ReadCmd8MultipleData8+0xc0>)
 8004aba:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004abe:	605a      	str	r2, [r3, #4]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	42218194 	.word	0x42218194
 8004ad0:	42210180 	.word	0x42210180
 8004ad4:	2000085c 	.word	0x2000085c
 8004ad8:	40010c00 	.word	0x40010c00
 8004adc:	42210184 	.word	0x42210184
 8004ae0:	42218184 	.word	0x42218184

08004ae4 <LCD_IO_ReadCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	4603      	mov	r3, r0
 8004af2:	73fb      	strb	r3, [r7, #15]
  uint8_t  dl, dh;
  LCD_CS_ON;
 8004af4:	4b32      	ldr	r3, [pc, #200]	; (8004bc0 <LCD_IO_ReadCmd8MultipleData16+0xdc>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	601a      	str	r2, [r3, #0]
  LCD_CMD8_WRITE(Cmd);
 8004afa:	4b32      	ldr	r3, [pc, #200]	; (8004bc4 <LCD_IO_ReadCmd8MultipleData16+0xe0>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	4a31      	ldr	r2, [pc, #196]	; (8004bc8 <LCD_IO_ReadCmd8MultipleData16+0xe4>)
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	7013      	strb	r3, [r2, #0]
 8004b06:	4b30      	ldr	r3, [pc, #192]	; (8004bc8 <LCD_IO_ReadCmd8MultipleData16+0xe4>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8004b10:	4b2e      	ldr	r3, [pc, #184]	; (8004bcc <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8004b12:	611a      	str	r2, [r3, #16]
 8004b14:	4b2e      	ldr	r3, [pc, #184]	; (8004bd0 <LCD_IO_ReadCmd8MultipleData16+0xec>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <LCD_IO_ReadCmd8MultipleData16+0xec>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <LCD_IO_ReadCmd8MultipleData16+0xe0>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
  LCD_DIRREAD;
 8004b26:	4b29      	ldr	r3, [pc, #164]	; (8004bcc <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8004b28:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8004b2c:	605a      	str	r2, [r3, #4]
  while(DummySize--)
 8004b2e:	e008      	b.n	8004b42 <LCD_IO_ReadCmd8MultipleData16+0x5e>
    LCD_DUMMY_READ;
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	4b25      	ldr	r3, [pc, #148]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
  while(DummySize--)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	1e5a      	subs	r2, r3, #1
 8004b46:	603a      	str	r2, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f1      	bne.n	8004b30 <LCD_IO_ReadCmd8MultipleData16+0x4c>

  while(Size--)
 8004b4c:	e026      	b.n	8004b9c <LCD_IO_ReadCmd8MultipleData16+0xb8>
  {
    LCD_DATA16_READ(dh, dl);
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	4b1f      	ldr	r3, [pc, #124]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	4b1c      	ldr	r3, [pc, #112]	; (8004bcc <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	75fb      	strb	r3, [r7, #23]
 8004b62:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	75bb      	strb	r3, [r7, #22]
 8004b7c:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <LCD_IO_ReadCmd8MultipleData16+0xf0>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	601a      	str	r2, [r3, #0]
    *pData = (dh << 8) | dl;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	b21a      	sxth	r2, r3
 8004b88:	7dbb      	ldrb	r3, [r7, #22]
 8004b8a:	b21b      	sxth	r3, r3
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	b21b      	sxth	r3, r3
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	801a      	strh	r2, [r3, #0]
    pData++;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	3302      	adds	r3, #2
 8004b9a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1e5a      	subs	r2, r3, #1
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1d3      	bne.n	8004b4e <LCD_IO_ReadCmd8MultipleData16+0x6a>
  }
  LCD_CS_OFF;
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <LCD_IO_ReadCmd8MultipleData16+0xdc>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
  LCD_DIRWRITE;
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <LCD_IO_ReadCmd8MultipleData16+0xe8>)
 8004bae:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004bb2:	605a      	str	r2, [r3, #4]
}
 8004bb4:	bf00      	nop
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bc80      	pop	{r7}
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	42218194 	.word	0x42218194
 8004bc4:	42210180 	.word	0x42210180
 8004bc8:	2000085c 	.word	0x2000085c
 8004bcc:	40010c00 	.word	0x40010c00
 8004bd0:	42210184 	.word	0x42210184
 8004bd4:	42218184 	.word	0x42218184

08004bd8 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <BSP_LCD_Init+0x34>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8004bea:	4b09      	ldr	r3, [pc, #36]	; (8004c10 <BSP_LCD_Init+0x38>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <BSP_LCD_Init+0x38>)
 8004bf2:	f64f 221f 	movw	r2, #64031	; 0xfa1f
 8004bf6:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f000 f85b 	bl	8004cb4 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8004c02:	79fb      	ldrb	r3, [r7, #7]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	2000004c 	.word	0x2000004c
 8004c10:	20000860 	.word	0x20000860

08004c14 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <BSP_LCD_GetXSize+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	4798      	blx	r3
 8004c20:	4603      	mov	r3, r0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	2000004c 	.word	0x2000004c

08004c2c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <BSP_LCD_GetYSize+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	4798      	blx	r3
 8004c38:	4603      	mov	r3, r0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	2000004c 	.word	0x2000004c

08004c44 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <BSP_LCD_SetTextColor+0x1c>)
 8004c52:	6013      	str	r3, [r2, #0]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000860 	.word	0x20000860

08004c64 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	4a03      	ldr	r2, [pc, #12]	; (8004c80 <BSP_LCD_SetBackColor+0x1c>)
 8004c72:	6053      	str	r3, [r2, #4]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000860 	.word	0x20000860

08004c84 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(const GFXfont *pFonts)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	DrawProp.pFont = (GFXfont *)pFonts;
 8004c8c:	4a03      	ldr	r2, [pc, #12]	; (8004c9c <BSP_LCD_SetFont+0x18>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6093      	str	r3, [r2, #8]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	20000860 	.word	0x20000860

08004ca0 <BSP_LCD_GetFont>:
  * @brief  Gets the LCD text font.
  * @param  None
  * @retval Used font
  */
GFXfont  *BSP_LCD_GetFont(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8004ca4:	4b02      	ldr	r3, [pc, #8]	; (8004cb0 <BSP_LCD_GetFont+0x10>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	20000860 	.word	0x20000860

08004cb4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8004cb4:	b5b0      	push	{r4, r5, r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	4603      	mov	r3, r0
 8004cbc:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <BSP_LCD_Clear+0x38>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004cc4:	f7ff ffa6 	bl	8004c14 <BSP_LCD_GetXSize>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	461d      	mov	r5, r3
 8004ccc:	f7ff ffae 	bl	8004c2c <BSP_LCD_GetYSize>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	462a      	mov	r2, r5
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2000      	movs	r0, #0
 8004ce0:	47a0      	blx	r4
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cea:	bf00      	nop
 8004cec:	2000004c 	.word	0x2000004c

08004cf0 <BSP_LCD_Draw_Text>:


void BSP_LCD_Draw_Text(uint8_t* Text, uint16_t X, uint16_t Y, uint16_t Size)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	4608      	mov	r0, r1
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4603      	mov	r3, r0
 8004d00:	817b      	strh	r3, [r7, #10]
 8004d02:	460b      	mov	r3, r1
 8004d04:	813b      	strh	r3, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	80fb      	strh	r3, [r7, #6]
	GFXglyph *glyph;
    while (*Text) {
 8004d0a:	e01d      	b.n	8004d48 <BSP_LCD_Draw_Text+0x58>
    	glyph = &(DrawProp.pFont->glyph[(*Text-' ')]);
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <BSP_LCD_Draw_Text+0x6c>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004d1a:	3b20      	subs	r3, #32
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
    	BSP_LCD_Draw_Char_Simple(*Text++, X, Y, Size);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	60fa      	str	r2, [r7, #12]
 8004d28:	7818      	ldrb	r0, [r3, #0]
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	893a      	ldrh	r2, [r7, #8]
 8004d2e:	8979      	ldrh	r1, [r7, #10]
 8004d30:	f000 f816 	bl	8004d60 <BSP_LCD_Draw_Char_Simple>
        X += glyph->xAdvance * Size;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	791b      	ldrb	r3, [r3, #4]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	fb02 f303 	mul.w	r3, r2, r3
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	897b      	ldrh	r3, [r7, #10]
 8004d44:	4413      	add	r3, r2
 8004d46:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1dd      	bne.n	8004d0c <BSP_LCD_Draw_Text+0x1c>
    }
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000860 	.word	0x20000860

08004d60 <BSP_LCD_Draw_Char_Simple>:

void BSP_LCD_Draw_Char_Simple(uint8_t Character, uint16_t X, uint16_t Y, uint16_t Size)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	71fb      	strb	r3, [r7, #7]
 8004d72:	4603      	mov	r3, r0
 8004d74:	80bb      	strh	r3, [r7, #4]
 8004d76:	460b      	mov	r3, r1
 8004d78:	807b      	strh	r3, [r7, #2]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	803b      	strh	r3, [r7, #0]
	const GFXglyph * glyph =  &(DrawProp.pFont->glyph[(Character-' ')]);
 8004d7e:	4b46      	ldr	r3, [pc, #280]	; (8004e98 <BSP_LCD_Draw_Char_Simple+0x138>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004d8a:	3b20      	subs	r3, #32
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	4413      	add	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
	const uint8_t* bitmap = DrawProp.pFont->table;
 8004d92:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <BSP_LCD_Draw_Char_Simple+0x138>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60bb      	str	r3, [r7, #8]

	uint8_t bit = 0, bits = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	75bb      	strb	r3, [r7, #22]
	uint16_t bOffset = glyph->bitmapOffset;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	82bb      	strh	r3, [r7, #20]
	for(uint8_t  yy = 0; yy < glyph->height; yy++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	74fb      	strb	r3, [r7, #19]
 8004dac:	e069      	b.n	8004e82 <BSP_LCD_Draw_Char_Simple+0x122>
		for(uint8_t  xx = 0; xx <  glyph->width; xx++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	74bb      	strb	r3, [r7, #18]
 8004db2:	e05e      	b.n	8004e72 <BSP_LCD_Draw_Char_Simple+0x112>
		{
			if(!(bit++ & 7))
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	75fa      	strb	r2, [r7, #23]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <BSP_LCD_Draw_Char_Simple+0x72>
				bits = bitmap[bOffset++];
 8004dc2:	8abb      	ldrh	r3, [r7, #20]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	82ba      	strh	r2, [r7, #20]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	75bb      	strb	r3, [r7, #22]

			if(bits & 0x80)
 8004dd2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da45      	bge.n	8004e66 <BSP_LCD_Draw_Char_Simple+0x106>
			{
				if(Size == 1)
 8004dda:	883b      	ldrh	r3, [r7, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d11d      	bne.n	8004e1c <BSP_LCD_Draw_Char_Simple+0xbc>
					lcd_drv->WritePixel(X+xx+glyph->xOffset, Y+yy+glyph->yOffset, DrawProp.TextColor);
 8004de0:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <BSP_LCD_Draw_Char_Simple+0x13c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	7cba      	ldrb	r2, [r7, #18]
 8004de8:	b291      	uxth	r1, r2
 8004dea:	88ba      	ldrh	r2, [r7, #4]
 8004dec:	440a      	add	r2, r1
 8004dee:	b291      	uxth	r1, r2
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8004df6:	b292      	uxth	r2, r2
 8004df8:	440a      	add	r2, r1
 8004dfa:	b290      	uxth	r0, r2
 8004dfc:	7cfa      	ldrb	r2, [r7, #19]
 8004dfe:	b291      	uxth	r1, r2
 8004e00:	887a      	ldrh	r2, [r7, #2]
 8004e02:	440a      	add	r2, r1
 8004e04:	b291      	uxth	r1, r2
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f992 2006 	ldrsb.w	r2, [r2, #6]
 8004e0c:	b292      	uxth	r2, r2
 8004e0e:	440a      	add	r2, r1
 8004e10:	b291      	uxth	r1, r2
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <BSP_LCD_Draw_Char_Simple+0x138>)
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	b292      	uxth	r2, r2
 8004e18:	4798      	blx	r3
 8004e1a:	e024      	b.n	8004e66 <BSP_LCD_Draw_Char_Simple+0x106>
				else
					lcd_drv->FillRect(X+((xx+glyph->xOffset)*Size), Y+((yy+glyph->yOffset)*Size), Size, Size, DrawProp.TextColor);
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	; (8004e9c <BSP_LCD_Draw_Char_Simple+0x13c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004e22:	7cbb      	ldrb	r3, [r7, #18]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	883a      	ldrh	r2, [r7, #0]
 8004e30:	fb02 f303 	mul.w	r3, r2, r3
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	88bb      	ldrh	r3, [r7, #4]
 8004e38:	4413      	add	r3, r2
 8004e3a:	b298      	uxth	r0, r3
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	f992 2006 	ldrsb.w	r2, [r2, #6]
 8004e44:	4413      	add	r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	883a      	ldrh	r2, [r7, #0]
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	887b      	ldrh	r3, [r7, #2]
 8004e52:	4413      	add	r3, r2
 8004e54:	b299      	uxth	r1, r3
 8004e56:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <BSP_LCD_Draw_Char_Simple+0x138>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	883d      	ldrh	r5, [r7, #0]
 8004e5e:	883a      	ldrh	r2, [r7, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462b      	mov	r3, r5
 8004e64:	47a0      	blx	r4
			}
			bits <<= 1;
 8004e66:	7dbb      	ldrb	r3, [r7, #22]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	75bb      	strb	r3, [r7, #22]
		for(uint8_t  xx = 0; xx <  glyph->width; xx++)
 8004e6c:	7cbb      	ldrb	r3, [r7, #18]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	74bb      	strb	r3, [r7, #18]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	789b      	ldrb	r3, [r3, #2]
 8004e76:	7cba      	ldrb	r2, [r7, #18]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d39b      	bcc.n	8004db4 <BSP_LCD_Draw_Char_Simple+0x54>
	for(uint8_t  yy = 0; yy < glyph->height; yy++)
 8004e7c:	7cfb      	ldrb	r3, [r7, #19]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	74fb      	strb	r3, [r7, #19]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	78db      	ldrb	r3, [r3, #3]
 8004e86:	7cfa      	ldrb	r2, [r7, #19]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d390      	bcc.n	8004dae <BSP_LCD_Draw_Char_Simple+0x4e>
		}
}
 8004e8c:	bf00      	nop
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bdb0      	pop	{r4, r5, r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000860 	.word	0x20000860
 8004e9c:	2000004c 	.word	0x2000004c

08004ea0 <BSP_LCD_Draw_Char>:

void BSP_LCD_Draw_Char(uint8_t Character, uint16_t X, uint16_t Y, uint16_t Size, uint8_t oldChar)
{
 8004ea0:	b5b0      	push	{r4, r5, r7, lr}
 8004ea2:	f5ad 5d9a 	sub.w	sp, sp, #4928	; 0x1340
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	4605      	mov	r5, r0
 8004eac:	460c      	mov	r4, r1
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f107 0320 	add.w	r3, r7, #32
 8004eb6:	3b19      	subs	r3, #25
 8004eb8:	462a      	mov	r2, r5
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	f107 0320 	add.w	r3, r7, #32
 8004ec0:	3b1c      	subs	r3, #28
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	f107 0320 	add.w	r3, r7, #32
 8004eca:	3b1e      	subs	r3, #30
 8004ecc:	4602      	mov	r2, r0
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	460a      	mov	r2, r1
 8004ed4:	801a      	strh	r2, [r3, #0]
	const GFXglyph * glyph =  &(DrawProp.pFont->glyph[(Character-' ')]);
 8004ed6:	4b75      	ldr	r3, [pc, #468]	; (80050ac <BSP_LCD_Draw_Char+0x20c>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	f107 0320 	add.w	r3, r7, #32
 8004ee0:	3b19      	subs	r3, #25
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004ee8:	3b20      	subs	r3, #32
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004ef2:	f102 0214 	add.w	r2, r2, #20
 8004ef6:	6013      	str	r3, [r2, #0]
	const GFXglyph * oldglyph =  &(DrawProp.pFont->glyph[(oldChar-' ')]);
 8004ef8:	4b6c      	ldr	r3, [pc, #432]	; (80050ac <BSP_LCD_Draw_Char+0x20c>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8004f02:	f103 0310 	add.w	r3, r3, #16
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004f0c:	3b20      	subs	r3, #32
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4413      	add	r3, r2
 8004f12:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004f16:	f102 0210 	add.w	r2, r2, #16
 8004f1a:	6013      	str	r3, [r2, #0]
	const uint8_t* bitmap = DrawProp.pFont->table;
 8004f1c:	4b63      	ldr	r3, [pc, #396]	; (80050ac <BSP_LCD_Draw_Char+0x20c>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004f26:	f102 020c 	add.w	r2, r2, #12
 8004f2a:	6013      	str	r3, [r2, #0]

	uint8_t buffer[70][70] = {0,};
 8004f2c:	f107 0320 	add.w	r3, r7, #32
 8004f30:	3b18      	subs	r3, #24
 8004f32:	4618      	mov	r0, r3
 8004f34:	f241 3324 	movw	r3, #4900	; 0x1324
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	f006 f972 	bl	800b224 <memset>

	uint8_t bit = 0, bits = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004f46:	f102 021f 	add.w	r2, r2, #31
 8004f4a:	7013      	strb	r3, [r2, #0]
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004f52:	f102 021e 	add.w	r2, r2, #30
 8004f56:	7013      	strb	r3, [r2, #0]
	uint16_t bOffset = glyph->bitmapOffset;
 8004f58:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004f5c:	f103 0314 	add.w	r3, r3, #20
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004f68:	f102 021c 	add.w	r2, r2, #28
 8004f6c:	8013      	strh	r3, [r2, #0]
	for(uint8_t  yy = 0; yy < glyph->height; yy++)
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004f74:	f102 021b 	add.w	r2, r2, #27
 8004f78:	7013      	strb	r3, [r2, #0]
 8004f7a:	e12f      	b.n	80051dc <BSP_LCD_Draw_Char+0x33c>
		for(uint8_t  xx = 0; xx <  glyph->width; xx++)
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004f82:	f102 021a 	add.w	r2, r2, #26
 8004f86:	7013      	strb	r3, [r2, #0]
 8004f88:	e10f      	b.n	80051aa <BSP_LCD_Draw_Char+0x30a>
		{
			if(!(bit++ & 7))
 8004f8a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004f8e:	f103 031f 	add.w	r3, r3, #31
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8004f9a:	f101 011f 	add.w	r1, r1, #31
 8004f9e:	700a      	strb	r2, [r1, #0]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d117      	bne.n	8004fd8 <BSP_LCD_Draw_Char+0x138>
				bits = bitmap[bOffset++];
 8004fa8:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004fac:	f103 031c 	add.w	r3, r3, #28
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8004fb8:	f101 011c 	add.w	r1, r1, #28
 8004fbc:	800a      	strh	r2, [r1, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004fc4:	f103 030c 	add.w	r3, r3, #12
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4413      	add	r3, r2
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8004fd2:	f102 021e 	add.w	r2, r2, #30
 8004fd6:	7013      	strb	r3, [r2, #0]

			if(bits & 0x80)
 8004fd8:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004fdc:	f103 031e 	add.w	r3, r3, #30
 8004fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f280 80ca 	bge.w	800517e <BSP_LCD_Draw_Char+0x2de>
			{
				if( (buffer)[34+glyph->yOffset+yy][xx+glyph->xOffset] == 0)
 8004fea:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8004fee:	f103 0314 	add.w	r3, r3, #20
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004ff8:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8004ffc:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005000:	f103 031b 	add.w	r3, r3, #27
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	18d1      	adds	r1, r2, r3
 8005008:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800500c:	f103 031a 	add.w	r3, r3, #26
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005016:	f102 0214 	add.w	r2, r2, #20
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8005020:	441a      	add	r2, r3
 8005022:	f107 0320 	add.w	r3, r7, #32
 8005026:	3b18      	subs	r3, #24
 8005028:	2046      	movs	r0, #70	; 0x46
 800502a:	fb00 f101 	mul.w	r1, r0, r1
 800502e:	440b      	add	r3, r1
 8005030:	4413      	add	r3, r2
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 80a2 	bne.w	800517e <BSP_LCD_Draw_Char+0x2de>
				{
					if(Size == 1)
 800503a:	463b      	mov	r3, r7
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d138      	bne.n	80050b4 <BSP_LCD_Draw_Char+0x214>
						lcd_drv->WritePixel(X+xx+glyph->xOffset, Y+yy+glyph->yOffset, DrawProp.TextColor);
 8005042:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <BSP_LCD_Draw_Char+0x210>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695c      	ldr	r4, [r3, #20]
 8005048:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800504c:	f103 031a 	add.w	r3, r3, #26
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	b29a      	uxth	r2, r3
 8005054:	f107 0320 	add.w	r3, r7, #32
 8005058:	3b1c      	subs	r3, #28
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	4413      	add	r3, r2
 800505e:	b29a      	uxth	r2, r3
 8005060:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005064:	f103 0314 	add.w	r3, r3, #20
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800506e:	b29b      	uxth	r3, r3
 8005070:	4413      	add	r3, r2
 8005072:	b298      	uxth	r0, r3
 8005074:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005078:	f103 031b 	add.w	r3, r3, #27
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b29a      	uxth	r2, r3
 8005080:	f107 0320 	add.w	r3, r7, #32
 8005084:	3b1e      	subs	r3, #30
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	4413      	add	r3, r2
 800508a:	b29a      	uxth	r2, r3
 800508c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005090:	f103 0314 	add.w	r3, r3, #20
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800509a:	b29b      	uxth	r3, r3
 800509c:	4413      	add	r3, r2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4a02      	ldr	r2, [pc, #8]	; (80050ac <BSP_LCD_Draw_Char+0x20c>)
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	b292      	uxth	r2, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	47a0      	blx	r4
 80050aa:	e042      	b.n	8005132 <BSP_LCD_Draw_Char+0x292>
 80050ac:	20000860 	.word	0x20000860
 80050b0:	2000004c 	.word	0x2000004c
					else
						lcd_drv->FillRect(X+((xx+glyph->xOffset)*Size), Y+((yy+glyph->yOffset)*Size), Size, Size, DrawProp.TextColor);
 80050b4:	4bab      	ldr	r3, [pc, #684]	; (8005364 <BSP_LCD_Draw_Char+0x4c4>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80050ba:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80050be:	f103 031a 	add.w	r3, r3, #26
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80050c8:	f102 0214 	add.w	r2, r2, #20
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	f992 2005 	ldrsb.w	r2, [r2, #5]
 80050d2:	4413      	add	r3, r2
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	463a      	mov	r2, r7
 80050d8:	8812      	ldrh	r2, [r2, #0]
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	b29a      	uxth	r2, r3
 80050e0:	f107 0320 	add.w	r3, r7, #32
 80050e4:	3b1c      	subs	r3, #28
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	b298      	uxth	r0, r3
 80050ec:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80050f0:	f103 031b 	add.w	r3, r3, #27
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80050fa:	f102 0214 	add.w	r2, r2, #20
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	f992 2006 	ldrsb.w	r2, [r2, #6]
 8005104:	4413      	add	r3, r2
 8005106:	b29b      	uxth	r3, r3
 8005108:	463a      	mov	r2, r7
 800510a:	8812      	ldrh	r2, [r2, #0]
 800510c:	fb02 f303 	mul.w	r3, r2, r3
 8005110:	b29a      	uxth	r2, r3
 8005112:	f107 0320 	add.w	r3, r7, #32
 8005116:	3b1e      	subs	r3, #30
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	4413      	add	r3, r2
 800511c:	b299      	uxth	r1, r3
 800511e:	4b92      	ldr	r3, [pc, #584]	; (8005368 <BSP_LCD_Draw_Char+0x4c8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	463a      	mov	r2, r7
 8005126:	8815      	ldrh	r5, [r2, #0]
 8005128:	463a      	mov	r2, r7
 800512a:	8812      	ldrh	r2, [r2, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	462b      	mov	r3, r5
 8005130:	47a0      	blx	r4
					 (buffer)[34+glyph->yOffset+yy][xx+glyph->xOffset] = 1;
 8005132:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005136:	f103 0314 	add.w	r3, r3, #20
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005140:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8005144:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005148:	f103 031b 	add.w	r3, r3, #27
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	18d1      	adds	r1, r2, r3
 8005150:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005154:	f103 031a 	add.w	r3, r3, #26
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800515e:	f102 0214 	add.w	r2, r2, #20
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	f992 2005 	ldrsb.w	r2, [r2, #5]
 8005168:	441a      	add	r2, r3
 800516a:	f107 0320 	add.w	r3, r7, #32
 800516e:	3b18      	subs	r3, #24
 8005170:	2046      	movs	r0, #70	; 0x46
 8005172:	fb00 f101 	mul.w	r1, r0, r1
 8005176:	440b      	add	r3, r1
 8005178:	4413      	add	r3, r2
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
				}
			}

			bits <<= 1;
 800517e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005182:	f103 031e 	add.w	r3, r3, #30
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800518e:	f102 021e 	add.w	r2, r2, #30
 8005192:	7013      	strb	r3, [r2, #0]
		for(uint8_t  xx = 0; xx <  glyph->width; xx++)
 8005194:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005198:	f103 031a 	add.w	r3, r3, #26
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	3301      	adds	r3, #1
 80051a0:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80051a4:	f102 021a 	add.w	r2, r2, #26
 80051a8:	7013      	strb	r3, [r2, #0]
 80051aa:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80051ae:	f103 0314 	add.w	r3, r3, #20
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	789b      	ldrb	r3, [r3, #2]
 80051b6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80051ba:	f102 021a 	add.w	r2, r2, #26
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	f4ff aee2 	bcc.w	8004f8a <BSP_LCD_Draw_Char+0xea>
	for(uint8_t  yy = 0; yy < glyph->height; yy++)
 80051c6:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80051ca:	f103 031b 	add.w	r3, r3, #27
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80051d6:	f102 021b 	add.w	r2, r2, #27
 80051da:	7013      	strb	r3, [r2, #0]
 80051dc:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80051e0:	f103 0314 	add.w	r3, r3, #20
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	78db      	ldrb	r3, [r3, #3]
 80051e8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80051ec:	f102 021b 	add.w	r2, r2, #27
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	f4ff aec2 	bcc.w	8004f7c <BSP_LCD_Draw_Char+0xdc>
		}

	bit = 0, bits = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80051fe:	f102 021f 	add.w	r2, r2, #31
 8005202:	7013      	strb	r3, [r2, #0]
 8005204:	2300      	movs	r3, #0
 8005206:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800520a:	f102 021e 	add.w	r2, r2, #30
 800520e:	7013      	strb	r3, [r2, #0]
	bOffset = oldglyph->bitmapOffset;
 8005210:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005214:	f103 0310 	add.w	r3, r3, #16
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005220:	f102 021c 	add.w	r2, r2, #28
 8005224:	8013      	strh	r3, [r2, #0]
	for(uint8_t  yy = 0; yy < oldglyph->height; yy++)
 8005226:	2300      	movs	r3, #0
 8005228:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800522c:	f102 0219 	add.w	r2, r2, #25
 8005230:	7013      	strb	r3, [r2, #0]
 8005232:	e109      	b.n	8005448 <BSP_LCD_Draw_Char+0x5a8>
		for(uint8_t  xx = 0; xx <  oldglyph->width; xx++)
 8005234:	2300      	movs	r3, #0
 8005236:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800523a:	f102 0218 	add.w	r2, r2, #24
 800523e:	7013      	strb	r3, [r2, #0]
 8005240:	e0e9      	b.n	8005416 <BSP_LCD_Draw_Char+0x576>
		{
			if(!(bit++ & 7))
 8005242:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005246:	f103 031f 	add.w	r3, r3, #31
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005252:	f101 011f 	add.w	r1, r1, #31
 8005256:	700a      	strb	r2, [r1, #0]
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	2b00      	cmp	r3, #0
 800525e:	d117      	bne.n	8005290 <BSP_LCD_Draw_Char+0x3f0>
				bits = bitmap[bOffset++];
 8005260:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005264:	f103 031c 	add.w	r3, r3, #28
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005270:	f101 011c 	add.w	r1, r1, #28
 8005274:	800a      	strh	r2, [r1, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800527c:	f103 030c 	add.w	r3, r3, #12
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4413      	add	r3, r2
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800528a:	f102 021e 	add.w	r2, r2, #30
 800528e:	7013      	strb	r3, [r2, #0]

			if(bits & 0x80)
 8005290:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005294:	f103 031e 	add.w	r3, r3, #30
 8005298:	f993 3000 	ldrsb.w	r3, [r3]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f280 80a4 	bge.w	80053ea <BSP_LCD_Draw_Char+0x54a>
			{
				if( (buffer)[34+oldglyph->yOffset+yy][xx+oldglyph->xOffset] == 0)
 80052a2:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80052a6:	f103 0310 	add.w	r3, r3, #16
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80052b0:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80052b4:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80052b8:	f103 0319 	add.w	r3, r3, #25
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	18d1      	adds	r1, r2, r3
 80052c0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80052c4:	f103 0318 	add.w	r3, r3, #24
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80052ce:	f102 0210 	add.w	r2, r2, #16
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	f992 2005 	ldrsb.w	r2, [r2, #5]
 80052d8:	441a      	add	r2, r3
 80052da:	f107 0320 	add.w	r3, r7, #32
 80052de:	3b18      	subs	r3, #24
 80052e0:	2046      	movs	r0, #70	; 0x46
 80052e2:	fb00 f101 	mul.w	r1, r0, r1
 80052e6:	440b      	add	r3, r1
 80052e8:	4413      	add	r3, r2
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d17c      	bne.n	80053ea <BSP_LCD_Draw_Char+0x54a>
				{
					if(Size == 1)
 80052f0:	463b      	mov	r3, r7
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d139      	bne.n	800536c <BSP_LCD_Draw_Char+0x4cc>
						lcd_drv->WritePixel(X+xx+oldglyph->xOffset, Y+yy+oldglyph->yOffset, DrawProp.BackColor);
 80052f8:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <BSP_LCD_Draw_Char+0x4c4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695c      	ldr	r4, [r3, #20]
 80052fe:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005302:	f103 0318 	add.w	r3, r3, #24
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	b29a      	uxth	r2, r3
 800530a:	f107 0320 	add.w	r3, r7, #32
 800530e:	3b1c      	subs	r3, #28
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	4413      	add	r3, r2
 8005314:	b29a      	uxth	r2, r3
 8005316:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800531a:	f103 0310 	add.w	r3, r3, #16
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005324:	b29b      	uxth	r3, r3
 8005326:	4413      	add	r3, r2
 8005328:	b298      	uxth	r0, r3
 800532a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800532e:	f103 0319 	add.w	r3, r3, #25
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b29a      	uxth	r2, r3
 8005336:	f107 0320 	add.w	r3, r7, #32
 800533a:	3b1e      	subs	r3, #30
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	4413      	add	r3, r2
 8005340:	b29a      	uxth	r2, r3
 8005342:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005346:	f103 0310 	add.w	r3, r3, #16
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005350:	b29b      	uxth	r3, r3
 8005352:	4413      	add	r3, r2
 8005354:	b29b      	uxth	r3, r3
 8005356:	4a04      	ldr	r2, [pc, #16]	; (8005368 <BSP_LCD_Draw_Char+0x4c8>)
 8005358:	6852      	ldr	r2, [r2, #4]
 800535a:	b292      	uxth	r2, r2
 800535c:	4619      	mov	r1, r3
 800535e:	47a0      	blx	r4
 8005360:	e043      	b.n	80053ea <BSP_LCD_Draw_Char+0x54a>
 8005362:	bf00      	nop
 8005364:	2000004c 	.word	0x2000004c
 8005368:	20000860 	.word	0x20000860
					else
						lcd_drv->FillRect(X+((xx+oldglyph->xOffset)*Size), Y+((yy+oldglyph->yOffset)*Size), Size, Size, DrawProp.BackColor);
 800536c:	4b40      	ldr	r3, [pc, #256]	; (8005470 <BSP_LCD_Draw_Char+0x5d0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8005372:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005376:	f103 0318 	add.w	r3, r3, #24
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005380:	f102 0210 	add.w	r2, r2, #16
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	f992 2005 	ldrsb.w	r2, [r2, #5]
 800538a:	4413      	add	r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	463a      	mov	r2, r7
 8005390:	8812      	ldrh	r2, [r2, #0]
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	b29a      	uxth	r2, r3
 8005398:	f107 0320 	add.w	r3, r7, #32
 800539c:	3b1c      	subs	r3, #28
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	4413      	add	r3, r2
 80053a2:	b298      	uxth	r0, r3
 80053a4:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80053a8:	f103 0319 	add.w	r3, r3, #25
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80053b2:	f102 0210 	add.w	r2, r2, #16
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	f992 2006 	ldrsb.w	r2, [r2, #6]
 80053bc:	4413      	add	r3, r2
 80053be:	b29b      	uxth	r3, r3
 80053c0:	463a      	mov	r2, r7
 80053c2:	8812      	ldrh	r2, [r2, #0]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	f107 0320 	add.w	r3, r7, #32
 80053ce:	3b1e      	subs	r3, #30
 80053d0:	881b      	ldrh	r3, [r3, #0]
 80053d2:	4413      	add	r3, r2
 80053d4:	b299      	uxth	r1, r3
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <BSP_LCD_Draw_Char+0x5d4>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	463a      	mov	r2, r7
 80053de:	8815      	ldrh	r5, [r2, #0]
 80053e0:	463a      	mov	r2, r7
 80053e2:	8812      	ldrh	r2, [r2, #0]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	462b      	mov	r3, r5
 80053e8:	47a0      	blx	r4
				}
			}


			bits <<= 1;
 80053ea:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80053ee:	f103 031e 	add.w	r3, r3, #30
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80053fa:	f102 021e 	add.w	r2, r2, #30
 80053fe:	7013      	strb	r3, [r2, #0]
		for(uint8_t  xx = 0; xx <  oldglyph->width; xx++)
 8005400:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005404:	f103 0318 	add.w	r3, r3, #24
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	3301      	adds	r3, #1
 800540c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005410:	f102 0218 	add.w	r2, r2, #24
 8005414:	7013      	strb	r3, [r2, #0]
 8005416:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800541a:	f103 0310 	add.w	r3, r3, #16
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	789b      	ldrb	r3, [r3, #2]
 8005422:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005426:	f102 0218 	add.w	r2, r2, #24
 800542a:	7812      	ldrb	r2, [r2, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	f4ff af08 	bcc.w	8005242 <BSP_LCD_Draw_Char+0x3a2>
	for(uint8_t  yy = 0; yy < oldglyph->height; yy++)
 8005432:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005436:	f103 0319 	add.w	r3, r3, #25
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005442:	f102 0219 	add.w	r2, r2, #25
 8005446:	7013      	strb	r3, [r2, #0]
 8005448:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800544c:	f103 0310 	add.w	r3, r3, #16
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005458:	f102 0219 	add.w	r2, r2, #25
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	f4ff aee8 	bcc.w	8005234 <BSP_LCD_Draw_Char+0x394>
		}
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop
 8005468:	f507 579a 	add.w	r7, r7, #4928	; 0x1340
 800546c:	46bd      	mov	sp, r7
 800546e:	bdb0      	pop	{r4, r5, r7, pc}
 8005470:	2000004c 	.word	0x2000004c
 8005474:	20000860 	.word	0x20000860

08005478 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af02      	add	r7, sp, #8
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	4611      	mov	r1, r2
 8005484:	461a      	mov	r2, r3
 8005486:	4623      	mov	r3, r4
 8005488:	80fb      	strh	r3, [r7, #6]
 800548a:	4603      	mov	r3, r0
 800548c:	80bb      	strh	r3, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	807b      	strh	r3, [r7, #2]
 8005492:	4613      	mov	r3, r2
 8005494:	803b      	strh	r3, [r7, #0]
  lcd_drv->FillRect(Xpos, Ypos, Width, Height, DrawProp.TextColor);
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <BSP_LCD_FillRect+0x40>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <BSP_LCD_FillRect+0x44>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	883d      	ldrh	r5, [r7, #0]
 80054a4:	887a      	ldrh	r2, [r7, #2]
 80054a6:	88b9      	ldrh	r1, [r7, #4]
 80054a8:	88f8      	ldrh	r0, [r7, #6]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	462b      	mov	r3, r5
 80054ae:	47a0      	blx	r4
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bdb0      	pop	{r4, r5, r7, pc}
 80054b8:	2000004c 	.word	0x2000004c
 80054bc:	20000860 	.word	0x20000860

080054c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80054c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80054c2:	e003      	b.n	80054cc <LoopCopyDataInit>

080054c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80054c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80054c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80054ca:	3104      	adds	r1, #4

080054cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80054cc:	480a      	ldr	r0, [pc, #40]	; (80054f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80054d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80054d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80054d4:	d3f6      	bcc.n	80054c4 <CopyDataInit>
  ldr r2, =_sbss
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80054d8:	e002      	b.n	80054e0 <LoopFillZerobss>

080054da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80054da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80054dc:	f842 3b04 	str.w	r3, [r2], #4

080054e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80054e0:	4b08      	ldr	r3, [pc, #32]	; (8005504 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80054e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80054e4:	d3f9      	bcc.n	80054da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054e6:	f7fe fbf9 	bl	8003cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054ea:	f005 fe59 	bl	800b1a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80054ee:	f7fd fe7b 	bl	80031e8 <main>
  bx lr
 80054f2:	4770      	bx	lr
  ldr r3, =_sidata
 80054f4:	08012454 	.word	0x08012454
  ldr r0, =_sdata
 80054f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80054fc:	200000bc 	.word	0x200000bc
  ldr r2, =_sbss
 8005500:	200000bc 	.word	0x200000bc
  ldr r3, = _ebss
 8005504:	20000880 	.word	0x20000880

08005508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005508:	e7fe      	b.n	8005508 <ADC1_2_IRQHandler>
	...

0800550c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <HAL_Init+0x28>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a07      	ldr	r2, [pc, #28]	; (8005534 <HAL_Init+0x28>)
 8005516:	f043 0310 	orr.w	r3, r3, #16
 800551a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800551c:	2003      	movs	r0, #3
 800551e:	f000 fd09 	bl	8005f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005522:	2007      	movs	r0, #7
 8005524:	f000 f808 	bl	8005538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005528:	f7fe f938 	bl	800379c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40022000 	.word	0x40022000

08005538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005540:	4b12      	ldr	r3, [pc, #72]	; (800558c <HAL_InitTick+0x54>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_InitTick+0x58>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	4619      	mov	r1, r3
 800554a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800554e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fd21 	bl	8005f9e <HAL_SYSTICK_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e00e      	b.n	8005584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b0f      	cmp	r3, #15
 800556a:	d80a      	bhi.n	8005582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800556c:	2200      	movs	r2, #0
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	f000 fce9 	bl	8005f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005578:	4a06      	ldr	r2, [pc, #24]	; (8005594 <HAL_InitTick+0x5c>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
}
 8005584:	4618      	mov	r0, r3
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000004 	.word	0x20000004
 8005590:	20000054 	.word	0x20000054
 8005594:	20000050 	.word	0x20000050

08005598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_IncTick+0x1c>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_IncTick+0x20>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4413      	add	r3, r2
 80055a8:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <HAL_IncTick+0x20>)
 80055aa:	6013      	str	r3, [r2, #0]
}
 80055ac:	bf00      	nop
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	20000054 	.word	0x20000054
 80055b8:	2000086c 	.word	0x2000086c

080055bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return uwTick;
 80055c0:	4b02      	ldr	r3, [pc, #8]	; (80055cc <HAL_GetTick+0x10>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr
 80055cc:	2000086c 	.word	0x2000086c

080055d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055d8:	f7ff fff0 	bl	80055bc <HAL_GetTick>
 80055dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d005      	beq.n	80055f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <HAL_Delay+0x44>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055f6:	bf00      	nop
 80055f8:	f7ff ffe0 	bl	80055bc <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	429a      	cmp	r2, r3
 8005606:	d8f7      	bhi.n	80055f8 <HAL_Delay+0x28>
  {
  }
}
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	20000054 	.word	0x20000054

08005618 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e0be      	b.n	80057b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fe f8d2 	bl	8003800 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 faf5 	bl	8005c4c <ADC_ConversionStop_Disable>
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	f003 0310 	and.w	r3, r3, #16
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 8099 	bne.w	80057a6 <HAL_ADC_Init+0x18e>
 8005674:	7dfb      	ldrb	r3, [r7, #23]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 8095 	bne.w	80057a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005680:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005684:	f023 0302 	bic.w	r3, r3, #2
 8005688:	f043 0202 	orr.w	r2, r3, #2
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005698:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	7b1b      	ldrb	r3, [r3, #12]
 800569e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80056a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b0:	d003      	beq.n	80056ba <HAL_ADC_Init+0xa2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d102      	bne.n	80056c0 <HAL_ADC_Init+0xa8>
 80056ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056be:	e000      	b.n	80056c2 <HAL_ADC_Init+0xaa>
 80056c0:	2300      	movs	r3, #0
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7d1b      	ldrb	r3, [r3, #20]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d119      	bne.n	8005704 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7b1b      	ldrb	r3, [r3, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d109      	bne.n	80056ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	3b01      	subs	r3, #1
 80056de:	035a      	lsls	r2, r3, #13
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e00b      	b.n	8005704 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	f043 0201 	orr.w	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	430a      	orrs	r2, r1
 8005716:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <HAL_ADC_Init+0x1a8>)
 8005720:	4013      	ands	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	430b      	orrs	r3, r1
 800572a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005734:	d003      	beq.n	800573e <HAL_ADC_Init+0x126>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d104      	bne.n	8005748 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	3b01      	subs	r3, #1
 8005744:	051b      	lsls	r3, r3, #20
 8005746:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	430a      	orrs	r2, r1
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	4b18      	ldr	r3, [pc, #96]	; (80057c4 <HAL_ADC_Init+0x1ac>)
 8005764:	4013      	ands	r3, r2
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	429a      	cmp	r2, r3
 800576a:	d10b      	bne.n	8005784 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	f043 0201 	orr.w	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005782:	e018      	b.n	80057b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	f023 0312 	bic.w	r3, r3, #18
 800578c:	f043 0210 	orr.w	r2, r3, #16
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	f043 0201 	orr.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80057a4:	e007      	b.n	80057b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f043 0210 	orr.w	r2, r3, #16
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80057b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	ffe1f7fd 	.word	0xffe1f7fd
 80057c4:	ff1f0efe 	.word	0xff1f0efe

080057c8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a64      	ldr	r2, [pc, #400]	; (8005970 <HAL_ADC_Start_DMA+0x1a8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_ADC_Start_DMA+0x24>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a63      	ldr	r2, [pc, #396]	; (8005974 <HAL_ADC_Start_DMA+0x1ac>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d106      	bne.n	80057fa <HAL_ADC_Start_DMA+0x32>
 80057ec:	4b60      	ldr	r3, [pc, #384]	; (8005970 <HAL_ADC_Start_DMA+0x1a8>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 80b3 	bne.w	8005960 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_ADC_Start_DMA+0x40>
 8005804:	2302      	movs	r3, #2
 8005806:	e0ae      	b.n	8005966 <HAL_ADC_Start_DMA+0x19e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f9c1 	bl	8005b98 <ADC_Enable>
 8005816:	4603      	mov	r3, r0
 8005818:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800581a:	7dfb      	ldrb	r3, [r7, #23]
 800581c:	2b00      	cmp	r3, #0
 800581e:	f040 809a 	bne.w	8005956 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a4e      	ldr	r2, [pc, #312]	; (8005974 <HAL_ADC_Start_DMA+0x1ac>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d105      	bne.n	800584c <HAL_ADC_Start_DMA+0x84>
 8005840:	4b4b      	ldr	r3, [pc, #300]	; (8005970 <HAL_ADC_Start_DMA+0x1a8>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d115      	bne.n	8005878 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005862:	2b00      	cmp	r3, #0
 8005864:	d026      	beq.n	80058b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800586e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005876:	e01d      	b.n	80058b4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a39      	ldr	r2, [pc, #228]	; (8005970 <HAL_ADC_Start_DMA+0x1a8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_ADC_Start_DMA+0xd0>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a38      	ldr	r2, [pc, #224]	; (8005974 <HAL_ADC_Start_DMA+0x1ac>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10d      	bne.n	80058b4 <HAL_ADC_Start_DMA+0xec>
 8005898:	4b35      	ldr	r3, [pc, #212]	; (8005970 <HAL_ADC_Start_DMA+0x1a8>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	f023 0206 	bic.w	r2, r3, #6
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80058cc:	e002      	b.n	80058d4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	4a25      	ldr	r2, [pc, #148]	; (8005978 <HAL_ADC_Start_DMA+0x1b0>)
 80058e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <HAL_ADC_Start_DMA+0x1b4>)
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <HAL_ADC_Start_DMA+0x1b8>)
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0202 	mvn.w	r2, #2
 80058fc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800590c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a18      	ldr	r0, [r3, #32]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	334c      	adds	r3, #76	; 0x4c
 8005918:	4619      	mov	r1, r3
 800591a:	68ba      	ldr	r2, [r7, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f000 fba5 	bl	800606c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800592c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005930:	d108      	bne.n	8005944 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005940:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005942:	e00f      	b.n	8005964 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005952:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005954:	e006      	b.n	8005964 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800595e:	e001      	b.n	8005964 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005964:	7dfb      	ldrb	r3, [r7, #23]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40012400 	.word	0x40012400
 8005974:	40012800 	.word	0x40012800
 8005978:	08005ccf 	.word	0x08005ccf
 800597c:	08005d4b 	.word	0x08005d4b
 8005980:	08005d67 	.word	0x08005d67

08005984 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x20>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e0dc      	b.n	8005b82 <HAL_ADC_ConfigChannel+0x1da>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b06      	cmp	r3, #6
 80059d6:	d81c      	bhi.n	8005a12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	3b05      	subs	r3, #5
 80059ea:	221f      	movs	r2, #31
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	4019      	ands	r1, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	3b05      	subs	r3, #5
 8005a04:	fa00 f203 	lsl.w	r2, r0, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	635a      	str	r2, [r3, #52]	; 0x34
 8005a10:	e03c      	b.n	8005a8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d81c      	bhi.n	8005a54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	3b23      	subs	r3, #35	; 0x23
 8005a2c:	221f      	movs	r2, #31
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	4019      	ands	r1, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	3b23      	subs	r3, #35	; 0x23
 8005a46:	fa00 f203 	lsl.w	r2, r0, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
 8005a52:	e01b      	b.n	8005a8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	3b41      	subs	r3, #65	; 0x41
 8005a66:	221f      	movs	r2, #31
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	4019      	ands	r1, r3
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	3b41      	subs	r3, #65	; 0x41
 8005a80:	fa00 f203 	lsl.w	r2, r0, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b09      	cmp	r3, #9
 8005a92:	d91c      	bls.n	8005ace <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68d9      	ldr	r1, [r3, #12]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3b1e      	subs	r3, #30
 8005aa6:	2207      	movs	r2, #7
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	4019      	ands	r1, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6898      	ldr	r0, [r3, #8]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	3b1e      	subs	r3, #30
 8005ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	60da      	str	r2, [r3, #12]
 8005acc:	e019      	b.n	8005b02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6919      	ldr	r1, [r3, #16]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	4413      	add	r3, r2
 8005ade:	2207      	movs	r2, #7
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	4019      	ands	r1, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6898      	ldr	r0, [r3, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4613      	mov	r3, r2
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	4413      	add	r3, r2
 8005af6:	fa00 f203 	lsl.w	r2, r0, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d003      	beq.n	8005b12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005b0e:	2b11      	cmp	r3, #17
 8005b10:	d132      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <HAL_ADC_ConfigChannel+0x1e4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d125      	bne.n	8005b68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d126      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	d11a      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b42:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <HAL_ADC_ConfigChannel+0x1e8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <HAL_ADC_ConfigChannel+0x1ec>)
 8005b48:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4c:	0c9a      	lsrs	r2, r3, #18
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b58:	e002      	b.n	8005b60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1f9      	bne.n	8005b5a <HAL_ADC_ConfigChannel+0x1b2>
 8005b66:	e007      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bc80      	pop	{r7}
 8005b8a:	4770      	bx	lr
 8005b8c:	40012400 	.word	0x40012400
 8005b90:	20000004 	.word	0x20000004
 8005b94:	431bde83 	.word	0x431bde83

08005b98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d040      	beq.n	8005c38 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005bc6:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <ADC_Enable+0xac>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1f      	ldr	r2, [pc, #124]	; (8005c48 <ADC_Enable+0xb0>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	0c9b      	lsrs	r3, r3, #18
 8005bd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005bd4:	e002      	b.n	8005bdc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f9      	bne.n	8005bd6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005be2:	f7ff fceb 	bl	80055bc <HAL_GetTick>
 8005be6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005be8:	e01f      	b.n	8005c2a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005bea:	f7ff fce7 	bl	80055bc <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d918      	bls.n	8005c2a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d011      	beq.n	8005c2a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	f043 0210 	orr.w	r2, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	f043 0201 	orr.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e007      	b.n	8005c3a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d1d8      	bne.n	8005bea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000004 	.word	0x20000004
 8005c48:	431bde83 	.word	0x431bde83

08005c4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d12e      	bne.n	8005cc4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0201 	bic.w	r2, r2, #1
 8005c74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c76:	f7ff fca1 	bl	80055bc <HAL_GetTick>
 8005c7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005c7c:	e01b      	b.n	8005cb6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c7e:	f7ff fc9d 	bl	80055bc <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d914      	bls.n	8005cb6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d10d      	bne.n	8005cb6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	f043 0210 	orr.w	r2, r3, #16
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	f043 0201 	orr.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e007      	b.n	8005cc6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d0dc      	beq.n	8005c7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d127      	bne.n	8005d38 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005cfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005d02:	d115      	bne.n	8005d30 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d111      	bne.n	8005d30 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d105      	bne.n	8005d30 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	f043 0201 	orr.w	r2, r3, #1
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f7fd f865 	bl	8002e00 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8005d36:	e004      	b.n	8005d42 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
}
 8005d42:	bf00      	nop
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff fe13 	bl	8005984 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	f043 0204 	orr.w	r2, r3, #4
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fe02 	bl	8005996 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005db8:	4013      	ands	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dce:	4a04      	ldr	r2, [pc, #16]	; (8005de0 <__NVIC_SetPriorityGrouping+0x44>)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	60d3      	str	r3, [r2, #12]
}
 8005dd4:	bf00      	nop
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005de8:	4b04      	ldr	r3, [pc, #16]	; (8005dfc <__NVIC_GetPriorityGrouping+0x18>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	0a1b      	lsrs	r3, r3, #8
 8005dee:	f003 0307 	and.w	r3, r3, #7
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	e000ed00 	.word	0xe000ed00

08005e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	db0b      	blt.n	8005e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	f003 021f 	and.w	r2, r3, #31
 8005e18:	4906      	ldr	r1, [pc, #24]	; (8005e34 <__NVIC_EnableIRQ+0x34>)
 8005e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2001      	movs	r0, #1
 8005e22:	fa00 f202 	lsl.w	r2, r0, r2
 8005e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr
 8005e34:	e000e100 	.word	0xe000e100

08005e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db0a      	blt.n	8005e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	490c      	ldr	r1, [pc, #48]	; (8005e84 <__NVIC_SetPriority+0x4c>)
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e60:	e00a      	b.n	8005e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4908      	ldr	r1, [pc, #32]	; (8005e88 <__NVIC_SetPriority+0x50>)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	0112      	lsls	r2, r2, #4
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	440b      	add	r3, r1
 8005e76:	761a      	strb	r2, [r3, #24]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	e000e100 	.word	0xe000e100
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	bf28      	it	cs
 8005eaa:	2304      	movcs	r3, #4
 8005eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d902      	bls.n	8005ebc <NVIC_EncodePriority+0x30>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3b03      	subs	r3, #3
 8005eba:	e000      	b.n	8005ebe <NVIC_EncodePriority+0x32>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	401a      	ands	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43d9      	mvns	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee4:	4313      	orrs	r3, r2
         );
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr

08005ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f00:	d301      	bcc.n	8005f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f02:	2301      	movs	r3, #1
 8005f04:	e00f      	b.n	8005f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f06:	4a0a      	ldr	r2, [pc, #40]	; (8005f30 <SysTick_Config+0x40>)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f0e:	210f      	movs	r1, #15
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	f7ff ff90 	bl	8005e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <SysTick_Config+0x40>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <SysTick_Config+0x40>)
 8005f20:	2207      	movs	r2, #7
 8005f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	e000e010 	.word	0xe000e010

08005f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff ff2d 	bl	8005d9c <__NVIC_SetPriorityGrouping>
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4603      	mov	r3, r0
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f5c:	f7ff ff42 	bl	8005de4 <__NVIC_GetPriorityGrouping>
 8005f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f7ff ff90 	bl	8005e8c <NVIC_EncodePriority>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff5f 	bl	8005e38 <__NVIC_SetPriority>
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	4603      	mov	r3, r0
 8005f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff ff35 	bl	8005e00 <__NVIC_EnableIRQ>
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b082      	sub	sp, #8
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff ffa2 	bl	8005ef0 <SysTick_Config>
 8005fac:	4603      	mov	r3, r0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e043      	b.n	8006056 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4b22      	ldr	r3, [pc, #136]	; (8006060 <HAL_DMA_Init+0xa8>)
 8005fd6:	4413      	add	r3, r2
 8005fd8:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_DMA_Init+0xac>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	009a      	lsls	r2, r3, #2
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1f      	ldr	r2, [pc, #124]	; (8006068 <HAL_DMA_Init+0xb0>)
 8005fea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006002:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006006:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800601c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr
 8006060:	bffdfff8 	.word	0xbffdfff8
 8006064:	cccccccd 	.word	0xcccccccd
 8006068:	40020000 	.word	0x40020000

0800606c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_DMA_Start_IT+0x20>
 8006088:	2302      	movs	r3, #2
 800608a:	e04a      	b.n	8006122 <HAL_DMA_Start_IT+0xb6>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800609a:	2b01      	cmp	r3, #1
 800609c:	d13a      	bne.n	8006114 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f9ba 	bl	800643c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 020e 	orr.w	r2, r2, #14
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e00f      	b.n	8006102 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0204 	bic.w	r2, r2, #4
 80060f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 020a 	orr.w	r2, r2, #10
 8006100:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e005      	b.n	8006120 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800611c:	2302      	movs	r3, #2
 800611e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006120:	7dfb      	ldrb	r3, [r7, #23]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800613e:	2b02      	cmp	r3, #2
 8006140:	d005      	beq.n	800614e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2204      	movs	r2, #4
 8006146:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	73fb      	strb	r3, [r7, #15]
 800614c:	e051      	b.n	80061f2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 020e 	bic.w	r2, r2, #14
 800615c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a22      	ldr	r2, [pc, #136]	; (80061fc <HAL_DMA_Abort_IT+0xd0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d029      	beq.n	80061cc <HAL_DMA_Abort_IT+0xa0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a20      	ldr	r2, [pc, #128]	; (8006200 <HAL_DMA_Abort_IT+0xd4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d022      	beq.n	80061c8 <HAL_DMA_Abort_IT+0x9c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1f      	ldr	r2, [pc, #124]	; (8006204 <HAL_DMA_Abort_IT+0xd8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d01a      	beq.n	80061c2 <HAL_DMA_Abort_IT+0x96>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <HAL_DMA_Abort_IT+0xdc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d012      	beq.n	80061bc <HAL_DMA_Abort_IT+0x90>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <HAL_DMA_Abort_IT+0xe0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00a      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x8a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1a      	ldr	r2, [pc, #104]	; (8006210 <HAL_DMA_Abort_IT+0xe4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d102      	bne.n	80061b0 <HAL_DMA_Abort_IT+0x84>
 80061aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80061ae:	e00e      	b.n	80061ce <HAL_DMA_Abort_IT+0xa2>
 80061b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b4:	e00b      	b.n	80061ce <HAL_DMA_Abort_IT+0xa2>
 80061b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061ba:	e008      	b.n	80061ce <HAL_DMA_Abort_IT+0xa2>
 80061bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061c0:	e005      	b.n	80061ce <HAL_DMA_Abort_IT+0xa2>
 80061c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061c6:	e002      	b.n	80061ce <HAL_DMA_Abort_IT+0xa2>
 80061c8:	2310      	movs	r3, #16
 80061ca:	e000      	b.n	80061ce <HAL_DMA_Abort_IT+0xa2>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4a11      	ldr	r2, [pc, #68]	; (8006214 <HAL_DMA_Abort_IT+0xe8>)
 80061d0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	4798      	blx	r3
    } 
  }
  return status;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40020008 	.word	0x40020008
 8006200:	4002001c 	.word	0x4002001c
 8006204:	40020030 	.word	0x40020030
 8006208:	40020044 	.word	0x40020044
 800620c:	40020058 	.word	0x40020058
 8006210:	4002006c 	.word	0x4002006c
 8006214:	40020000 	.word	0x40020000

08006218 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	2204      	movs	r2, #4
 8006236:	409a      	lsls	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d04f      	beq.n	80062e0 <HAL_DMA_IRQHandler+0xc8>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d04a      	beq.n	80062e0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d107      	bne.n	8006268 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0204 	bic.w	r2, r2, #4
 8006266:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a66      	ldr	r2, [pc, #408]	; (8006408 <HAL_DMA_IRQHandler+0x1f0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d029      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xae>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a65      	ldr	r2, [pc, #404]	; (800640c <HAL_DMA_IRQHandler+0x1f4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xaa>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a63      	ldr	r2, [pc, #396]	; (8006410 <HAL_DMA_IRQHandler+0x1f8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01a      	beq.n	80062bc <HAL_DMA_IRQHandler+0xa4>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a62      	ldr	r2, [pc, #392]	; (8006414 <HAL_DMA_IRQHandler+0x1fc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d012      	beq.n	80062b6 <HAL_DMA_IRQHandler+0x9e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a60      	ldr	r2, [pc, #384]	; (8006418 <HAL_DMA_IRQHandler+0x200>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00a      	beq.n	80062b0 <HAL_DMA_IRQHandler+0x98>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a5f      	ldr	r2, [pc, #380]	; (800641c <HAL_DMA_IRQHandler+0x204>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d102      	bne.n	80062aa <HAL_DMA_IRQHandler+0x92>
 80062a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062a8:	e00e      	b.n	80062c8 <HAL_DMA_IRQHandler+0xb0>
 80062aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80062ae:	e00b      	b.n	80062c8 <HAL_DMA_IRQHandler+0xb0>
 80062b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80062b4:	e008      	b.n	80062c8 <HAL_DMA_IRQHandler+0xb0>
 80062b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062ba:	e005      	b.n	80062c8 <HAL_DMA_IRQHandler+0xb0>
 80062bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c0:	e002      	b.n	80062c8 <HAL_DMA_IRQHandler+0xb0>
 80062c2:	2340      	movs	r3, #64	; 0x40
 80062c4:	e000      	b.n	80062c8 <HAL_DMA_IRQHandler+0xb0>
 80062c6:	2304      	movs	r3, #4
 80062c8:	4a55      	ldr	r2, [pc, #340]	; (8006420 <HAL_DMA_IRQHandler+0x208>)
 80062ca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 8094 	beq.w	80063fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80062de:	e08e      	b.n	80063fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	2202      	movs	r2, #2
 80062e6:	409a      	lsls	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4013      	ands	r3, r2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d056      	beq.n	800639e <HAL_DMA_IRQHandler+0x186>
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d051      	beq.n	800639e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0320 	and.w	r3, r3, #32
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10b      	bne.n	8006320 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 020a 	bic.w	r2, r2, #10
 8006316:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a38      	ldr	r2, [pc, #224]	; (8006408 <HAL_DMA_IRQHandler+0x1f0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d029      	beq.n	800637e <HAL_DMA_IRQHandler+0x166>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a37      	ldr	r2, [pc, #220]	; (800640c <HAL_DMA_IRQHandler+0x1f4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_DMA_IRQHandler+0x162>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a35      	ldr	r2, [pc, #212]	; (8006410 <HAL_DMA_IRQHandler+0x1f8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01a      	beq.n	8006374 <HAL_DMA_IRQHandler+0x15c>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a34      	ldr	r2, [pc, #208]	; (8006414 <HAL_DMA_IRQHandler+0x1fc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d012      	beq.n	800636e <HAL_DMA_IRQHandler+0x156>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a32      	ldr	r2, [pc, #200]	; (8006418 <HAL_DMA_IRQHandler+0x200>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00a      	beq.n	8006368 <HAL_DMA_IRQHandler+0x150>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a31      	ldr	r2, [pc, #196]	; (800641c <HAL_DMA_IRQHandler+0x204>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d102      	bne.n	8006362 <HAL_DMA_IRQHandler+0x14a>
 800635c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006360:	e00e      	b.n	8006380 <HAL_DMA_IRQHandler+0x168>
 8006362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006366:	e00b      	b.n	8006380 <HAL_DMA_IRQHandler+0x168>
 8006368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800636c:	e008      	b.n	8006380 <HAL_DMA_IRQHandler+0x168>
 800636e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006372:	e005      	b.n	8006380 <HAL_DMA_IRQHandler+0x168>
 8006374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006378:	e002      	b.n	8006380 <HAL_DMA_IRQHandler+0x168>
 800637a:	2320      	movs	r3, #32
 800637c:	e000      	b.n	8006380 <HAL_DMA_IRQHandler+0x168>
 800637e:	2302      	movs	r3, #2
 8006380:	4a27      	ldr	r2, [pc, #156]	; (8006420 <HAL_DMA_IRQHandler+0x208>)
 8006382:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	2b00      	cmp	r3, #0
 8006392:	d034      	beq.n	80063fe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800639c:	e02f      	b.n	80063fe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	2208      	movs	r2, #8
 80063a4:	409a      	lsls	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d028      	beq.n	8006400 <HAL_DMA_IRQHandler+0x1e8>
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d023      	beq.n	8006400 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 020e 	bic.w	r2, r2, #14
 80063c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d0:	2101      	movs	r1, #1
 80063d2:	fa01 f202 	lsl.w	r2, r1, r2
 80063d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	4798      	blx	r3
    }
  }
  return;
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
}
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40020008 	.word	0x40020008
 800640c:	4002001c 	.word	0x4002001c
 8006410:	40020030 	.word	0x40020030
 8006414:	40020044 	.word	0x40020044
 8006418:	40020058 	.word	0x40020058
 800641c:	4002006c 	.word	0x4002006c
 8006420:	40020000 	.word	0x40020000

08006424 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8006432:	4618      	mov	r0, r3
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr

0800643c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
 8006448:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	2101      	movs	r1, #1
 8006454:	fa01 f202 	lsl.w	r2, r1, r2
 8006458:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b10      	cmp	r3, #16
 8006468:	d108      	bne.n	800647c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800647a:	e007      	b.n	800648c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	60da      	str	r2, [r3, #12]
}
 800648c:	bf00      	nop
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
	...

08006498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006498:	b480      	push	{r7}
 800649a:	b08b      	sub	sp, #44	; 0x2c
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80064a2:	2300      	movs	r3, #0
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80064aa:	e169      	b.n	8006780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80064ac:	2201      	movs	r2, #1
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69fa      	ldr	r2, [r7, #28]
 80064bc:	4013      	ands	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	f040 8158 	bne.w	800677a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4a9a      	ldr	r2, [pc, #616]	; (8006738 <HAL_GPIO_Init+0x2a0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d05e      	beq.n	8006592 <HAL_GPIO_Init+0xfa>
 80064d4:	4a98      	ldr	r2, [pc, #608]	; (8006738 <HAL_GPIO_Init+0x2a0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d875      	bhi.n	80065c6 <HAL_GPIO_Init+0x12e>
 80064da:	4a98      	ldr	r2, [pc, #608]	; (800673c <HAL_GPIO_Init+0x2a4>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d058      	beq.n	8006592 <HAL_GPIO_Init+0xfa>
 80064e0:	4a96      	ldr	r2, [pc, #600]	; (800673c <HAL_GPIO_Init+0x2a4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d86f      	bhi.n	80065c6 <HAL_GPIO_Init+0x12e>
 80064e6:	4a96      	ldr	r2, [pc, #600]	; (8006740 <HAL_GPIO_Init+0x2a8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d052      	beq.n	8006592 <HAL_GPIO_Init+0xfa>
 80064ec:	4a94      	ldr	r2, [pc, #592]	; (8006740 <HAL_GPIO_Init+0x2a8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d869      	bhi.n	80065c6 <HAL_GPIO_Init+0x12e>
 80064f2:	4a94      	ldr	r2, [pc, #592]	; (8006744 <HAL_GPIO_Init+0x2ac>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d04c      	beq.n	8006592 <HAL_GPIO_Init+0xfa>
 80064f8:	4a92      	ldr	r2, [pc, #584]	; (8006744 <HAL_GPIO_Init+0x2ac>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d863      	bhi.n	80065c6 <HAL_GPIO_Init+0x12e>
 80064fe:	4a92      	ldr	r2, [pc, #584]	; (8006748 <HAL_GPIO_Init+0x2b0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d046      	beq.n	8006592 <HAL_GPIO_Init+0xfa>
 8006504:	4a90      	ldr	r2, [pc, #576]	; (8006748 <HAL_GPIO_Init+0x2b0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d85d      	bhi.n	80065c6 <HAL_GPIO_Init+0x12e>
 800650a:	2b12      	cmp	r3, #18
 800650c:	d82a      	bhi.n	8006564 <HAL_GPIO_Init+0xcc>
 800650e:	2b12      	cmp	r3, #18
 8006510:	d859      	bhi.n	80065c6 <HAL_GPIO_Init+0x12e>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <HAL_GPIO_Init+0x80>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006593 	.word	0x08006593
 800651c:	0800656d 	.word	0x0800656d
 8006520:	0800657f 	.word	0x0800657f
 8006524:	080065c1 	.word	0x080065c1
 8006528:	080065c7 	.word	0x080065c7
 800652c:	080065c7 	.word	0x080065c7
 8006530:	080065c7 	.word	0x080065c7
 8006534:	080065c7 	.word	0x080065c7
 8006538:	080065c7 	.word	0x080065c7
 800653c:	080065c7 	.word	0x080065c7
 8006540:	080065c7 	.word	0x080065c7
 8006544:	080065c7 	.word	0x080065c7
 8006548:	080065c7 	.word	0x080065c7
 800654c:	080065c7 	.word	0x080065c7
 8006550:	080065c7 	.word	0x080065c7
 8006554:	080065c7 	.word	0x080065c7
 8006558:	080065c7 	.word	0x080065c7
 800655c:	08006575 	.word	0x08006575
 8006560:	08006589 	.word	0x08006589
 8006564:	4a79      	ldr	r2, [pc, #484]	; (800674c <HAL_GPIO_Init+0x2b4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800656a:	e02c      	b.n	80065c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	623b      	str	r3, [r7, #32]
          break;
 8006572:	e029      	b.n	80065c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	3304      	adds	r3, #4
 800657a:	623b      	str	r3, [r7, #32]
          break;
 800657c:	e024      	b.n	80065c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	3308      	adds	r3, #8
 8006584:	623b      	str	r3, [r7, #32]
          break;
 8006586:	e01f      	b.n	80065c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	330c      	adds	r3, #12
 800658e:	623b      	str	r3, [r7, #32]
          break;
 8006590:	e01a      	b.n	80065c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800659a:	2304      	movs	r3, #4
 800659c:	623b      	str	r3, [r7, #32]
          break;
 800659e:	e013      	b.n	80065c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d105      	bne.n	80065b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065a8:	2308      	movs	r3, #8
 80065aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69fa      	ldr	r2, [r7, #28]
 80065b0:	611a      	str	r2, [r3, #16]
          break;
 80065b2:	e009      	b.n	80065c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80065b4:	2308      	movs	r3, #8
 80065b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	615a      	str	r2, [r3, #20]
          break;
 80065be:	e003      	b.n	80065c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80065c0:	2300      	movs	r3, #0
 80065c2:	623b      	str	r3, [r7, #32]
          break;
 80065c4:	e000      	b.n	80065c8 <HAL_GPIO_Init+0x130>
          break;
 80065c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2bff      	cmp	r3, #255	; 0xff
 80065cc:	d801      	bhi.n	80065d2 <HAL_GPIO_Init+0x13a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	e001      	b.n	80065d6 <HAL_GPIO_Init+0x13e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3304      	adds	r3, #4
 80065d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2bff      	cmp	r3, #255	; 0xff
 80065dc:	d802      	bhi.n	80065e4 <HAL_GPIO_Init+0x14c>
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	e002      	b.n	80065ea <HAL_GPIO_Init+0x152>
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	3b08      	subs	r3, #8
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	210f      	movs	r1, #15
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	fa01 f303 	lsl.w	r3, r1, r3
 80065f8:	43db      	mvns	r3, r3
 80065fa:	401a      	ands	r2, r3
 80065fc:	6a39      	ldr	r1, [r7, #32]
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	431a      	orrs	r2, r3
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80b1 	beq.w	800677a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006618:	4b4d      	ldr	r3, [pc, #308]	; (8006750 <HAL_GPIO_Init+0x2b8>)
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	4a4c      	ldr	r2, [pc, #304]	; (8006750 <HAL_GPIO_Init+0x2b8>)
 800661e:	f043 0301 	orr.w	r3, r3, #1
 8006622:	6193      	str	r3, [r2, #24]
 8006624:	4b4a      	ldr	r3, [pc, #296]	; (8006750 <HAL_GPIO_Init+0x2b8>)
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006630:	4a48      	ldr	r2, [pc, #288]	; (8006754 <HAL_GPIO_Init+0x2bc>)
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	089b      	lsrs	r3, r3, #2
 8006636:	3302      	adds	r3, #2
 8006638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	220f      	movs	r2, #15
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4013      	ands	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a40      	ldr	r2, [pc, #256]	; (8006758 <HAL_GPIO_Init+0x2c0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <HAL_GPIO_Init+0x1ec>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a3f      	ldr	r2, [pc, #252]	; (800675c <HAL_GPIO_Init+0x2c4>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00d      	beq.n	8006680 <HAL_GPIO_Init+0x1e8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a3e      	ldr	r2, [pc, #248]	; (8006760 <HAL_GPIO_Init+0x2c8>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <HAL_GPIO_Init+0x1e4>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a3d      	ldr	r2, [pc, #244]	; (8006764 <HAL_GPIO_Init+0x2cc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d101      	bne.n	8006678 <HAL_GPIO_Init+0x1e0>
 8006674:	2303      	movs	r3, #3
 8006676:	e006      	b.n	8006686 <HAL_GPIO_Init+0x1ee>
 8006678:	2304      	movs	r3, #4
 800667a:	e004      	b.n	8006686 <HAL_GPIO_Init+0x1ee>
 800667c:	2302      	movs	r3, #2
 800667e:	e002      	b.n	8006686 <HAL_GPIO_Init+0x1ee>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <HAL_GPIO_Init+0x1ee>
 8006684:	2300      	movs	r3, #0
 8006686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006688:	f002 0203 	and.w	r2, r2, #3
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	4093      	lsls	r3, r2
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006696:	492f      	ldr	r1, [pc, #188]	; (8006754 <HAL_GPIO_Init+0x2bc>)
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	3302      	adds	r3, #2
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d006      	beq.n	80066be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80066b0:	4b2d      	ldr	r3, [pc, #180]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	492c      	ldr	r1, [pc, #176]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
 80066bc:	e006      	b.n	80066cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80066be:	4b2a      	ldr	r3, [pc, #168]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	43db      	mvns	r3, r3
 80066c6:	4928      	ldr	r1, [pc, #160]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d006      	beq.n	80066e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80066d8:	4b23      	ldr	r3, [pc, #140]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	4922      	ldr	r1, [pc, #136]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	604b      	str	r3, [r1, #4]
 80066e4:	e006      	b.n	80066f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80066e6:	4b20      	ldr	r3, [pc, #128]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	491e      	ldr	r1, [pc, #120]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 80066f0:	4013      	ands	r3, r2
 80066f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d006      	beq.n	800670e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006700:	4b19      	ldr	r3, [pc, #100]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	4918      	ldr	r1, [pc, #96]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	4313      	orrs	r3, r2
 800670a:	608b      	str	r3, [r1, #8]
 800670c:	e006      	b.n	800671c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800670e:	4b16      	ldr	r3, [pc, #88]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	43db      	mvns	r3, r3
 8006716:	4914      	ldr	r1, [pc, #80]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 8006718:	4013      	ands	r3, r2
 800671a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d021      	beq.n	800676c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	490e      	ldr	r1, [pc, #56]	; (8006768 <HAL_GPIO_Init+0x2d0>)
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	4313      	orrs	r3, r2
 8006732:	60cb      	str	r3, [r1, #12]
 8006734:	e021      	b.n	800677a <HAL_GPIO_Init+0x2e2>
 8006736:	bf00      	nop
 8006738:	10320000 	.word	0x10320000
 800673c:	10310000 	.word	0x10310000
 8006740:	10220000 	.word	0x10220000
 8006744:	10210000 	.word	0x10210000
 8006748:	10120000 	.word	0x10120000
 800674c:	10110000 	.word	0x10110000
 8006750:	40021000 	.word	0x40021000
 8006754:	40010000 	.word	0x40010000
 8006758:	40010800 	.word	0x40010800
 800675c:	40010c00 	.word	0x40010c00
 8006760:	40011000 	.word	0x40011000
 8006764:	40011400 	.word	0x40011400
 8006768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <HAL_GPIO_Init+0x304>)
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	43db      	mvns	r3, r3
 8006774:	4909      	ldr	r1, [pc, #36]	; (800679c <HAL_GPIO_Init+0x304>)
 8006776:	4013      	ands	r3, r2
 8006778:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	3301      	adds	r3, #1
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	fa22 f303 	lsr.w	r3, r2, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	f47f ae8e 	bne.w	80064ac <HAL_GPIO_Init+0x14>
  }
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	372c      	adds	r7, #44	; 0x2c
 8006796:	46bd      	mov	sp, r7
 8006798:	bc80      	pop	{r7}
 800679a:	4770      	bx	lr
 800679c:	40010400 	.word	0x40010400

080067a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	807b      	strh	r3, [r7, #2]
 80067ac:	4613      	mov	r3, r2
 80067ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067b0:	787b      	ldrb	r3, [r7, #1]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067b6:	887a      	ldrh	r2, [r7, #2]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80067bc:	e003      	b.n	80067c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80067be:	887b      	ldrh	r3, [r7, #2]
 80067c0:	041a      	lsls	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	611a      	str	r2, [r3, #16]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e12b      	b.n	8006a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fd f86c 	bl	80038d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	; 0x24
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0201 	bic.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006834:	f003 f9ae 	bl	8009b94 <HAL_RCC_GetPCLK1Freq>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	4a81      	ldr	r2, [pc, #516]	; (8006a44 <HAL_I2C_Init+0x274>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d807      	bhi.n	8006854 <HAL_I2C_Init+0x84>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a80      	ldr	r2, [pc, #512]	; (8006a48 <HAL_I2C_Init+0x278>)
 8006848:	4293      	cmp	r3, r2
 800684a:	bf94      	ite	ls
 800684c:	2301      	movls	r3, #1
 800684e:	2300      	movhi	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e006      	b.n	8006862 <HAL_I2C_Init+0x92>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4a7d      	ldr	r2, [pc, #500]	; (8006a4c <HAL_I2C_Init+0x27c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	bf94      	ite	ls
 800685c:	2301      	movls	r3, #1
 800685e:	2300      	movhi	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e0e7      	b.n	8006a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4a78      	ldr	r2, [pc, #480]	; (8006a50 <HAL_I2C_Init+0x280>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	0c9b      	lsrs	r3, r3, #18
 8006874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4a6a      	ldr	r2, [pc, #424]	; (8006a44 <HAL_I2C_Init+0x274>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d802      	bhi.n	80068a4 <HAL_I2C_Init+0xd4>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	3301      	adds	r3, #1
 80068a2:	e009      	b.n	80068b8 <HAL_I2C_Init+0xe8>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068aa:	fb02 f303 	mul.w	r3, r2, r3
 80068ae:	4a69      	ldr	r2, [pc, #420]	; (8006a54 <HAL_I2C_Init+0x284>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	099b      	lsrs	r3, r3, #6
 80068b6:	3301      	adds	r3, #1
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6812      	ldr	r2, [r2, #0]
 80068bc:	430b      	orrs	r3, r1
 80068be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	495c      	ldr	r1, [pc, #368]	; (8006a44 <HAL_I2C_Init+0x274>)
 80068d4:	428b      	cmp	r3, r1
 80068d6:	d819      	bhi.n	800690c <HAL_I2C_Init+0x13c>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	1e59      	subs	r1, r3, #1
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80068e6:	1c59      	adds	r1, r3, #1
 80068e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068ec:	400b      	ands	r3, r1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <HAL_I2C_Init+0x138>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1e59      	subs	r1, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8006900:	3301      	adds	r3, #1
 8006902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006906:	e051      	b.n	80069ac <HAL_I2C_Init+0x1dc>
 8006908:	2304      	movs	r3, #4
 800690a:	e04f      	b.n	80069ac <HAL_I2C_Init+0x1dc>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d111      	bne.n	8006938 <HAL_I2C_Init+0x168>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	1e58      	subs	r0, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	460b      	mov	r3, r1
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	440b      	add	r3, r1
 8006922:	fbb0 f3f3 	udiv	r3, r0, r3
 8006926:	3301      	adds	r3, #1
 8006928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800692c:	2b00      	cmp	r3, #0
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	e012      	b.n	800695e <HAL_I2C_Init+0x18e>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1e58      	subs	r0, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6859      	ldr	r1, [r3, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	0099      	lsls	r1, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	fbb0 f3f3 	udiv	r3, r0, r3
 800694e:	3301      	adds	r3, #1
 8006950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006954:	2b00      	cmp	r3, #0
 8006956:	bf0c      	ite	eq
 8006958:	2301      	moveq	r3, #1
 800695a:	2300      	movne	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_I2C_Init+0x196>
 8006962:	2301      	movs	r3, #1
 8006964:	e022      	b.n	80069ac <HAL_I2C_Init+0x1dc>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10e      	bne.n	800698c <HAL_I2C_Init+0x1bc>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1e58      	subs	r0, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6859      	ldr	r1, [r3, #4]
 8006976:	460b      	mov	r3, r1
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	440b      	add	r3, r1
 800697c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006980:	3301      	adds	r3, #1
 8006982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698a:	e00f      	b.n	80069ac <HAL_I2C_Init+0x1dc>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1e58      	subs	r0, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6859      	ldr	r1, [r3, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	0099      	lsls	r1, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	fbb0 f3f3 	udiv	r3, r0, r3
 80069a2:	3301      	adds	r3, #1
 80069a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	6809      	ldr	r1, [r1, #0]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69da      	ldr	r2, [r3, #28]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6911      	ldr	r1, [r2, #16]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68d2      	ldr	r2, [r2, #12]
 80069e6:	4311      	orrs	r1, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695a      	ldr	r2, [r3, #20]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0201 	orr.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	000186a0 	.word	0x000186a0
 8006a48:	001e847f 	.word	0x001e847f
 8006a4c:	003d08ff 	.word	0x003d08ff
 8006a50:	431bde83 	.word	0x431bde83
 8006a54:	10624dd3 	.word	0x10624dd3

08006a58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	461a      	mov	r2, r3
 8006a64:	460b      	mov	r3, r1
 8006a66:	817b      	strh	r3, [r7, #10]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a6c:	f7fe fda6 	bl	80055bc <HAL_GetTick>
 8006a70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	f040 80e0 	bne.w	8006c40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	2319      	movs	r3, #25
 8006a86:	2201      	movs	r2, #1
 8006a88:	4970      	ldr	r1, [pc, #448]	; (8006c4c <HAL_I2C_Master_Transmit+0x1f4>)
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f002 fadc 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
 8006a98:	e0d3      	b.n	8006c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_I2C_Master_Transmit+0x50>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e0cc      	b.n	8006c42 <HAL_I2C_Master_Transmit+0x1ea>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d007      	beq.n	8006ace <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0201 	orr.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006adc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2221      	movs	r2, #33	; 0x21
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2210      	movs	r2, #16
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	893a      	ldrh	r2, [r7, #8]
 8006afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a50      	ldr	r2, [pc, #320]	; (8006c50 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b10:	8979      	ldrh	r1, [r7, #10]
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a3a      	ldr	r2, [r7, #32]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f002 f860 	bl	8008bdc <I2C_MasterRequestWrite>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e08d      	b.n	8006c42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	613b      	str	r3, [r7, #16]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b3c:	e066      	b.n	8006c0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	6a39      	ldr	r1, [r7, #32]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f002 fb56 	bl	80091f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	d107      	bne.n	8006b66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e06b      	b.n	8006c42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	781a      	ldrb	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	3b01      	subs	r3, #1
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d11b      	bne.n	8006be0 <HAL_I2C_Master_Transmit+0x188>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d017      	beq.n	8006be0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	6a39      	ldr	r1, [r7, #32]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f002 fb46 	bl	8009276 <I2C_WaitOnBTFFlagUntilTimeout>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00d      	beq.n	8006c0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d107      	bne.n	8006c08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e01a      	b.n	8006c42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d194      	bne.n	8006b3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c40:	2302      	movs	r3, #2
  }
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	00100002 	.word	0x00100002
 8006c50:	ffff0000 	.word	0xffff0000

08006c54 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	607a      	str	r2, [r7, #4]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	460b      	mov	r3, r1
 8006c62:	817b      	strh	r3, [r7, #10]
 8006c64:	4613      	mov	r3, r2
 8006c66:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b20      	cmp	r3, #32
 8006c76:	f040 8105 	bne.w	8006e84 <HAL_I2C_Master_Receive_DMA+0x230>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c7a:	4b85      	ldr	r3, [pc, #532]	; (8006e90 <HAL_I2C_Master_Receive_DMA+0x23c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	08db      	lsrs	r3, r3, #3
 8006c80:	4a84      	ldr	r2, [pc, #528]	; (8006e94 <HAL_I2C_Master_Receive_DMA+0x240>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	0a1a      	lsrs	r2, r3, #8
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009a      	lsls	r2, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d116      	bne.n	8006cce <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f043 0220 	orr.w	r2, r3, #32
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e0db      	b.n	8006e86 <HAL_I2C_Master_Receive_DMA+0x232>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d0db      	beq.n	8006c94 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_I2C_Master_Receive_DMA+0x96>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0cd      	b.n	8006e86 <HAL_I2C_Master_Receive_DMA+0x232>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d007      	beq.n	8006d10 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0201 	orr.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2222      	movs	r2, #34	; 0x22
 8006d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2210      	movs	r2, #16
 8006d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	893a      	ldrh	r2, [r7, #8]
 8006d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a52      	ldr	r2, [pc, #328]	; (8006e98 <HAL_I2C_Master_Receive_DMA+0x244>)
 8006d50:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006d52:	897a      	ldrh	r2, [r7, #10]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d073      	beq.n	8006e48 <HAL_I2C_Master_Receive_DMA+0x1f4>
    {
      if (hi2c->hdmarx != NULL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d022      	beq.n	8006dae <HAL_I2C_Master_Receive_DMA+0x15a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	4a4b      	ldr	r2, [pc, #300]	; (8006e9c <HAL_I2C_Master_Receive_DMA+0x248>)
 8006d6e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	4a4a      	ldr	r2, [pc, #296]	; (8006ea0 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	2200      	movs	r2, #0
 8006d86:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3310      	adds	r3, #16
 8006d92:	4619      	mov	r1, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9e:	f7ff f965 	bl	800606c <HAL_DMA_Start_IT>
 8006da2:	4603      	mov	r3, r0
 8006da4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d139      	bne.n	8006e20 <HAL_I2C_Master_Receive_DMA+0x1cc>
 8006dac:	e013      	b.n	8006dd6 <HAL_I2C_Master_Receive_DMA+0x182>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e057      	b.n	8006e86 <HAL_I2C_Master_Receive_DMA+0x232>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006de4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006df4:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006e0c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	e02f      	b.n	8006e80 <HAL_I2C_Master_Receive_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f043 0210 	orr.w	r2, r3, #16
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e01e      	b.n	8006e86 <HAL_I2C_Master_Receive_DMA+0x232>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006e5e:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e6e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e7e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e000      	b.n	8006e86 <HAL_I2C_Master_Receive_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8006e84:	2302      	movs	r3, #2
  }
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000004 	.word	0x20000004
 8006e94:	14f8b589 	.word	0x14f8b589
 8006e98:	ffff0000 	.word	0xffff0000
 8006e9c:	08008ce1 	.word	0x08008ce1
 8006ea0:	08008e8b 	.word	0x08008e8b

08006ea4 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ec0:	2b28      	cmp	r3, #40	; 0x28
 8006ec2:	f040 811e 	bne.w	8007102 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e116      	b.n	8007104 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e10f      	b.n	8007104 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685a      	ldr	r2, [r3, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006efa:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b2a      	cmp	r3, #42	; 0x2a
 8006f06:	d127      	bne.n	8006f58 <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f16:	d14c      	bne.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d048      	beq.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f2e:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	4a75      	ldr	r2, [pc, #468]	; (800710c <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006f36:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff f8f5 	bl	800612c <HAL_DMA_Abort_IT>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d034      	beq.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f52:	4610      	mov	r0, r2
 8006f54:	4798      	blx	r3
 8006f56:	e02c      	b.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b29      	cmp	r3, #41	; 0x29
 8006f62:	d126      	bne.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f72:	d11e      	bne.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f82:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d012      	beq.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f90:	4a5e      	ldr	r2, [pc, #376]	; (800710c <HAL_I2C_Slave_Seq_Transmit_DMA+0x268>)
 8006f92:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff f8c7 	bl	800612c <HAL_DMA_Abort_IT>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d006      	beq.n	8006fb2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d007      	beq.n	8006fd0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2229      	movs	r2, #41	; 0x29
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007016:	2b00      	cmp	r3, #0
 8007018:	d022      	beq.n	8007060 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701e:	4a3c      	ldr	r2, [pc, #240]	; (8007110 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26c>)
 8007020:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007026:	4a3b      	ldr	r2, [pc, #236]	; (8007114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x270>)
 8007028:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	2200      	movs	r2, #0
 8007030:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007036:	2200      	movs	r2, #0
 8007038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	4619      	mov	r1, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3310      	adds	r3, #16
 800704a:	461a      	mov	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007050:	f7ff f80c 	bl	800606c <HAL_DMA_Start_IT>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d13d      	bne.n	80070da <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800705e:	e013      	b.n	8007088 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2228      	movs	r2, #40	; 0x28
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e03d      	b.n	8007104 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007096:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007098:	2300      	movs	r3, #0
 800709a:	613b      	str	r3, [r7, #16]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80070c4:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070d4:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	e014      	b.n	8007104 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	f043 0210 	orr.w	r2, r3, #16
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8007102:	2302      	movs	r3, #2
  }
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	08008ef9 	.word	0x08008ef9
 8007110:	08008ce1 	.word	0x08008ce1
 8007114:	08008e8b 	.word	0x08008e8b

08007118 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007134:	2b28      	cmp	r3, #40	; 0x28
 8007136:	f040 811e 	bne.w	8007376 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 8007140:	88fb      	ldrh	r3, [r7, #6]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e116      	b.n	8007378 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 8007154:	2302      	movs	r3, #2
 8007156:	e10f      	b.n	8007378 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800716e:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b2a      	cmp	r3, #42	; 0x2a
 800717a:	d127      	bne.n	80071cc <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800718a:	d14c      	bne.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d048      	beq.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071a2:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	4a75      	ldr	r2, [pc, #468]	; (8007380 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 80071aa:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe ffbb 	bl	800612c <HAL_DMA_Abort_IT>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d034      	beq.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071c6:	4610      	mov	r0, r2
 80071c8:	4798      	blx	r3
 80071ca:	e02c      	b.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b29      	cmp	r3, #41	; 0x29
 80071d6:	d126      	bne.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e6:	d11e      	bne.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071f6:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d012      	beq.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	4a5e      	ldr	r2, [pc, #376]	; (8007380 <HAL_I2C_Slave_Seq_Receive_DMA+0x268>)
 8007206:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe ff8d 	bl	800612c <HAL_DMA_Abort_IT>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d006      	beq.n	8007226 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007222:	4610      	mov	r0, r2
 8007224:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b01      	cmp	r3, #1
 8007232:	d007      	beq.n	8007244 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007252:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	222a      	movs	r2, #42	; 0x2a
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	88fa      	ldrh	r2, [r7, #6]
 8007274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	2b00      	cmp	r3, #0
 800728c:	d022      	beq.n	80072d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	4a3c      	ldr	r2, [pc, #240]	; (8007384 <HAL_I2C_Slave_Seq_Receive_DMA+0x26c>)
 8007294:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	4a3b      	ldr	r2, [pc, #236]	; (8007388 <HAL_I2C_Slave_Seq_Receive_DMA+0x270>)
 800729c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	2200      	movs	r2, #0
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmarx->XferAbortCallback = NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072aa:	2200      	movs	r2, #0
 80072ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3310      	adds	r3, #16
 80072b8:	4619      	mov	r1, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	461a      	mov	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c4:	f7fe fed2 	bl	800606c <HAL_DMA_Start_IT>
 80072c8:	4603      	mov	r3, r0
 80072ca:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d13d      	bne.n	800734e <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 80072d2:	e013      	b.n	80072fc <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2228      	movs	r2, #40	; 0x28
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e03d      	b.n	8007378 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800730c:	2300      	movs	r3, #0
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007338:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007348:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e014      	b.n	8007378 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2220      	movs	r2, #32
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f043 0210 	orr.w	r2, r3, #16
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	08008ef9 	.word	0x08008ef9
 8007384:	08008ce1 	.word	0x08008ce1
 8007388:	08008e8b 	.word	0x08008e8b

0800738c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b20      	cmp	r3, #32
 800739e:	d124      	bne.n	80073ea <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2228      	movs	r2, #40	; 0x28
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d007      	beq.n	80073c6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073d4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80073e4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e000      	b.n	80073ec <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80073ea:	2302      	movs	r3, #2
  }
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr

080073f6 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b28      	cmp	r3, #40	; 0x28
 8007408:	d129      	bne.n	800745e <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800741e:	b2db      	uxtb	r3, r3
 8007420:	461a      	mov	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007448:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007458:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	4618      	mov	r0, r3
 8007462:	3714      	adds	r7, #20
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr

0800746a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b088      	sub	sp, #32
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007482:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007492:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007494:	7bfb      	ldrb	r3, [r7, #15]
 8007496:	2b10      	cmp	r3, #16
 8007498:	d003      	beq.n	80074a2 <HAL_I2C_EV_IRQHandler+0x38>
 800749a:	7bfb      	ldrb	r3, [r7, #15]
 800749c:	2b40      	cmp	r3, #64	; 0x40
 800749e:	f040 80c1 	bne.w	8007624 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10d      	bne.n	80074d8 <HAL_I2C_EV_IRQHandler+0x6e>
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80074c2:	d003      	beq.n	80074cc <HAL_I2C_EV_IRQHandler+0x62>
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80074ca:	d101      	bne.n	80074d0 <HAL_I2C_EV_IRQHandler+0x66>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <HAL_I2C_EV_IRQHandler+0x68>
 80074d0:	2300      	movs	r3, #0
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	f000 8132 	beq.w	800773c <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00c      	beq.n	80074fc <HAL_I2C_EV_IRQHandler+0x92>
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	0a5b      	lsrs	r3, r3, #9
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 ff62 	bl	80093b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fd4f 	bl	8007f98 <I2C_Master_SB>
 80074fa:	e092      	b.n	8007622 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	08db      	lsrs	r3, r3, #3
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <HAL_I2C_EV_IRQHandler+0xb2>
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	0a5b      	lsrs	r3, r3, #9
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fdc4 	bl	80080a2 <I2C_Master_ADD10>
 800751a:	e082      	b.n	8007622 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <HAL_I2C_EV_IRQHandler+0xd2>
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	0a5b      	lsrs	r3, r3, #9
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fddd 	bl	80080f4 <I2C_Master_ADDR>
 800753a:	e072      	b.n	8007622 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	089b      	lsrs	r3, r3, #2
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d03b      	beq.n	80075c0 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007556:	f000 80f3 	beq.w	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	09db      	lsrs	r3, r3, #7
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00f      	beq.n	8007586 <HAL_I2C_EV_IRQHandler+0x11c>
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	0a9b      	lsrs	r3, r3, #10
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d009      	beq.n	8007586 <HAL_I2C_EV_IRQHandler+0x11c>
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	089b      	lsrs	r3, r3, #2
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9c9 	bl	8007916 <I2C_MasterTransmit_TXE>
 8007584:	e04d      	b.n	8007622 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	089b      	lsrs	r3, r3, #2
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80d6 	beq.w	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	0a5b      	lsrs	r3, r3, #9
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80cf 	beq.w	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	2b21      	cmp	r3, #33	; 0x21
 80075a6:	d103      	bne.n	80075b0 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa50 	bl	8007a4e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075ae:	e0c7      	b.n	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80075b0:	7bfb      	ldrb	r3, [r7, #15]
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	f040 80c4 	bne.w	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fabe 	bl	8007b3a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075be:	e0bf      	b.n	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ce:	f000 80b7 	beq.w	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	099b      	lsrs	r3, r3, #6
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00f      	beq.n	80075fe <HAL_I2C_EV_IRQHandler+0x194>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	0a9b      	lsrs	r3, r3, #10
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d009      	beq.n	80075fe <HAL_I2C_EV_IRQHandler+0x194>
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	089b      	lsrs	r3, r3, #2
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d103      	bne.n	80075fe <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fb33 	bl	8007c62 <I2C_MasterReceive_RXNE>
 80075fc:	e011      	b.n	8007622 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	089b      	lsrs	r3, r3, #2
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	f000 809a 	beq.w	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	0a5b      	lsrs	r3, r3, #9
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 8093 	beq.w	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fbd2 	bl	8007dc4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007620:	e08e      	b.n	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007622:	e08d      	b.n	8007740 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	e007      	b.n	8007646 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	085b      	lsrs	r3, r3, #1
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d012      	beq.n	8007678 <HAL_I2C_EV_IRQHandler+0x20e>
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	0a5b      	lsrs	r3, r3, #9
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00c      	beq.n	8007678 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800766e:	69b9      	ldr	r1, [r7, #24]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 ff96 	bl	80085a2 <I2C_Slave_ADDR>
 8007676:	e066      	b.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	091b      	lsrs	r3, r3, #4
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <HAL_I2C_EV_IRQHandler+0x22e>
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	0a5b      	lsrs	r3, r3, #9
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d003      	beq.n	8007698 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 ffd1 	bl	8008638 <I2C_Slave_STOPF>
 8007696:	e056      	b.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b21      	cmp	r3, #33	; 0x21
 800769c:	d002      	beq.n	80076a4 <HAL_I2C_EV_IRQHandler+0x23a>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b29      	cmp	r3, #41	; 0x29
 80076a2:	d125      	bne.n	80076f0 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	09db      	lsrs	r3, r3, #7
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00f      	beq.n	80076d0 <HAL_I2C_EV_IRQHandler+0x266>
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	0a9b      	lsrs	r3, r3, #10
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d009      	beq.n	80076d0 <HAL_I2C_EV_IRQHandler+0x266>
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	089b      	lsrs	r3, r3, #2
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d103      	bne.n	80076d0 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 feae 	bl	800842a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076ce:	e039      	b.n	8007744 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	089b      	lsrs	r3, r3, #2
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d033      	beq.n	8007744 <HAL_I2C_EV_IRQHandler+0x2da>
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	0a5b      	lsrs	r3, r3, #9
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d02d      	beq.n	8007744 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fedb 	bl	80084a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076ee:	e029      	b.n	8007744 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	099b      	lsrs	r3, r3, #6
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00f      	beq.n	800771c <HAL_I2C_EV_IRQHandler+0x2b2>
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	0a9b      	lsrs	r3, r3, #10
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d009      	beq.n	800771c <HAL_I2C_EV_IRQHandler+0x2b2>
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	089b      	lsrs	r3, r3, #2
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fee5 	bl	80084e4 <I2C_SlaveReceive_RXNE>
 800771a:	e014      	b.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	089b      	lsrs	r3, r3, #2
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	0a5b      	lsrs	r3, r3, #9
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 ff13 	bl	8008560 <I2C_SlaveReceive_BTF>
 800773a:	e004      	b.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800773c:	bf00      	nop
 800773e:	e002      	b.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007740:	bf00      	nop
 8007742:	e000      	b.n	8007746 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007744:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08a      	sub	sp, #40	; 0x28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007764:	2300      	movs	r3, #0
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776e:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	0a1b      	lsrs	r3, r3, #8
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d016      	beq.n	80077aa <HAL_I2C_ER_IRQHandler+0x5e>
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	0a1b      	lsrs	r3, r3, #8
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d010      	beq.n	80077aa <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	f043 0301 	orr.w	r3, r3, #1
 800778e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007798:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077a8:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	0a5b      	lsrs	r3, r3, #9
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00e      	beq.n	80077d4 <HAL_I2C_ER_IRQHandler+0x88>
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	0a1b      	lsrs	r3, r3, #8
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c4:	f043 0302 	orr.w	r3, r3, #2
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80077d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	0a9b      	lsrs	r3, r3, #10
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d03f      	beq.n	8007860 <HAL_I2C_ER_IRQHandler+0x114>
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	0a1b      	lsrs	r3, r3, #8
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d039      	beq.n	8007860 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80077ec:	7efb      	ldrb	r3, [r7, #27]
 80077ee:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077fe:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007806:	7ebb      	ldrb	r3, [r7, #26]
 8007808:	2b20      	cmp	r3, #32
 800780a:	d112      	bne.n	8007832 <HAL_I2C_ER_IRQHandler+0xe6>
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <HAL_I2C_ER_IRQHandler+0xe6>
 8007812:	7cfb      	ldrb	r3, [r7, #19]
 8007814:	2b21      	cmp	r3, #33	; 0x21
 8007816:	d008      	beq.n	800782a <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007818:	7cfb      	ldrb	r3, [r7, #19]
 800781a:	2b29      	cmp	r3, #41	; 0x29
 800781c:	d005      	beq.n	800782a <HAL_I2C_ER_IRQHandler+0xde>
 800781e:	7cfb      	ldrb	r3, [r7, #19]
 8007820:	2b28      	cmp	r3, #40	; 0x28
 8007822:	d106      	bne.n	8007832 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b21      	cmp	r3, #33	; 0x21
 8007828:	d103      	bne.n	8007832 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 f834 	bl	8008898 <I2C_Slave_AF>
 8007830:	e016      	b.n	8007860 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800783a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	f043 0304 	orr.w	r3, r3, #4
 8007842:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007844:	7efb      	ldrb	r3, [r7, #27]
 8007846:	2b10      	cmp	r3, #16
 8007848:	d002      	beq.n	8007850 <HAL_I2C_ER_IRQHandler+0x104>
 800784a:	7efb      	ldrb	r3, [r7, #27]
 800784c:	2b40      	cmp	r3, #64	; 0x40
 800784e:	d107      	bne.n	8007860 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800785e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	0adb      	lsrs	r3, r3, #11
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00e      	beq.n	800788a <HAL_I2C_ER_IRQHandler+0x13e>
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d008      	beq.n	800788a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	f043 0308 	orr.w	r3, r3, #8
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007888:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f001 f86b 	bl	8008978 <I2C_ITError>
  }
}
 80078a2:	bf00      	nop
 80078a4:	3728      	adds	r7, #40	; 0x28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bc80      	pop	{r7}
 80078ba:	4770      	bx	lr

080078bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr

080078ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr

080078e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc80      	pop	{r7}
 80078f0:	4770      	bx	lr

080078f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b083      	sub	sp, #12
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80078fa:	bf00      	nop
 80078fc:	370c      	adds	r7, #12
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr

08007904 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr

08007916 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800792c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d150      	bne.n	80079de <I2C_MasterTransmit_TXE+0xc8>
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b21      	cmp	r3, #33	; 0x21
 8007940:	d14d      	bne.n	80079de <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b08      	cmp	r3, #8
 8007946:	d01d      	beq.n	8007984 <I2C_MasterTransmit_TXE+0x6e>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b20      	cmp	r3, #32
 800794c:	d01a      	beq.n	8007984 <I2C_MasterTransmit_TXE+0x6e>
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007954:	d016      	beq.n	8007984 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007964:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2211      	movs	r2, #17
 800796a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ff94 	bl	80078aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007982:	e060      	b.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007992:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079a2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b40      	cmp	r3, #64	; 0x40
 80079bc:	d107      	bne.n	80079ce <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff ff8a 	bl	80078e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079cc:	e03b      	b.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff ff67 	bl	80078aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80079dc:	e033      	b.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b21      	cmp	r3, #33	; 0x21
 80079e2:	d005      	beq.n	80079f0 <I2C_MasterTransmit_TXE+0xda>
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d12d      	bne.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	2b22      	cmp	r3, #34	; 0x22
 80079ee:	d12a      	bne.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d108      	bne.n	8007a0c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a08:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007a0a:	e01c      	b.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b40      	cmp	r3, #64	; 0x40
 8007a16:	d103      	bne.n	8007a20 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f88e 	bl	8007b3a <I2C_MemoryTransmit_TXE_BTF>
}
 8007a1e:	e012      	b.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	781a      	ldrb	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007a44:	e7ff      	b.n	8007a46 <I2C_MasterTransmit_TXE+0x130>
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b21      	cmp	r3, #33	; 0x21
 8007a66:	d164      	bne.n	8007b32 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d012      	beq.n	8007a98 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007a96:	e04c      	b.n	8007b32 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	d01d      	beq.n	8007ada <I2C_MasterTransmit_BTF+0x8c>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b20      	cmp	r3, #32
 8007aa2:	d01a      	beq.n	8007ada <I2C_MasterTransmit_BTF+0x8c>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007aaa:	d016      	beq.n	8007ada <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2211      	movs	r2, #17
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fee9 	bl	80078aa <HAL_I2C_MasterTxCpltCallback>
}
 8007ad8:	e02b      	b.n	8007b32 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ae8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007af8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b40      	cmp	r3, #64	; 0x40
 8007b12:	d107      	bne.n	8007b24 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7ff fedf 	bl	80078e0 <HAL_I2C_MemTxCpltCallback>
}
 8007b22:	e006      	b.n	8007b32 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff febc 	bl	80078aa <HAL_I2C_MasterTxCpltCallback>
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11d      	bne.n	8007b8e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d10b      	bne.n	8007b72 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b5e:	b2da      	uxtb	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6a:	1c9a      	adds	r2, r3, #2
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007b70:	e073      	b.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	121b      	asrs	r3, r3, #8
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007b8c:	e065      	b.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d10b      	bne.n	8007bae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	1c5a      	adds	r2, r3, #1
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007bac:	e055      	b.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d151      	bne.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007bb6:	7bfb      	ldrb	r3, [r7, #15]
 8007bb8:	2b22      	cmp	r3, #34	; 0x22
 8007bba:	d10d      	bne.n	8007bd8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007bd6:	e040      	b.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d015      	beq.n	8007c0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b21      	cmp	r3, #33	; 0x21
 8007be6:	d112      	bne.n	8007c0e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	3b01      	subs	r3, #1
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c0c:	e025      	b.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d120      	bne.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	2b21      	cmp	r3, #33	; 0x21
 8007c1c:	d11d      	bne.n	8007c5a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c2c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff fe43 	bl	80078e0 <HAL_I2C_MemTxCpltCallback>
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b22      	cmp	r3, #34	; 0x22
 8007c74:	f040 80a2 	bne.w	8007dbc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d921      	bls.n	8007cca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	1c5a      	adds	r2, r3, #1
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	f040 8082 	bne.w	8007dbc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8007cc8:	e078      	b.n	8007dbc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d074      	beq.n	8007dbc <I2C_MasterReceive_RXNE+0x15a>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d002      	beq.n	8007cde <I2C_MasterReceive_RXNE+0x7c>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d16e      	bne.n	8007dbc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fb0a 	bl	80092f8 <I2C_WaitOnSTOPRequestThroughIT>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d142      	bne.n	8007d70 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cf8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	b2d2      	uxtb	r2, r2
 8007d16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b40      	cmp	r3, #64	; 0x40
 8007d42:	d10a      	bne.n	8007d5a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff fdcd 	bl	80078f2 <HAL_I2C_MemRxCpltCallback>
}
 8007d58:	e030      	b.n	8007dbc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2212      	movs	r2, #18
 8007d66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fb f8af 	bl	8002ecc <HAL_I2C_MasterRxCpltCallback>
}
 8007d6e:	e025      	b.n	8007dbc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691a      	ldr	r2, [r3, #16]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2220      	movs	r2, #32
 8007daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fb f8fa 	bl	8002fb0 <HAL_I2C_ErrorCallback>
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d11b      	bne.n	8007e14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	691a      	ldr	r2, [r3, #16]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007e12:	e0bd      	b.n	8007f90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b03      	cmp	r3, #3
 8007e1c:	d129      	bne.n	8007e72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d00a      	beq.n	8007e4a <I2C_MasterReceive_BTF+0x86>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d007      	beq.n	8007e4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007e70:	e08e      	b.n	8007f90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d176      	bne.n	8007f6a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d002      	beq.n	8007e88 <I2C_MasterReceive_BTF+0xc4>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d108      	bne.n	8007e9a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	e019      	b.n	8007ece <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d002      	beq.n	8007ea6 <I2C_MasterReceive_BTF+0xe2>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d108      	bne.n	8007eb8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e00a      	b.n	8007ece <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b10      	cmp	r3, #16
 8007ebc:	d007      	beq.n	8007ece <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ecc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691a      	ldr	r2, [r3, #16]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	3b01      	subs	r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007f28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	2b40      	cmp	r3, #64	; 0x40
 8007f3c:	d10a      	bne.n	8007f54 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff fcd0 	bl	80078f2 <HAL_I2C_MemRxCpltCallback>
}
 8007f52:	e01d      	b.n	8007f90 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2212      	movs	r2, #18
 8007f60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fa ffb2 	bl	8002ecc <HAL_I2C_MasterRxCpltCallback>
}
 8007f68:	e012      	b.n	8007f90 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	691a      	ldr	r2, [r3, #16]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	b2d2      	uxtb	r2, r2
 8007f76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f90:	bf00      	nop
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b40      	cmp	r3, #64	; 0x40
 8007faa:	d117      	bne.n	8007fdc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fc4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007fc6:	e067      	b.n	8008098 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f043 0301 	orr.w	r3, r3, #1
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	611a      	str	r2, [r3, #16]
}
 8007fda:	e05d      	b.n	8008098 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fe4:	d133      	bne.n	800804e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b21      	cmp	r3, #33	; 0x21
 8007ff0:	d109      	bne.n	8008006 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008002:	611a      	str	r2, [r3, #16]
 8008004:	e008      	b.n	8008018 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f043 0301 	orr.w	r3, r3, #1
 8008010:	b2da      	uxtb	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <I2C_Master_SB+0x92>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	2b00      	cmp	r3, #0
 8008028:	d108      	bne.n	800803c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802e:	2b00      	cmp	r3, #0
 8008030:	d032      	beq.n	8008098 <I2C_Master_SB+0x100>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	2b00      	cmp	r3, #0
 800803a:	d02d      	beq.n	8008098 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804a:	605a      	str	r2, [r3, #4]
}
 800804c:	e024      	b.n	8008098 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10e      	bne.n	8008074 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805a:	b29b      	uxth	r3, r3
 800805c:	11db      	asrs	r3, r3, #7
 800805e:	b2db      	uxtb	r3, r3
 8008060:	f003 0306 	and.w	r3, r3, #6
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f063 030f 	orn	r3, r3, #15
 800806a:	b2da      	uxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	611a      	str	r2, [r3, #16]
}
 8008072:	e011      	b.n	8008098 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008078:	2b01      	cmp	r3, #1
 800807a:	d10d      	bne.n	8008098 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008080:	b29b      	uxth	r3, r3
 8008082:	11db      	asrs	r3, r3, #7
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0306 	and.w	r3, r3, #6
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f063 030e 	orn	r3, r3, #14
 8008090:	b2da      	uxtb	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	611a      	str	r2, [r3, #16]
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr

080080a2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d004      	beq.n	80080c8 <I2C_Master_ADD10+0x26>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d108      	bne.n	80080da <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00c      	beq.n	80080ea <I2C_Master_ADD10+0x48>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e8:	605a      	str	r2, [r3, #4]
  }
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b091      	sub	sp, #68	; 0x44
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b22      	cmp	r3, #34	; 0x22
 800811c:	f040 8174 	bne.w	8008408 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10f      	bne.n	8008148 <I2C_Master_ADDR+0x54>
 8008128:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800812c:	2b40      	cmp	r3, #64	; 0x40
 800812e:	d10b      	bne.n	8008148 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008130:	2300      	movs	r3, #0
 8008132:	633b      	str	r3, [r7, #48]	; 0x30
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	633b      	str	r3, [r7, #48]	; 0x30
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	633b      	str	r3, [r7, #48]	; 0x30
 8008144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008146:	e16b      	b.n	8008420 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814c:	2b00      	cmp	r3, #0
 800814e:	d11d      	bne.n	800818c <I2C_Master_ADDR+0x98>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008158:	d118      	bne.n	800818c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800815a:	2300      	movs	r3, #0
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800817e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	651a      	str	r2, [r3, #80]	; 0x50
 800818a:	e149      	b.n	8008420 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d113      	bne.n	80081be <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008196:	2300      	movs	r3, #0
 8008198:	62bb      	str	r3, [r7, #40]	; 0x28
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e120      	b.n	8008400 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	f040 808a 	bne.w	80082de <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081d0:	d137      	bne.n	8008242 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081e0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d113      	bne.n	800821a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008200:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008202:	2300      	movs	r3, #0
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
 8008216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008218:	e0f2      	b.n	8008400 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800821a:	2300      	movs	r3, #0
 800821c:	623b      	str	r3, [r7, #32]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	623b      	str	r3, [r7, #32]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	623b      	str	r3, [r7, #32]
 800822e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	e0de      	b.n	8008400 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	2b08      	cmp	r3, #8
 8008246:	d02e      	beq.n	80082a6 <I2C_Master_ADDR+0x1b2>
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	2b20      	cmp	r3, #32
 800824c:	d02b      	beq.n	80082a6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800824e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008250:	2b12      	cmp	r3, #18
 8008252:	d102      	bne.n	800825a <I2C_Master_ADDR+0x166>
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	2b01      	cmp	r3, #1
 8008258:	d125      	bne.n	80082a6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	2b04      	cmp	r3, #4
 800825e:	d00e      	beq.n	800827e <I2C_Master_ADDR+0x18a>
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	2b02      	cmp	r3, #2
 8008264:	d00b      	beq.n	800827e <I2C_Master_ADDR+0x18a>
 8008266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008268:	2b10      	cmp	r3, #16
 800826a:	d008      	beq.n	800827e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	e007      	b.n	800828e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800828c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800828e:	2300      	movs	r3, #0
 8008290:	61fb      	str	r3, [r7, #28]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	61fb      	str	r3, [r7, #28]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	61fb      	str	r3, [r7, #28]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	e0ac      	b.n	8008400 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082b4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082b6:	2300      	movs	r3, #0
 80082b8:	61bb      	str	r3, [r7, #24]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	61bb      	str	r3, [r7, #24]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	e090      	b.n	8008400 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d158      	bne.n	800839a <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d021      	beq.n	8008332 <I2C_Master_ADDR+0x23e>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d01e      	beq.n	8008332 <I2C_Master_ADDR+0x23e>
 80082f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f6:	2b10      	cmp	r3, #16
 80082f8:	d01b      	beq.n	8008332 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008308:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800830a:	2300      	movs	r3, #0
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	617b      	str	r3, [r7, #20]
 800831e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	e012      	b.n	8008358 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008340:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008342:	2300      	movs	r3, #0
 8008344:	613b      	str	r3, [r7, #16]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	613b      	str	r3, [r7, #16]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008366:	d14b      	bne.n	8008400 <I2C_Master_ADDR+0x30c>
 8008368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800836e:	d00b      	beq.n	8008388 <I2C_Master_ADDR+0x294>
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	2b01      	cmp	r3, #1
 8008374:	d008      	beq.n	8008388 <I2C_Master_ADDR+0x294>
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	2b08      	cmp	r3, #8
 800837a:	d005      	beq.n	8008388 <I2C_Master_ADDR+0x294>
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	2b10      	cmp	r3, #16
 8008380:	d002      	beq.n	8008388 <I2C_Master_ADDR+0x294>
 8008382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008384:	2b20      	cmp	r3, #32
 8008386:	d13b      	bne.n	8008400 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008396:	605a      	str	r2, [r3, #4]
 8008398:	e032      	b.n	8008400 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b8:	d117      	bne.n	80083ea <I2C_Master_ADDR+0x2f6>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083c0:	d00b      	beq.n	80083da <I2C_Master_ADDR+0x2e6>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d008      	beq.n	80083da <I2C_Master_ADDR+0x2e6>
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d005      	beq.n	80083da <I2C_Master_ADDR+0x2e6>
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	d002      	beq.n	80083da <I2C_Master_ADDR+0x2e6>
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	2b20      	cmp	r3, #32
 80083d8:	d107      	bne.n	80083ea <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008406:	e00b      	b.n	8008420 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008408:	2300      	movs	r3, #0
 800840a:	60bb      	str	r3, [r7, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	60bb      	str	r3, [r7, #8]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	60bb      	str	r3, [r7, #8]
 800841c:	68bb      	ldr	r3, [r7, #8]
}
 800841e:	e7ff      	b.n	8008420 <I2C_Master_ADDR+0x32c>
 8008420:	bf00      	nop
 8008422:	3744      	adds	r7, #68	; 0x44
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr

0800842a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008438:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843e:	b29b      	uxth	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	d02b      	beq.n	800849c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	3b01      	subs	r3, #1
 8008462:	b29a      	uxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d114      	bne.n	800849c <I2C_SlaveTransmit_TXE+0x72>
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	2b29      	cmp	r3, #41	; 0x29
 8008476:	d111      	bne.n	800849c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008486:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2221      	movs	r2, #33	; 0x21
 800848c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2228      	movs	r2, #40	; 0x28
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff fa10 	bl	80078bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800849c:	bf00      	nop
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d011      	beq.n	80084da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	781a      	ldrb	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80084da:	bf00      	nop
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d02c      	beq.n	8008558 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851a:	b29b      	uxth	r3, r3
 800851c:	3b01      	subs	r3, #1
 800851e:	b29a      	uxth	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d114      	bne.n	8008558 <I2C_SlaveReceive_RXNE+0x74>
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	2b2a      	cmp	r3, #42	; 0x2a
 8008532:	d111      	bne.n	8008558 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008542:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2222      	movs	r2, #34	; 0x22
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2228      	movs	r2, #40	; 0x28
 800854e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff f9bb 	bl	80078ce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008558:	bf00      	nop
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d012      	beq.n	8008598 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858e:	b29b      	uxth	r3, r3
 8008590:	3b01      	subs	r3, #1
 8008592:	b29a      	uxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr

080085a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80085bc:	2b28      	cmp	r3, #40	; 0x28
 80085be:	d127      	bne.n	8008610 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	089b      	lsrs	r3, r3, #2
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80085dc:	2301      	movs	r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	09db      	lsrs	r3, r3, #7
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	81bb      	strh	r3, [r7, #12]
 80085f2:	e002      	b.n	80085fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008602:	89ba      	ldrh	r2, [r7, #12]
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	4619      	mov	r1, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7fa fc3b 	bl	8002e84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800860e:	e00e      	b.n	800862e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	60bb      	str	r3, [r7, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	60bb      	str	r3, [r7, #8]
 8008624:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008646:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008656:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008658:	2300      	movs	r3, #0
 800865a:	60bb      	str	r3, [r7, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	60bb      	str	r3, [r7, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f042 0201 	orr.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008684:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008694:	d172      	bne.n	800877c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	2b22      	cmp	r3, #34	; 0x22
 800869a:	d002      	beq.n	80086a2 <I2C_Slave_STOPF+0x6a>
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2b2a      	cmp	r3, #42	; 0x2a
 80086a0:	d135      	bne.n	800870e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f043 0204 	orr.w	r2, r3, #4
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fd fea2 	bl	8006424 <HAL_DMA_GetState>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d049      	beq.n	800877a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	4a69      	ldr	r2, [pc, #420]	; (8008890 <I2C_Slave_STOPF+0x258>)
 80086ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fd fd1a 	bl	800612c <HAL_DMA_Abort_IT>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d03d      	beq.n	800877a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800870c:	e035      	b.n	800877a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008720:	b29b      	uxth	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	f043 0204 	orr.w	r2, r3, #4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008740:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008746:	4618      	mov	r0, r3
 8008748:	f7fd fe6c 	bl	8006424 <HAL_DMA_GetState>
 800874c:	4603      	mov	r3, r0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d014      	beq.n	800877c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008756:	4a4e      	ldr	r2, [pc, #312]	; (8008890 <I2C_Slave_STOPF+0x258>)
 8008758:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875e:	4618      	mov	r0, r3
 8008760:	f7fd fce4 	bl	800612c <HAL_DMA_Abort_IT>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d008      	beq.n	800877c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008774:	4610      	mov	r0, r2
 8008776:	4798      	blx	r3
 8008778:	e000      	b.n	800877c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800877a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d03e      	beq.n	8008804 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b04      	cmp	r3, #4
 8008792:	d112      	bne.n	80087ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b40      	cmp	r3, #64	; 0x40
 80087c6:	d112      	bne.n	80087ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	b2d2      	uxtb	r2, r2
 80087d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fc:	f043 0204 	orr.w	r2, r3, #4
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f8b3 	bl	8008978 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008812:	e039      	b.n	8008888 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2b2a      	cmp	r3, #42	; 0x2a
 8008818:	d109      	bne.n	800882e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2228      	movs	r2, #40	; 0x28
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff f850 	bl	80078ce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b28      	cmp	r3, #40	; 0x28
 8008838:	d111      	bne.n	800885e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <I2C_Slave_STOPF+0x25c>)
 800883e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7fa fadc 	bl	8002e14 <HAL_I2C_ListenCpltCallback>
}
 800885c:	e014      	b.n	8008888 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008862:	2b22      	cmp	r3, #34	; 0x22
 8008864:	d002      	beq.n	800886c <I2C_Slave_STOPF+0x234>
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	2b22      	cmp	r3, #34	; 0x22
 800886a:	d10d      	bne.n	8008888 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff f823 	bl	80078ce <HAL_I2C_SlaveRxCpltCallback>
}
 8008888:	bf00      	nop
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	08008ef9 	.word	0x08008ef9
 8008894:	ffff0000 	.word	0xffff0000

08008898 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d002      	beq.n	80088ba <I2C_Slave_AF+0x22>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b20      	cmp	r3, #32
 80088b8:	d129      	bne.n	800890e <I2C_Slave_AF+0x76>
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	2b28      	cmp	r3, #40	; 0x28
 80088be:	d126      	bne.n	800890e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a2c      	ldr	r2, [pc, #176]	; (8008974 <I2C_Slave_AF+0xdc>)
 80088c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7fa fa84 	bl	8002e14 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800890c:	e02e      	b.n	800896c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	2b21      	cmp	r3, #33	; 0x21
 8008912:	d126      	bne.n	8008962 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a17      	ldr	r2, [pc, #92]	; (8008974 <I2C_Slave_AF+0xdc>)
 8008918:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2221      	movs	r2, #33	; 0x21
 800891e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800893e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008948:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008958:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7fe ffae 	bl	80078bc <HAL_I2C_SlaveTxCpltCallback>
}
 8008960:	e004      	b.n	800896c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800896a:	615a      	str	r2, [r3, #20]
}
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	ffff0000 	.word	0xffff0000

08008978 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008986:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800898e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008990:	7bbb      	ldrb	r3, [r7, #14]
 8008992:	2b10      	cmp	r3, #16
 8008994:	d002      	beq.n	800899c <I2C_ITError+0x24>
 8008996:	7bbb      	ldrb	r3, [r7, #14]
 8008998:	2b40      	cmp	r3, #64	; 0x40
 800899a:	d10a      	bne.n	80089b2 <I2C_ITError+0x3a>
 800899c:	7bfb      	ldrb	r3, [r7, #15]
 800899e:	2b22      	cmp	r3, #34	; 0x22
 80089a0:	d107      	bne.n	80089b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089b8:	2b28      	cmp	r3, #40	; 0x28
 80089ba:	d107      	bne.n	80089cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2228      	movs	r2, #40	; 0x28
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80089ca:	e015      	b.n	80089f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089da:	d00a      	beq.n	80089f2 <I2C_ITError+0x7a>
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b60      	cmp	r3, #96	; 0x60
 80089e0:	d007      	beq.n	80089f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a06:	d161      	bne.n	8008acc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d020      	beq.n	8008a66 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a28:	4a6a      	ldr	r2, [pc, #424]	; (8008bd4 <I2C_ITError+0x25c>)
 8008a2a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fd fb7b 	bl	800612c <HAL_DMA_Abort_IT>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 8089 	beq.w	8008b50 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 0201 	bic.w	r2, r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	e074      	b.n	8008b50 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	4a5a      	ldr	r2, [pc, #360]	; (8008bd4 <I2C_ITError+0x25c>)
 8008a6c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fd fb5a 	bl	800612c <HAL_DMA_Abort_IT>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d068      	beq.n	8008b50 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a88:	2b40      	cmp	r3, #64	; 0x40
 8008a8a:	d10b      	bne.n	8008aa4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	b2d2      	uxtb	r2, r2
 8008a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	1c5a      	adds	r2, r3, #1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0201 	bic.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4798      	blx	r3
 8008aca:	e041      	b.n	8008b50 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b60      	cmp	r3, #96	; 0x60
 8008ad6:	d125      	bne.n	8008b24 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af0:	2b40      	cmp	r3, #64	; 0x40
 8008af2:	d10b      	bne.n	8008b0c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	b2d2      	uxtb	r2, r2
 8008b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0201 	bic.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f7fe fef1 	bl	8007904 <HAL_I2C_AbortCpltCallback>
 8008b22:	e015      	b.n	8008b50 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b40      	cmp	r3, #64	; 0x40
 8008b30:	d10b      	bne.n	8008b4a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	691a      	ldr	r2, [r3, #16]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	b2d2      	uxtb	r2, r2
 8008b3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7fa fa30 	bl	8002fb0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10e      	bne.n	8008b7e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d109      	bne.n	8008b7e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d007      	beq.n	8008b8e <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008b8c:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b94:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d113      	bne.n	8008bca <I2C_ITError+0x252>
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	2b28      	cmp	r3, #40	; 0x28
 8008ba6:	d110      	bne.n	8008bca <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a0b      	ldr	r2, [pc, #44]	; (8008bd8 <I2C_ITError+0x260>)
 8008bac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7fa f925 	bl	8002e14 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	08008ef9 	.word	0x08008ef9
 8008bd8:	ffff0000 	.word	0xffff0000

08008bdc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	460b      	mov	r3, r1
 8008bea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d006      	beq.n	8008c06 <I2C_MasterRequestWrite+0x2a>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d003      	beq.n	8008c06 <I2C_MasterRequestWrite+0x2a>
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c04:	d108      	bne.n	8008c18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	e00b      	b.n	8008c30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1c:	2b12      	cmp	r3, #18
 8008c1e:	d107      	bne.n	8008c30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 fa03 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00d      	beq.n	8008c64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c56:	d103      	bne.n	8008c60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e035      	b.n	8008cd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c6c:	d108      	bne.n	8008c80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c6e:	897b      	ldrh	r3, [r7, #10]
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	461a      	mov	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c7c:	611a      	str	r2, [r3, #16]
 8008c7e:	e01b      	b.n	8008cb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008c80:	897b      	ldrh	r3, [r7, #10]
 8008c82:	11db      	asrs	r3, r3, #7
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 0306 	and.w	r3, r3, #6
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	f063 030f 	orn	r3, r3, #15
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	490e      	ldr	r1, [pc, #56]	; (8008cd8 <I2C_MasterRequestWrite+0xfc>)
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 fa29 	bl	80090f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e010      	b.n	8008cd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008cae:	897b      	ldrh	r3, [r7, #10]
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	4907      	ldr	r1, [pc, #28]	; (8008cdc <I2C_MasterRequestWrite+0x100>)
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fa19 	bl	80090f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3718      	adds	r7, #24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	00010008 	.word	0x00010008
 8008cdc:	00010002 	.word	0x00010002

08008ce0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cfc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008d12:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d20:	2200      	movs	r2, #0
 8008d22:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	2200      	movs	r2, #0
 8008d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008d34:	7cfb      	ldrb	r3, [r7, #19]
 8008d36:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008d3a:	2b21      	cmp	r3, #33	; 0x21
 8008d3c:	d007      	beq.n	8008d4e <I2C_DMAXferCplt+0x6e>
 8008d3e:	7cfb      	ldrb	r3, [r7, #19]
 8008d40:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008d44:	2b22      	cmp	r3, #34	; 0x22
 8008d46:	d131      	bne.n	8008dac <I2C_DMAXferCplt+0xcc>
 8008d48:	7cbb      	ldrb	r3, [r7, #18]
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d12e      	bne.n	8008dac <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d5c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2200      	movs	r2, #0
 8008d62:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d64:	7cfb      	ldrb	r3, [r7, #19]
 8008d66:	2b29      	cmp	r3, #41	; 0x29
 8008d68:	d10a      	bne.n	8008d80 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2221      	movs	r2, #33	; 0x21
 8008d6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2228      	movs	r2, #40	; 0x28
 8008d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d78:	6978      	ldr	r0, [r7, #20]
 8008d7a:	f7fe fd9f 	bl	80078bc <HAL_I2C_SlaveTxCpltCallback>
 8008d7e:	e00c      	b.n	8008d9a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008d80:	7cfb      	ldrb	r3, [r7, #19]
 8008d82:	2b2a      	cmp	r3, #42	; 0x2a
 8008d84:	d109      	bne.n	8008d9a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2222      	movs	r2, #34	; 0x22
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	2228      	movs	r2, #40	; 0x28
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d94:	6978      	ldr	r0, [r7, #20]
 8008d96:	f7fe fd9a 	bl	80078ce <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008da8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008daa:	e06a      	b.n	8008e82 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d064      	beq.n	8008e82 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d107      	bne.n	8008dd2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dd0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008de0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008de8:	d009      	beq.n	8008dfe <I2C_DMAXferCplt+0x11e>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d006      	beq.n	8008dfe <I2C_DMAXferCplt+0x11e>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008df6:	d002      	beq.n	8008dfe <I2C_DMAXferCplt+0x11e>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d107      	bne.n	8008e0e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e0c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e1c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e2c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2200      	movs	r2, #0
 8008e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008e3c:	6978      	ldr	r0, [r7, #20]
 8008e3e:	f7fa f8b7 	bl	8002fb0 <HAL_I2C_ErrorCallback>
}
 8008e42:	e01e      	b.n	8008e82 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	2b40      	cmp	r3, #64	; 0x40
 8008e56:	d10a      	bne.n	8008e6e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2200      	movs	r2, #0
 8008e64:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008e66:	6978      	ldr	r0, [r7, #20]
 8008e68:	f7fe fd43 	bl	80078f2 <HAL_I2C_MemRxCpltCallback>
}
 8008e6c:	e009      	b.n	8008e82 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2212      	movs	r2, #18
 8008e7a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008e7c:	6978      	ldr	r0, [r7, #20]
 8008e7e:	f7fa f825 	bl	8002ecc <HAL_I2C_MasterRxCpltCallback>
}
 8008e82:	bf00      	nop
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d003      	beq.n	8008ea8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ec6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	f043 0210 	orr.w	r2, r3, #16
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f7fa f860 	bl	8002fb0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f10:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008f12:	4b4b      	ldr	r3, [pc, #300]	; (8009040 <I2C_DMAAbort+0x148>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	08db      	lsrs	r3, r3, #3
 8008f18:	4a4a      	ldr	r2, [pc, #296]	; (8009044 <I2C_DMAAbort+0x14c>)
 8008f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1e:	0a1a      	lsrs	r2, r3, #8
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	00da      	lsls	r2, r3, #3
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d106      	bne.n	8008f40 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	f043 0220 	orr.w	r2, r3, #32
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008f3e:	e00a      	b.n	8008f56 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f54:	d0ea      	beq.n	8008f2c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f62:	2200      	movs	r2, #0
 8008f64:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f72:	2200      	movs	r2, #0
 8008f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f84:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d003      	beq.n	8008f9c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f98:	2200      	movs	r2, #0
 8008f9a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa8:	2200      	movs	r2, #0
 8008faa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f022 0201 	bic.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b60      	cmp	r3, #96	; 0x60
 8008fc6:	d10e      	bne.n	8008fe6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f7fe fc90 	bl	8007904 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fe4:	e027      	b.n	8009036 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008fe6:	7cfb      	ldrb	r3, [r7, #19]
 8008fe8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008fec:	2b28      	cmp	r3, #40	; 0x28
 8008fee:	d117      	bne.n	8009020 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800900e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2200      	movs	r2, #0
 8009014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2228      	movs	r2, #40	; 0x28
 800901a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800901e:	e007      	b.n	8009030 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009030:	6978      	ldr	r0, [r7, #20]
 8009032:	f7f9 ffbd 	bl	8002fb0 <HAL_I2C_ErrorCallback>
}
 8009036:	bf00      	nop
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20000004 	.word	0x20000004
 8009044:	14f8b589 	.word	0x14f8b589

08009048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009058:	e025      	b.n	80090a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009060:	d021      	beq.n	80090a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009062:	f7fc faab 	bl	80055bc <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d116      	bne.n	80090a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2220      	movs	r2, #32
 8009082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	f043 0220 	orr.w	r2, r3, #32
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e023      	b.n	80090ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	0c1b      	lsrs	r3, r3, #16
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d10d      	bne.n	80090cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	43da      	mvns	r2, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4013      	ands	r3, r2
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bf0c      	ite	eq
 80090c2:	2301      	moveq	r3, #1
 80090c4:	2300      	movne	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	e00c      	b.n	80090e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	43da      	mvns	r2, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4013      	ands	r3, r2
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	bf0c      	ite	eq
 80090de:	2301      	moveq	r3, #1
 80090e0:	2300      	movne	r3, #0
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	461a      	mov	r2, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d0b6      	beq.n	800905a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	60f8      	str	r0, [r7, #12]
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009104:	e051      	b.n	80091aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009114:	d123      	bne.n	800915e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009124:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800912e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2220      	movs	r2, #32
 800913a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	f043 0204 	orr.w	r2, r3, #4
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e046      	b.n	80091ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009164:	d021      	beq.n	80091aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009166:	f7fc fa29 	bl	80055bc <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d302      	bcc.n	800917c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d116      	bne.n	80091aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2220      	movs	r2, #32
 8009186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	f043 0220 	orr.w	r2, r3, #32
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e020      	b.n	80091ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	0c1b      	lsrs	r3, r3, #16
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d10c      	bne.n	80091ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	43da      	mvns	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4013      	ands	r3, r2
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bf14      	ite	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	2300      	moveq	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	e00b      	b.n	80091e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	43da      	mvns	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	4013      	ands	r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bf14      	ite	ne
 80091e0:	2301      	movne	r3, #1
 80091e2:	2300      	moveq	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d18d      	bne.n	8009106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009200:	e02d      	b.n	800925e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f8aa 	bl	800935c <I2C_IsAcknowledgeFailed>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e02d      	b.n	800926e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009218:	d021      	beq.n	800925e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800921a:	f7fc f9cf 	bl	80055bc <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	429a      	cmp	r2, r3
 8009228:	d302      	bcc.n	8009230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d116      	bne.n	800925e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2220      	movs	r2, #32
 800923a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	f043 0220 	orr.w	r2, r3, #32
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e007      	b.n	800926e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	695b      	ldr	r3, [r3, #20]
 8009264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009268:	2b80      	cmp	r3, #128	; 0x80
 800926a:	d1ca      	bne.n	8009202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009282:	e02d      	b.n	80092e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 f869 	bl	800935c <I2C_IsAcknowledgeFailed>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e02d      	b.n	80092f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d021      	beq.n	80092e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800929c:	f7fc f98e 	bl	80055bc <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d116      	bne.n	80092e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2220      	movs	r2, #32
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092cc:	f043 0220 	orr.w	r2, r3, #32
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e007      	b.n	80092f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	f003 0304 	and.w	r3, r3, #4
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	d1ca      	bne.n	8009284 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009304:	4b13      	ldr	r3, [pc, #76]	; (8009354 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	08db      	lsrs	r3, r3, #3
 800930a:	4a13      	ldr	r2, [pc, #76]	; (8009358 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800930c:	fba2 2303 	umull	r2, r3, r2, r3
 8009310:	0a1a      	lsrs	r2, r3, #8
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3b01      	subs	r3, #1
 800931e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d107      	bne.n	8009336 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	f043 0220 	orr.w	r2, r3, #32
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e008      	b.n	8009348 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009344:	d0e9      	beq.n	800931a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	bc80      	pop	{r7}
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	20000004 	.word	0x20000004
 8009358:	14f8b589 	.word	0x14f8b589

0800935c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800936e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009372:	d11b      	bne.n	80093ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800937c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009398:	f043 0204 	orr.w	r2, r3, #4
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bc80      	pop	{r7}
 80093b6:	4770      	bx	lr

080093b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80093c8:	d103      	bne.n	80093d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2201      	movs	r2, #1
 80093ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80093d0:	e007      	b.n	80093e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80093da:	d102      	bne.n	80093e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2208      	movs	r2, #8
 80093e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr

080093ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d101      	bne.n	80093fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	e26c      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 8087 	beq.w	800951a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800940c:	4b92      	ldr	r3, [pc, #584]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	f003 030c 	and.w	r3, r3, #12
 8009414:	2b04      	cmp	r3, #4
 8009416:	d00c      	beq.n	8009432 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009418:	4b8f      	ldr	r3, [pc, #572]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f003 030c 	and.w	r3, r3, #12
 8009420:	2b08      	cmp	r3, #8
 8009422:	d112      	bne.n	800944a <HAL_RCC_OscConfig+0x5e>
 8009424:	4b8c      	ldr	r3, [pc, #560]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800942c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009430:	d10b      	bne.n	800944a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009432:	4b89      	ldr	r3, [pc, #548]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d06c      	beq.n	8009518 <HAL_RCC_OscConfig+0x12c>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d168      	bne.n	8009518 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e246      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009452:	d106      	bne.n	8009462 <HAL_RCC_OscConfig+0x76>
 8009454:	4b80      	ldr	r3, [pc, #512]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a7f      	ldr	r2, [pc, #508]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800945a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	e02e      	b.n	80094c0 <HAL_RCC_OscConfig+0xd4>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10c      	bne.n	8009484 <HAL_RCC_OscConfig+0x98>
 800946a:	4b7b      	ldr	r3, [pc, #492]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a7a      	ldr	r2, [pc, #488]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	4b78      	ldr	r3, [pc, #480]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a77      	ldr	r2, [pc, #476]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800947c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009480:	6013      	str	r3, [r2, #0]
 8009482:	e01d      	b.n	80094c0 <HAL_RCC_OscConfig+0xd4>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800948c:	d10c      	bne.n	80094a8 <HAL_RCC_OscConfig+0xbc>
 800948e:	4b72      	ldr	r3, [pc, #456]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a71      	ldr	r2, [pc, #452]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	4b6f      	ldr	r3, [pc, #444]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a6e      	ldr	r2, [pc, #440]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80094a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	e00b      	b.n	80094c0 <HAL_RCC_OscConfig+0xd4>
 80094a8:	4b6b      	ldr	r3, [pc, #428]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a6a      	ldr	r2, [pc, #424]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80094ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	4b68      	ldr	r3, [pc, #416]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a67      	ldr	r2, [pc, #412]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80094ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d013      	beq.n	80094f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094c8:	f7fc f878 	bl	80055bc <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094ce:	e008      	b.n	80094e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094d0:	f7fc f874 	bl	80055bc <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b64      	cmp	r3, #100	; 0x64
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e1fa      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094e2:	4b5d      	ldr	r3, [pc, #372]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <HAL_RCC_OscConfig+0xe4>
 80094ee:	e014      	b.n	800951a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094f0:	f7fc f864 	bl	80055bc <HAL_GetTick>
 80094f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094f6:	e008      	b.n	800950a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094f8:	f7fc f860 	bl	80055bc <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b64      	cmp	r3, #100	; 0x64
 8009504:	d901      	bls.n	800950a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e1e6      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800950a:	4b53      	ldr	r3, [pc, #332]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f0      	bne.n	80094f8 <HAL_RCC_OscConfig+0x10c>
 8009516:	e000      	b.n	800951a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d063      	beq.n	80095ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009526:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f003 030c 	and.w	r3, r3, #12
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009532:	4b49      	ldr	r3, [pc, #292]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f003 030c 	and.w	r3, r3, #12
 800953a:	2b08      	cmp	r3, #8
 800953c:	d11c      	bne.n	8009578 <HAL_RCC_OscConfig+0x18c>
 800953e:	4b46      	ldr	r3, [pc, #280]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d116      	bne.n	8009578 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800954a:	4b43      	ldr	r3, [pc, #268]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0302 	and.w	r3, r3, #2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <HAL_RCC_OscConfig+0x176>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d001      	beq.n	8009562 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e1ba      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009562:	4b3d      	ldr	r3, [pc, #244]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4939      	ldr	r1, [pc, #228]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009572:	4313      	orrs	r3, r2
 8009574:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009576:	e03a      	b.n	80095ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d020      	beq.n	80095c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009580:	4b36      	ldr	r3, [pc, #216]	; (800965c <HAL_RCC_OscConfig+0x270>)
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009586:	f7fc f819 	bl	80055bc <HAL_GetTick>
 800958a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800958c:	e008      	b.n	80095a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800958e:	f7fc f815 	bl	80055bc <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e19b      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095a0:	4b2d      	ldr	r3, [pc, #180]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d0f0      	beq.n	800958e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095ac:	4b2a      	ldr	r3, [pc, #168]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	4927      	ldr	r1, [pc, #156]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	600b      	str	r3, [r1, #0]
 80095c0:	e015      	b.n	80095ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095c2:	4b26      	ldr	r3, [pc, #152]	; (800965c <HAL_RCC_OscConfig+0x270>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095c8:	f7fb fff8 	bl	80055bc <HAL_GetTick>
 80095cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095ce:	e008      	b.n	80095e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095d0:	f7fb fff4 	bl	80055bc <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d901      	bls.n	80095e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e17a      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095e2:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1f0      	bne.n	80095d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0308 	and.w	r3, r3, #8
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d03a      	beq.n	8009670 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d019      	beq.n	8009636 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009602:	4b17      	ldr	r3, [pc, #92]	; (8009660 <HAL_RCC_OscConfig+0x274>)
 8009604:	2201      	movs	r2, #1
 8009606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009608:	f7fb ffd8 	bl	80055bc <HAL_GetTick>
 800960c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800960e:	e008      	b.n	8009622 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009610:	f7fb ffd4 	bl	80055bc <HAL_GetTick>
 8009614:	4602      	mov	r2, r0
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d901      	bls.n	8009622 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800961e:	2303      	movs	r3, #3
 8009620:	e15a      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009622:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <HAL_RCC_OscConfig+0x26c>)
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	f003 0302 	and.w	r3, r3, #2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0f0      	beq.n	8009610 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800962e:	2001      	movs	r0, #1
 8009630:	f000 fac4 	bl	8009bbc <RCC_Delay>
 8009634:	e01c      	b.n	8009670 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009636:	4b0a      	ldr	r3, [pc, #40]	; (8009660 <HAL_RCC_OscConfig+0x274>)
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800963c:	f7fb ffbe 	bl	80055bc <HAL_GetTick>
 8009640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009642:	e00f      	b.n	8009664 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009644:	f7fb ffba 	bl	80055bc <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b02      	cmp	r3, #2
 8009650:	d908      	bls.n	8009664 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e140      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
 8009656:	bf00      	nop
 8009658:	40021000 	.word	0x40021000
 800965c:	42420000 	.word	0x42420000
 8009660:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009664:	4b9e      	ldr	r3, [pc, #632]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	f003 0302 	and.w	r3, r3, #2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e9      	bne.n	8009644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 80a6 	beq.w	80097ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800967e:	2300      	movs	r3, #0
 8009680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009682:	4b97      	ldr	r3, [pc, #604]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10d      	bne.n	80096aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800968e:	4b94      	ldr	r3, [pc, #592]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	4a93      	ldr	r2, [pc, #588]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009698:	61d3      	str	r3, [r2, #28]
 800969a:	4b91      	ldr	r3, [pc, #580]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800969c:	69db      	ldr	r3, [r3, #28]
 800969e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096a2:	60bb      	str	r3, [r7, #8]
 80096a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096a6:	2301      	movs	r3, #1
 80096a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096aa:	4b8e      	ldr	r3, [pc, #568]	; (80098e4 <HAL_RCC_OscConfig+0x4f8>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d118      	bne.n	80096e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096b6:	4b8b      	ldr	r3, [pc, #556]	; (80098e4 <HAL_RCC_OscConfig+0x4f8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a8a      	ldr	r2, [pc, #552]	; (80098e4 <HAL_RCC_OscConfig+0x4f8>)
 80096bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096c2:	f7fb ff7b 	bl	80055bc <HAL_GetTick>
 80096c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096c8:	e008      	b.n	80096dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096ca:	f7fb ff77 	bl	80055bc <HAL_GetTick>
 80096ce:	4602      	mov	r2, r0
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	2b64      	cmp	r3, #100	; 0x64
 80096d6:	d901      	bls.n	80096dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e0fd      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096dc:	4b81      	ldr	r3, [pc, #516]	; (80098e4 <HAL_RCC_OscConfig+0x4f8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d0f0      	beq.n	80096ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d106      	bne.n	80096fe <HAL_RCC_OscConfig+0x312>
 80096f0:	4b7b      	ldr	r3, [pc, #492]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	4a7a      	ldr	r2, [pc, #488]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 80096f6:	f043 0301 	orr.w	r3, r3, #1
 80096fa:	6213      	str	r3, [r2, #32]
 80096fc:	e02d      	b.n	800975a <HAL_RCC_OscConfig+0x36e>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d10c      	bne.n	8009720 <HAL_RCC_OscConfig+0x334>
 8009706:	4b76      	ldr	r3, [pc, #472]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	4a75      	ldr	r2, [pc, #468]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800970c:	f023 0301 	bic.w	r3, r3, #1
 8009710:	6213      	str	r3, [r2, #32]
 8009712:	4b73      	ldr	r3, [pc, #460]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009714:	6a1b      	ldr	r3, [r3, #32]
 8009716:	4a72      	ldr	r2, [pc, #456]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009718:	f023 0304 	bic.w	r3, r3, #4
 800971c:	6213      	str	r3, [r2, #32]
 800971e:	e01c      	b.n	800975a <HAL_RCC_OscConfig+0x36e>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2b05      	cmp	r3, #5
 8009726:	d10c      	bne.n	8009742 <HAL_RCC_OscConfig+0x356>
 8009728:	4b6d      	ldr	r3, [pc, #436]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800972a:	6a1b      	ldr	r3, [r3, #32]
 800972c:	4a6c      	ldr	r2, [pc, #432]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800972e:	f043 0304 	orr.w	r3, r3, #4
 8009732:	6213      	str	r3, [r2, #32]
 8009734:	4b6a      	ldr	r3, [pc, #424]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	4a69      	ldr	r2, [pc, #420]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800973a:	f043 0301 	orr.w	r3, r3, #1
 800973e:	6213      	str	r3, [r2, #32]
 8009740:	e00b      	b.n	800975a <HAL_RCC_OscConfig+0x36e>
 8009742:	4b67      	ldr	r3, [pc, #412]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	4a66      	ldr	r2, [pc, #408]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009748:	f023 0301 	bic.w	r3, r3, #1
 800974c:	6213      	str	r3, [r2, #32]
 800974e:	4b64      	ldr	r3, [pc, #400]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	4a63      	ldr	r2, [pc, #396]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009754:	f023 0304 	bic.w	r3, r3, #4
 8009758:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d015      	beq.n	800978e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009762:	f7fb ff2b 	bl	80055bc <HAL_GetTick>
 8009766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009768:	e00a      	b.n	8009780 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800976a:	f7fb ff27 	bl	80055bc <HAL_GetTick>
 800976e:	4602      	mov	r2, r0
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	f241 3288 	movw	r2, #5000	; 0x1388
 8009778:	4293      	cmp	r3, r2
 800977a:	d901      	bls.n	8009780 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	e0ab      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009780:	4b57      	ldr	r3, [pc, #348]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	f003 0302 	and.w	r3, r3, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0ee      	beq.n	800976a <HAL_RCC_OscConfig+0x37e>
 800978c:	e014      	b.n	80097b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800978e:	f7fb ff15 	bl	80055bc <HAL_GetTick>
 8009792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009794:	e00a      	b.n	80097ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009796:	f7fb ff11 	bl	80055bc <HAL_GetTick>
 800979a:	4602      	mov	r2, r0
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d901      	bls.n	80097ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e095      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097ac:	4b4c      	ldr	r3, [pc, #304]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 80097ae:	6a1b      	ldr	r3, [r3, #32]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1ee      	bne.n	8009796 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d105      	bne.n	80097ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097be:	4b48      	ldr	r3, [pc, #288]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	4a47      	ldr	r2, [pc, #284]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 80097c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 8081 	beq.w	80098d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80097d4:	4b42      	ldr	r3, [pc, #264]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f003 030c 	and.w	r3, r3, #12
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d061      	beq.n	80098a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d146      	bne.n	8009876 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097e8:	4b3f      	ldr	r3, [pc, #252]	; (80098e8 <HAL_RCC_OscConfig+0x4fc>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097ee:	f7fb fee5 	bl	80055bc <HAL_GetTick>
 80097f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80097f4:	e008      	b.n	8009808 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097f6:	f7fb fee1 	bl	80055bc <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d901      	bls.n	8009808 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e067      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009808:	4b35      	ldr	r3, [pc, #212]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1f0      	bne.n	80097f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800981c:	d108      	bne.n	8009830 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800981e:	4b30      	ldr	r3, [pc, #192]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	492d      	ldr	r1, [pc, #180]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800982c:	4313      	orrs	r3, r2
 800982e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009830:	4b2b      	ldr	r3, [pc, #172]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a19      	ldr	r1, [r3, #32]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	430b      	orrs	r3, r1
 8009842:	4927      	ldr	r1, [pc, #156]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009844:	4313      	orrs	r3, r2
 8009846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009848:	4b27      	ldr	r3, [pc, #156]	; (80098e8 <HAL_RCC_OscConfig+0x4fc>)
 800984a:	2201      	movs	r2, #1
 800984c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800984e:	f7fb feb5 	bl	80055bc <HAL_GetTick>
 8009852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009854:	e008      	b.n	8009868 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009856:	f7fb feb1 	bl	80055bc <HAL_GetTick>
 800985a:	4602      	mov	r2, r0
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	2b02      	cmp	r3, #2
 8009862:	d901      	bls.n	8009868 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e037      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009868:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d0f0      	beq.n	8009856 <HAL_RCC_OscConfig+0x46a>
 8009874:	e02f      	b.n	80098d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009876:	4b1c      	ldr	r3, [pc, #112]	; (80098e8 <HAL_RCC_OscConfig+0x4fc>)
 8009878:	2200      	movs	r2, #0
 800987a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800987c:	f7fb fe9e 	bl	80055bc <HAL_GetTick>
 8009880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009882:	e008      	b.n	8009896 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009884:	f7fb fe9a 	bl	80055bc <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	2b02      	cmp	r3, #2
 8009890:	d901      	bls.n	8009896 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e020      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009896:	4b12      	ldr	r3, [pc, #72]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1f0      	bne.n	8009884 <HAL_RCC_OscConfig+0x498>
 80098a2:	e018      	b.n	80098d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d101      	bne.n	80098b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e013      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <HAL_RCC_OscConfig+0x4f4>)
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a1b      	ldr	r3, [r3, #32]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d106      	bne.n	80098d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d001      	beq.n	80098d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e000      	b.n	80098d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40021000 	.word	0x40021000
 80098e4:	40007000 	.word	0x40007000
 80098e8:	42420060 	.word	0x42420060

080098ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e0d0      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009900:	4b6a      	ldr	r3, [pc, #424]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	429a      	cmp	r2, r3
 800990c:	d910      	bls.n	8009930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800990e:	4b67      	ldr	r3, [pc, #412]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f023 0207 	bic.w	r2, r3, #7
 8009916:	4965      	ldr	r1, [pc, #404]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	4313      	orrs	r3, r2
 800991c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800991e:	4b63      	ldr	r3, [pc, #396]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d001      	beq.n	8009930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e0b8      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d020      	beq.n	800997e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009948:	4b59      	ldr	r3, [pc, #356]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	4a58      	ldr	r2, [pc, #352]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800994e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0308 	and.w	r3, r3, #8
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009960:	4b53      	ldr	r3, [pc, #332]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	4a52      	ldr	r2, [pc, #328]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009966:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800996a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800996c:	4b50      	ldr	r3, [pc, #320]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	494d      	ldr	r1, [pc, #308]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800997a:	4313      	orrs	r3, r2
 800997c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d040      	beq.n	8009a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d107      	bne.n	80099a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009992:	4b47      	ldr	r3, [pc, #284]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d115      	bne.n	80099ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e07f      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d107      	bne.n	80099ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099aa:	4b41      	ldr	r3, [pc, #260]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d109      	bne.n	80099ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e073      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099ba:	4b3d      	ldr	r3, [pc, #244]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e06b      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099ca:	4b39      	ldr	r3, [pc, #228]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f023 0203 	bic.w	r2, r3, #3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	4936      	ldr	r1, [pc, #216]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80099d8:	4313      	orrs	r3, r2
 80099da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80099dc:	f7fb fdee 	bl	80055bc <HAL_GetTick>
 80099e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099e2:	e00a      	b.n	80099fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099e4:	f7fb fdea 	bl	80055bc <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d901      	bls.n	80099fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80099f6:	2303      	movs	r3, #3
 80099f8:	e053      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099fa:	4b2d      	ldr	r3, [pc, #180]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f003 020c 	and.w	r2, r3, #12
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d1eb      	bne.n	80099e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a0c:	4b27      	ldr	r3, [pc, #156]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d210      	bcs.n	8009a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a1a:	4b24      	ldr	r3, [pc, #144]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f023 0207 	bic.w	r2, r3, #7
 8009a22:	4922      	ldr	r1, [pc, #136]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a2a:	4b20      	ldr	r3, [pc, #128]	; (8009aac <HAL_RCC_ClockConfig+0x1c0>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0307 	and.w	r3, r3, #7
 8009a32:	683a      	ldr	r2, [r7, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d001      	beq.n	8009a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e032      	b.n	8009aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0304 	and.w	r3, r3, #4
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d008      	beq.n	8009a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a48:	4b19      	ldr	r3, [pc, #100]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	4916      	ldr	r1, [pc, #88]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a56:	4313      	orrs	r3, r2
 8009a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0308 	and.w	r3, r3, #8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d009      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009a66:	4b12      	ldr	r3, [pc, #72]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	490e      	ldr	r1, [pc, #56]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a7a:	f000 f821 	bl	8009ac0 <HAL_RCC_GetSysClockFreq>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	4b0b      	ldr	r3, [pc, #44]	; (8009ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	091b      	lsrs	r3, r3, #4
 8009a86:	f003 030f 	and.w	r3, r3, #15
 8009a8a:	490a      	ldr	r1, [pc, #40]	; (8009ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8009a8c:	5ccb      	ldrb	r3, [r1, r3]
 8009a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a92:	4a09      	ldr	r2, [pc, #36]	; (8009ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8009a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009a96:	4b09      	ldr	r3, [pc, #36]	; (8009abc <HAL_RCC_ClockConfig+0x1d0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fb fd4c 	bl	8005538 <HAL_InitTick>

  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	40022000 	.word	0x40022000
 8009ab0:	40021000 	.word	0x40021000
 8009ab4:	0800bdd8 	.word	0x0800bdd8
 8009ab8:	20000004 	.word	0x20000004
 8009abc:	20000050 	.word	0x20000050

08009ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ac0:	b490      	push	{r4, r7}
 8009ac2:	b08a      	sub	sp, #40	; 0x28
 8009ac4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009ac6:	4b2a      	ldr	r3, [pc, #168]	; (8009b70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009ac8:	1d3c      	adds	r4, r7, #4
 8009aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009ad0:	f240 2301 	movw	r3, #513	; 0x201
 8009ad4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61fb      	str	r3, [r7, #28]
 8009ada:	2300      	movs	r3, #0
 8009adc:	61bb      	str	r3, [r7, #24]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009aea:	4b22      	ldr	r3, [pc, #136]	; (8009b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	f003 030c 	and.w	r3, r3, #12
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d002      	beq.n	8009b00 <HAL_RCC_GetSysClockFreq+0x40>
 8009afa:	2b08      	cmp	r3, #8
 8009afc:	d003      	beq.n	8009b06 <HAL_RCC_GetSysClockFreq+0x46>
 8009afe:	e02d      	b.n	8009b5c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009b00:	4b1d      	ldr	r3, [pc, #116]	; (8009b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b02:	623b      	str	r3, [r7, #32]
      break;
 8009b04:	e02d      	b.n	8009b62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	0c9b      	lsrs	r3, r3, #18
 8009b0a:	f003 030f 	and.w	r3, r3, #15
 8009b0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009b12:	4413      	add	r3, r2
 8009b14:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8009b18:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d013      	beq.n	8009b4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009b24:	4b13      	ldr	r3, [pc, #76]	; (8009b74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	0c5b      	lsrs	r3, r3, #17
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009b32:	4413      	add	r3, r2
 8009b34:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8009b38:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	4a0e      	ldr	r2, [pc, #56]	; (8009b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b3e:	fb02 f203 	mul.w	r2, r2, r3
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4a:	e004      	b.n	8009b56 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	4a0b      	ldr	r2, [pc, #44]	; (8009b7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009b50:	fb02 f303 	mul.w	r3, r2, r3
 8009b54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b58:	623b      	str	r3, [r7, #32]
      break;
 8009b5a:	e002      	b.n	8009b62 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009b5c:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009b5e:	623b      	str	r3, [r7, #32]
      break;
 8009b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b62:	6a3b      	ldr	r3, [r7, #32]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3728      	adds	r7, #40	; 0x28
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bc90      	pop	{r4, r7}
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	0800bdb8 	.word	0x0800bdb8
 8009b74:	40021000 	.word	0x40021000
 8009b78:	007a1200 	.word	0x007a1200
 8009b7c:	003d0900 	.word	0x003d0900

08009b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b84:	4b02      	ldr	r3, [pc, #8]	; (8009b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8009b86:	681b      	ldr	r3, [r3, #0]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bc80      	pop	{r7}
 8009b8e:	4770      	bx	lr
 8009b90:	20000004 	.word	0x20000004

08009b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b98:	f7ff fff2 	bl	8009b80 <HAL_RCC_GetHCLKFreq>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	4903      	ldr	r1, [pc, #12]	; (8009bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009baa:	5ccb      	ldrb	r3, [r1, r3]
 8009bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	40021000 	.word	0x40021000
 8009bb8:	0800bde8 	.word	0x0800bde8

08009bbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <RCC_Delay+0x34>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a0a      	ldr	r2, [pc, #40]	; (8009bf4 <RCC_Delay+0x38>)
 8009bca:	fba2 2303 	umull	r2, r3, r2, r3
 8009bce:	0a5b      	lsrs	r3, r3, #9
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	fb02 f303 	mul.w	r3, r2, r3
 8009bd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009bd8:	bf00      	nop
  }
  while (Delay --);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	1e5a      	subs	r2, r3, #1
 8009bde:	60fa      	str	r2, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1f9      	bne.n	8009bd8 <RCC_Delay+0x1c>
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bc80      	pop	{r7}
 8009bee:	4770      	bx	lr
 8009bf0:	20000004 	.word	0x20000004
 8009bf4:	10624dd3 	.word	0x10624dd3

08009bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	2300      	movs	r3, #0
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d07d      	beq.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009c14:	2300      	movs	r3, #0
 8009c16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c18:	4b4f      	ldr	r3, [pc, #316]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c1a:	69db      	ldr	r3, [r3, #28]
 8009c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10d      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c24:	4b4c      	ldr	r3, [pc, #304]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	4a4b      	ldr	r2, [pc, #300]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c2e:	61d3      	str	r3, [r2, #28]
 8009c30:	4b49      	ldr	r3, [pc, #292]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c32:	69db      	ldr	r3, [r3, #28]
 8009c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c38:	60bb      	str	r3, [r7, #8]
 8009c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c40:	4b46      	ldr	r3, [pc, #280]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d118      	bne.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c4c:	4b43      	ldr	r3, [pc, #268]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a42      	ldr	r2, [pc, #264]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c58:	f7fb fcb0 	bl	80055bc <HAL_GetTick>
 8009c5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c5e:	e008      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c60:	f7fb fcac 	bl	80055bc <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	2b64      	cmp	r3, #100	; 0x64
 8009c6c:	d901      	bls.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e06d      	b.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c72:	4b3a      	ldr	r3, [pc, #232]	; (8009d5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0f0      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009c7e:	4b36      	ldr	r3, [pc, #216]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02e      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d027      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c9c:	4b2e      	ldr	r3, [pc, #184]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009ca6:	4b2e      	ldr	r3, [pc, #184]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009cac:	4b2c      	ldr	r3, [pc, #176]	; (8009d60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009cb2:	4a29      	ldr	r2, [pc, #164]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d014      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cc2:	f7fb fc7b 	bl	80055bc <HAL_GetTick>
 8009cc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cc8:	e00a      	b.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cca:	f7fb fc77 	bl	80055bc <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d901      	bls.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e036      	b.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ce0:	4b1d      	ldr	r3, [pc, #116]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	f003 0302 	and.w	r3, r3, #2
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d0ee      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cec:	4b1a      	ldr	r3, [pc, #104]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4917      	ldr	r1, [pc, #92]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d105      	bne.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d04:	4b14      	ldr	r3, [pc, #80]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	4a13      	ldr	r2, [pc, #76]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0302 	and.w	r3, r3, #2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d008      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d1c:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	490b      	ldr	r1, [pc, #44]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0310 	and.w	r3, r3, #16
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d008      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d3a:	4b07      	ldr	r3, [pc, #28]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	4904      	ldr	r1, [pc, #16]	; (8009d58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	40021000 	.word	0x40021000
 8009d5c:	40007000 	.word	0x40007000
 8009d60:	42420440 	.word	0x42420440

08009d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e041      	b.n	8009dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7f9 fe1a 	bl	80039c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f000 feb8 	bl	800ab18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d001      	beq.n	8009e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e03a      	b.n	8009e92 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0201 	orr.w	r2, r2, #1
 8009e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a18      	ldr	r2, [pc, #96]	; (8009e9c <HAL_TIM_Base_Start_IT+0x98>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d00e      	beq.n	8009e5c <HAL_TIM_Base_Start_IT+0x58>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e46:	d009      	beq.n	8009e5c <HAL_TIM_Base_Start_IT+0x58>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a14      	ldr	r2, [pc, #80]	; (8009ea0 <HAL_TIM_Base_Start_IT+0x9c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d004      	beq.n	8009e5c <HAL_TIM_Base_Start_IT+0x58>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a13      	ldr	r2, [pc, #76]	; (8009ea4 <HAL_TIM_Base_Start_IT+0xa0>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d111      	bne.n	8009e80 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b06      	cmp	r3, #6
 8009e6c:	d010      	beq.n	8009e90 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f042 0201 	orr.w	r2, r2, #1
 8009e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e7e:	e007      	b.n	8009e90 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 0201 	orr.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bc80      	pop	{r7}
 8009e9a:	4770      	bx	lr
 8009e9c:	40012c00 	.word	0x40012c00
 8009ea0:	40000400 	.word	0x40000400
 8009ea4:	40000800 	.word	0x40000800

08009ea8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e041      	b.n	8009f3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f839 	bl	8009f46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	f000 fe16 	bl	800ab18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f4e:	bf00      	nop
 8009f50:	370c      	adds	r7, #12
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bc80      	pop	{r7}
 8009f56:	4770      	bx	lr

08009f58 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d109      	bne.n	8009f80 <HAL_TIM_PWM_Start_DMA+0x28>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	bf0c      	ite	eq
 8009f78:	2301      	moveq	r3, #1
 8009f7a:	2300      	movne	r3, #0
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	e022      	b.n	8009fc6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b04      	cmp	r3, #4
 8009f84:	d109      	bne.n	8009f9a <HAL_TIM_PWM_Start_DMA+0x42>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	bf0c      	ite	eq
 8009f92:	2301      	moveq	r3, #1
 8009f94:	2300      	movne	r3, #0
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	e015      	b.n	8009fc6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d109      	bne.n	8009fb4 <HAL_TIM_PWM_Start_DMA+0x5c>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	bf0c      	ite	eq
 8009fac:	2301      	moveq	r3, #1
 8009fae:	2300      	movne	r3, #0
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	e008      	b.n	8009fc6 <HAL_TIM_PWM_Start_DMA+0x6e>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2301      	moveq	r3, #1
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d001      	beq.n	8009fce <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e14e      	b.n	800a26c <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <HAL_TIM_PWM_Start_DMA+0x90>
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	bf0c      	ite	eq
 8009fe0:	2301      	moveq	r3, #1
 8009fe2:	2300      	movne	r3, #0
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	e022      	b.n	800a02e <HAL_TIM_PWM_Start_DMA+0xd6>
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d109      	bne.n	800a002 <HAL_TIM_PWM_Start_DMA+0xaa>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	bf0c      	ite	eq
 8009ffa:	2301      	moveq	r3, #1
 8009ffc:	2300      	movne	r3, #0
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	e015      	b.n	800a02e <HAL_TIM_PWM_Start_DMA+0xd6>
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	2b08      	cmp	r3, #8
 800a006:	d109      	bne.n	800a01c <HAL_TIM_PWM_Start_DMA+0xc4>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b01      	cmp	r3, #1
 800a012:	bf0c      	ite	eq
 800a014:	2301      	moveq	r3, #1
 800a016:	2300      	movne	r3, #0
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	e008      	b.n	800a02e <HAL_TIM_PWM_Start_DMA+0xd6>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b01      	cmp	r3, #1
 800a026:	bf0c      	ite	eq
 800a028:	2301      	moveq	r3, #1
 800a02a:	2300      	movne	r3, #0
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d024      	beq.n	800a07c <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d104      	bne.n	800a042 <HAL_TIM_PWM_Start_DMA+0xea>
 800a038:	887b      	ldrh	r3, [r7, #2]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d001      	beq.n	800a042 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e114      	b.n	800a26c <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d104      	bne.n	800a052 <HAL_TIM_PWM_Start_DMA+0xfa>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a050:	e016      	b.n	800a080 <HAL_TIM_PWM_Start_DMA+0x128>
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b04      	cmp	r3, #4
 800a056:	d104      	bne.n	800a062 <HAL_TIM_PWM_Start_DMA+0x10a>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2202      	movs	r2, #2
 800a05c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a060:	e00e      	b.n	800a080 <HAL_TIM_PWM_Start_DMA+0x128>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b08      	cmp	r3, #8
 800a066:	d104      	bne.n	800a072 <HAL_TIM_PWM_Start_DMA+0x11a>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2202      	movs	r2, #2
 800a06c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a070:	e006      	b.n	800a080 <HAL_TIM_PWM_Start_DMA+0x128>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2202      	movs	r2, #2
 800a076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a07a:	e001      	b.n	800a080 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0f5      	b.n	800a26c <HAL_TIM_PWM_Start_DMA+0x314>
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b0c      	cmp	r3, #12
 800a084:	f200 80ae 	bhi.w	800a1e4 <HAL_TIM_PWM_Start_DMA+0x28c>
 800a088:	a201      	add	r2, pc, #4	; (adr r2, 800a090 <HAL_TIM_PWM_Start_DMA+0x138>)
 800a08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08e:	bf00      	nop
 800a090:	0800a0c5 	.word	0x0800a0c5
 800a094:	0800a1e5 	.word	0x0800a1e5
 800a098:	0800a1e5 	.word	0x0800a1e5
 800a09c:	0800a1e5 	.word	0x0800a1e5
 800a0a0:	0800a10d 	.word	0x0800a10d
 800a0a4:	0800a1e5 	.word	0x0800a1e5
 800a0a8:	0800a1e5 	.word	0x0800a1e5
 800a0ac:	0800a1e5 	.word	0x0800a1e5
 800a0b0:	0800a155 	.word	0x0800a155
 800a0b4:	0800a1e5 	.word	0x0800a1e5
 800a0b8:	0800a1e5 	.word	0x0800a1e5
 800a0bc:	0800a1e5 	.word	0x0800a1e5
 800a0c0:	0800a19d 	.word	0x0800a19d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	4a6a      	ldr	r2, [pc, #424]	; (800a274 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800a0ca:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	4a69      	ldr	r2, [pc, #420]	; (800a278 <HAL_TIM_PWM_Start_DMA+0x320>)
 800a0d2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	4a68      	ldr	r2, [pc, #416]	; (800a27c <HAL_TIM_PWM_Start_DMA+0x324>)
 800a0da:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a0e0:	6879      	ldr	r1, [r7, #4]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3334      	adds	r3, #52	; 0x34
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	887b      	ldrh	r3, [r7, #2]
 800a0ec:	f7fb ffbe 	bl	800606c <HAL_DMA_Start_IT>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e0b8      	b.n	800a26c <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68da      	ldr	r2, [r3, #12]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a108:	60da      	str	r2, [r3, #12]
      break;
 800a10a:	e06c      	b.n	800a1e6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	4a58      	ldr	r2, [pc, #352]	; (800a274 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800a112:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	4a57      	ldr	r2, [pc, #348]	; (800a278 <HAL_TIM_PWM_Start_DMA+0x320>)
 800a11a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a120:	4a56      	ldr	r2, [pc, #344]	; (800a27c <HAL_TIM_PWM_Start_DMA+0x324>)
 800a122:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3338      	adds	r3, #56	; 0x38
 800a130:	461a      	mov	r2, r3
 800a132:	887b      	ldrh	r3, [r7, #2]
 800a134:	f7fb ff9a 	bl	800606c <HAL_DMA_Start_IT>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e094      	b.n	800a26c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a150:	60da      	str	r2, [r3, #12]
      break;
 800a152:	e048      	b.n	800a1e6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a158:	4a46      	ldr	r2, [pc, #280]	; (800a274 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800a15a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	4a45      	ldr	r2, [pc, #276]	; (800a278 <HAL_TIM_PWM_Start_DMA+0x320>)
 800a162:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a44      	ldr	r2, [pc, #272]	; (800a27c <HAL_TIM_PWM_Start_DMA+0x324>)
 800a16a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	333c      	adds	r3, #60	; 0x3c
 800a178:	461a      	mov	r2, r3
 800a17a:	887b      	ldrh	r3, [r7, #2]
 800a17c:	f7fb ff76 	bl	800606c <HAL_DMA_Start_IT>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d001      	beq.n	800a18a <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e070      	b.n	800a26c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a198:	60da      	str	r2, [r3, #12]
      break;
 800a19a:	e024      	b.n	800a1e6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a0:	4a34      	ldr	r2, [pc, #208]	; (800a274 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800a1a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	4a33      	ldr	r2, [pc, #204]	; (800a278 <HAL_TIM_PWM_Start_DMA+0x320>)
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b0:	4a32      	ldr	r2, [pc, #200]	; (800a27c <HAL_TIM_PWM_Start_DMA+0x324>)
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a1b8:	6879      	ldr	r1, [r7, #4]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3340      	adds	r3, #64	; 0x40
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	887b      	ldrh	r3, [r7, #2]
 800a1c4:	f7fb ff52 	bl	800606c <HAL_DMA_Start_IT>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e04c      	b.n	800a26c <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1e0:	60da      	str	r2, [r3, #12]
      break;
 800a1e2:	e000      	b.n	800a1e6 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 800a1e4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	68b9      	ldr	r1, [r7, #8]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 ff12 	bl	800b018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a21      	ldr	r2, [pc, #132]	; (800a280 <HAL_TIM_PWM_Start_DMA+0x328>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d107      	bne.n	800a20e <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a20c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a1b      	ldr	r2, [pc, #108]	; (800a280 <HAL_TIM_PWM_Start_DMA+0x328>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d00e      	beq.n	800a236 <HAL_TIM_PWM_Start_DMA+0x2de>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a220:	d009      	beq.n	800a236 <HAL_TIM_PWM_Start_DMA+0x2de>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a17      	ldr	r2, [pc, #92]	; (800a284 <HAL_TIM_PWM_Start_DMA+0x32c>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d004      	beq.n	800a236 <HAL_TIM_PWM_Start_DMA+0x2de>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a15      	ldr	r2, [pc, #84]	; (800a288 <HAL_TIM_PWM_Start_DMA+0x330>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d111      	bne.n	800a25a <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	2b06      	cmp	r3, #6
 800a246:	d010      	beq.n	800a26a <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0201 	orr.w	r2, r2, #1
 800a256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a258:	e007      	b.n	800a26a <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f042 0201 	orr.w	r2, r2, #1
 800a268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	0800aa09 	.word	0x0800aa09
 800a278:	0800aab1 	.word	0x0800aab1
 800a27c:	0800a977 	.word	0x0800a977
 800a280:	40012c00 	.word	0x40012c00
 800a284:	40000400 	.word	0x40000400
 800a288:	40000800 	.word	0x40000800

0800a28c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	2b0c      	cmp	r3, #12
 800a29a:	d855      	bhi.n	800a348 <HAL_TIM_PWM_Stop_DMA+0xbc>
 800a29c:	a201      	add	r2, pc, #4	; (adr r2, 800a2a4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800a29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a2:	bf00      	nop
 800a2a4:	0800a2d9 	.word	0x0800a2d9
 800a2a8:	0800a349 	.word	0x0800a349
 800a2ac:	0800a349 	.word	0x0800a349
 800a2b0:	0800a349 	.word	0x0800a349
 800a2b4:	0800a2f5 	.word	0x0800a2f5
 800a2b8:	0800a349 	.word	0x0800a349
 800a2bc:	0800a349 	.word	0x0800a349
 800a2c0:	0800a349 	.word	0x0800a349
 800a2c4:	0800a311 	.word	0x0800a311
 800a2c8:	0800a349 	.word	0x0800a349
 800a2cc:	0800a349 	.word	0x0800a349
 800a2d0:	0800a349 	.word	0x0800a349
 800a2d4:	0800a32d 	.word	0x0800a32d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a2e6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fb ff1d 	bl	800612c <HAL_DMA_Abort_IT>
      break;
 800a2f2:	e02a      	b.n	800a34a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a302:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a308:	4618      	mov	r0, r3
 800a30a:	f7fb ff0f 	bl	800612c <HAL_DMA_Abort_IT>
      break;
 800a30e:	e01c      	b.n	800a34a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a31e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	4618      	mov	r0, r3
 800a326:	f7fb ff01 	bl	800612c <HAL_DMA_Abort_IT>
      break;
 800a32a:	e00e      	b.n	800a34a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68da      	ldr	r2, [r3, #12]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a33a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a340:	4618      	mov	r0, r3
 800a342:	f7fb fef3 	bl	800612c <HAL_DMA_Abort_IT>
      break;
 800a346:	e000      	b.n	800a34a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 800a348:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2200      	movs	r2, #0
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fe60 	bl	800b018 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a29      	ldr	r2, [pc, #164]	; (800a404 <HAL_TIM_PWM_Stop_DMA+0x178>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d117      	bne.n	800a392 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6a1a      	ldr	r2, [r3, #32]
 800a368:	f241 1311 	movw	r3, #4369	; 0x1111
 800a36c:	4013      	ands	r3, r2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10f      	bne.n	800a392 <HAL_TIM_PWM_Stop_DMA+0x106>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6a1a      	ldr	r2, [r3, #32]
 800a378:	f240 4344 	movw	r3, #1092	; 0x444
 800a37c:	4013      	ands	r3, r2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d107      	bne.n	800a392 <HAL_TIM_PWM_Stop_DMA+0x106>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a390:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6a1a      	ldr	r2, [r3, #32]
 800a398:	f241 1311 	movw	r3, #4369	; 0x1111
 800a39c:	4013      	ands	r3, r2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10f      	bne.n	800a3c2 <HAL_TIM_PWM_Stop_DMA+0x136>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	6a1a      	ldr	r2, [r3, #32]
 800a3a8:	f240 4344 	movw	r3, #1092	; 0x444
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d107      	bne.n	800a3c2 <HAL_TIM_PWM_Stop_DMA+0x136>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f022 0201 	bic.w	r2, r2, #1
 800a3c0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d104      	bne.n	800a3d2 <HAL_TIM_PWM_Stop_DMA+0x146>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3d0:	e013      	b.n	800a3fa <HAL_TIM_PWM_Stop_DMA+0x16e>
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d104      	bne.n	800a3e2 <HAL_TIM_PWM_Stop_DMA+0x156>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3e0:	e00b      	b.n	800a3fa <HAL_TIM_PWM_Stop_DMA+0x16e>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b08      	cmp	r3, #8
 800a3e6:	d104      	bne.n	800a3f2 <HAL_TIM_PWM_Stop_DMA+0x166>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3f0:	e003      	b.n	800a3fa <HAL_TIM_PWM_Stop_DMA+0x16e>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40012c00 	.word	0x40012c00

0800a408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	f003 0302 	and.w	r3, r3, #2
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d122      	bne.n	800a464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f003 0302 	and.w	r3, r3, #2
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d11b      	bne.n	800a464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f06f 0202 	mvn.w	r2, #2
 800a434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fa6f 	bl	800a92e <HAL_TIM_IC_CaptureCallback>
 800a450:	e005      	b.n	800a45e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa62 	bl	800a91c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7f8 fdd1 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d122      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d11b      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f06f 0204 	mvn.w	r2, #4
 800a488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2202      	movs	r2, #2
 800a48e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fa45 	bl	800a92e <HAL_TIM_IC_CaptureCallback>
 800a4a4:	e005      	b.n	800a4b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fa38 	bl	800a91c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7f8 fda7 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d122      	bne.n	800a50c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0308 	and.w	r3, r3, #8
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	d11b      	bne.n	800a50c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0208 	mvn.w	r2, #8
 800a4dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2204      	movs	r2, #4
 800a4e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d003      	beq.n	800a4fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa1b 	bl	800a92e <HAL_TIM_IC_CaptureCallback>
 800a4f8:	e005      	b.n	800a506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fa0e 	bl	800a91c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7f8 fd7d 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 0310 	and.w	r3, r3, #16
 800a516:	2b10      	cmp	r3, #16
 800a518:	d122      	bne.n	800a560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f003 0310 	and.w	r3, r3, #16
 800a524:	2b10      	cmp	r3, #16
 800a526:	d11b      	bne.n	800a560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f06f 0210 	mvn.w	r2, #16
 800a530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2208      	movs	r2, #8
 800a536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f9f1 	bl	800a92e <HAL_TIM_IC_CaptureCallback>
 800a54c:	e005      	b.n	800a55a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f9e4 	bl	800a91c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7f8 fd53 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d10e      	bne.n	800a58c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d107      	bne.n	800a58c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f06f 0201 	mvn.w	r2, #1
 800a584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7f8 fd46 	bl	8003018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a596:	2b80      	cmp	r3, #128	; 0x80
 800a598:	d10e      	bne.n	800a5b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a4:	2b80      	cmp	r3, #128	; 0x80
 800a5a6:	d107      	bne.n	800a5b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a5b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fdbb 	bl	800b12e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c2:	2b40      	cmp	r3, #64	; 0x40
 800a5c4:	d10e      	bne.n	800a5e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d0:	2b40      	cmp	r3, #64	; 0x40
 800a5d2:	d107      	bne.n	800a5e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f9b7 	bl	800a952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	f003 0320 	and.w	r3, r3, #32
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	d10e      	bne.n	800a610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b20      	cmp	r3, #32
 800a5fe:	d107      	bne.n	800a610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f06f 0220 	mvn.w	r2, #32
 800a608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fd86 	bl	800b11c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a610:	bf00      	nop
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d101      	bne.n	800a632 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a62e:	2302      	movs	r3, #2
 800a630:	e0ac      	b.n	800a78c <HAL_TIM_PWM_ConfigChannel+0x174>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b0c      	cmp	r3, #12
 800a63e:	f200 809f 	bhi.w	800a780 <HAL_TIM_PWM_ConfigChannel+0x168>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a67d 	.word	0x0800a67d
 800a64c:	0800a781 	.word	0x0800a781
 800a650:	0800a781 	.word	0x0800a781
 800a654:	0800a781 	.word	0x0800a781
 800a658:	0800a6bd 	.word	0x0800a6bd
 800a65c:	0800a781 	.word	0x0800a781
 800a660:	0800a781 	.word	0x0800a781
 800a664:	0800a781 	.word	0x0800a781
 800a668:	0800a6ff 	.word	0x0800a6ff
 800a66c:	0800a781 	.word	0x0800a781
 800a670:	0800a781 	.word	0x0800a781
 800a674:	0800a781 	.word	0x0800a781
 800a678:	0800a73f 	.word	0x0800a73f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	4618      	mov	r0, r3
 800a684:	f000 faaa 	bl	800abdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	699a      	ldr	r2, [r3, #24]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f042 0208 	orr.w	r2, r2, #8
 800a696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0204 	bic.w	r2, r2, #4
 800a6a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6999      	ldr	r1, [r3, #24]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	691a      	ldr	r2, [r3, #16]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	619a      	str	r2, [r3, #24]
      break;
 800a6ba:	e062      	b.n	800a782 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68b9      	ldr	r1, [r7, #8]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 faf0 	bl	800aca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699a      	ldr	r2, [r3, #24]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699a      	ldr	r2, [r3, #24]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	6999      	ldr	r1, [r3, #24]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	021a      	lsls	r2, r3, #8
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	619a      	str	r2, [r3, #24]
      break;
 800a6fc:	e041      	b.n	800a782 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	68b9      	ldr	r1, [r7, #8]
 800a704:	4618      	mov	r0, r3
 800a706:	f000 fb39 	bl	800ad7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	69da      	ldr	r2, [r3, #28]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f042 0208 	orr.w	r2, r2, #8
 800a718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69da      	ldr	r2, [r3, #28]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f022 0204 	bic.w	r2, r2, #4
 800a728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69d9      	ldr	r1, [r3, #28]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	691a      	ldr	r2, [r3, #16]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	430a      	orrs	r2, r1
 800a73a:	61da      	str	r2, [r3, #28]
      break;
 800a73c:	e021      	b.n	800a782 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68b9      	ldr	r1, [r7, #8]
 800a744:	4618      	mov	r0, r3
 800a746:	f000 fb83 	bl	800ae50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	69da      	ldr	r2, [r3, #28]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a758:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	69da      	ldr	r2, [r3, #28]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a768:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	69d9      	ldr	r1, [r3, #28]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	691b      	ldr	r3, [r3, #16]
 800a774:	021a      	lsls	r2, r3, #8
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	61da      	str	r2, [r3, #28]
      break;
 800a77e:	e000      	b.n	800a782 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a780:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d101      	bne.n	800a7ac <HAL_TIM_ConfigClockSource+0x18>
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	e0b3      	b.n	800a914 <HAL_TIM_ConfigClockSource+0x180>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2202      	movs	r2, #2
 800a7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a7ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7e4:	d03e      	beq.n	800a864 <HAL_TIM_ConfigClockSource+0xd0>
 800a7e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7ea:	f200 8087 	bhi.w	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a7ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7f2:	f000 8085 	beq.w	800a900 <HAL_TIM_ConfigClockSource+0x16c>
 800a7f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7fa:	d87f      	bhi.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a7fc:	2b70      	cmp	r3, #112	; 0x70
 800a7fe:	d01a      	beq.n	800a836 <HAL_TIM_ConfigClockSource+0xa2>
 800a800:	2b70      	cmp	r3, #112	; 0x70
 800a802:	d87b      	bhi.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a804:	2b60      	cmp	r3, #96	; 0x60
 800a806:	d050      	beq.n	800a8aa <HAL_TIM_ConfigClockSource+0x116>
 800a808:	2b60      	cmp	r3, #96	; 0x60
 800a80a:	d877      	bhi.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a80c:	2b50      	cmp	r3, #80	; 0x50
 800a80e:	d03c      	beq.n	800a88a <HAL_TIM_ConfigClockSource+0xf6>
 800a810:	2b50      	cmp	r3, #80	; 0x50
 800a812:	d873      	bhi.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a814:	2b40      	cmp	r3, #64	; 0x40
 800a816:	d058      	beq.n	800a8ca <HAL_TIM_ConfigClockSource+0x136>
 800a818:	2b40      	cmp	r3, #64	; 0x40
 800a81a:	d86f      	bhi.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a81c:	2b30      	cmp	r3, #48	; 0x30
 800a81e:	d064      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0x156>
 800a820:	2b30      	cmp	r3, #48	; 0x30
 800a822:	d86b      	bhi.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a824:	2b20      	cmp	r3, #32
 800a826:	d060      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0x156>
 800a828:	2b20      	cmp	r3, #32
 800a82a:	d867      	bhi.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d05c      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0x156>
 800a830:	2b10      	cmp	r3, #16
 800a832:	d05a      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a834:	e062      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6818      	ldr	r0, [r3, #0]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	6899      	ldr	r1, [r3, #8]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f000 fbc8 	bl	800afda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a858:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	609a      	str	r2, [r3, #8]
      break;
 800a862:	e04e      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6818      	ldr	r0, [r3, #0]
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	6899      	ldr	r1, [r3, #8]
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	f000 fbb1 	bl	800afda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a886:	609a      	str	r2, [r3, #8]
      break;
 800a888:	e03b      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6818      	ldr	r0, [r3, #0]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	6859      	ldr	r1, [r3, #4]
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	68db      	ldr	r3, [r3, #12]
 800a896:	461a      	mov	r2, r3
 800a898:	f000 fb28 	bl	800aeec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2150      	movs	r1, #80	; 0x50
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 fb7f 	bl	800afa6 <TIM_ITRx_SetConfig>
      break;
 800a8a8:	e02b      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	6859      	ldr	r1, [r3, #4]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f000 fb46 	bl	800af48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2160      	movs	r1, #96	; 0x60
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f000 fb6f 	bl	800afa6 <TIM_ITRx_SetConfig>
      break;
 800a8c8:	e01b      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6818      	ldr	r0, [r3, #0]
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	6859      	ldr	r1, [r3, #4]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	f000 fb08 	bl	800aeec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2140      	movs	r1, #64	; 0x40
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 fb5f 	bl	800afa6 <TIM_ITRx_SetConfig>
      break;
 800a8e8:	e00b      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f000 fb56 	bl	800afa6 <TIM_ITRx_SetConfig>
        break;
 800a8fa:	e002      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a8fc:	bf00      	nop
 800a8fe:	e000      	b.n	800a902 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a900:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	bc80      	pop	{r7}
 800a92c:	4770      	bx	lr

0800a92e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a92e:	b480      	push	{r7}
 800a930:	b083      	sub	sp, #12
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bc80      	pop	{r7}
 800a93e:	4770      	bx	lr

0800a940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bc80      	pop	{r7}
 800a950:	4770      	bx	lr

0800a952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a952:	b480      	push	{r7}
 800a954:	b083      	sub	sp, #12
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a95a:	bf00      	nop
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	bc80      	pop	{r7}
 800a962:	4770      	bx	lr

0800a964 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	bc80      	pop	{r7}
 800a974:	4770      	bx	lr

0800a976 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b084      	sub	sp, #16
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a982:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d107      	bne.n	800a99e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a99c:	e02a      	b.n	800a9f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d107      	bne.n	800a9b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9b6:	e01d      	b.n	800a9f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d107      	bne.n	800a9d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2204      	movs	r2, #4
 800a9c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9d0:	e010      	b.n	800a9f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d107      	bne.n	800a9ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2208      	movs	r2, #8
 800a9e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9ea:	e003      	b.n	800a9f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff ffb5 	bl	800a964 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	771a      	strb	r2, [r3, #28]
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d10b      	bne.n	800aa38 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2201      	movs	r2, #1
 800aa24:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d136      	bne.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2201      	movs	r2, #1
 800aa32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa36:	e031      	b.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d10b      	bne.n	800aa5a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2202      	movs	r2, #2
 800aa46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d125      	bne.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa58:	e020      	b.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d10b      	bne.n	800aa7c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2204      	movs	r2, #4
 800aa68:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d114      	bne.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa7a:	e00f      	b.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d10a      	bne.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2208      	movs	r2, #8
 800aa8a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d103      	bne.n	800aa9c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7f8 faaf 	bl	8003000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	771a      	strb	r2, [r3, #28]
}
 800aaa8:	bf00      	nop
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d103      	bne.n	800aad0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2201      	movs	r2, #1
 800aacc:	771a      	strb	r2, [r3, #28]
 800aace:	e019      	b.n	800ab04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d103      	bne.n	800aae2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2202      	movs	r2, #2
 800aade:	771a      	strb	r2, [r3, #28]
 800aae0:	e010      	b.n	800ab04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d103      	bne.n	800aaf4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2204      	movs	r2, #4
 800aaf0:	771a      	strb	r2, [r3, #28]
 800aaf2:	e007      	b.n	800ab04 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d102      	bne.n	800ab04 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2208      	movs	r2, #8
 800ab02:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff ff1b 	bl	800a940 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	771a      	strb	r2, [r3, #28]
}
 800ab10:	bf00      	nop
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a29      	ldr	r2, [pc, #164]	; (800abd0 <TIM_Base_SetConfig+0xb8>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d00b      	beq.n	800ab48 <TIM_Base_SetConfig+0x30>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab36:	d007      	beq.n	800ab48 <TIM_Base_SetConfig+0x30>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a26      	ldr	r2, [pc, #152]	; (800abd4 <TIM_Base_SetConfig+0xbc>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d003      	beq.n	800ab48 <TIM_Base_SetConfig+0x30>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a25      	ldr	r2, [pc, #148]	; (800abd8 <TIM_Base_SetConfig+0xc0>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d108      	bne.n	800ab5a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a1c      	ldr	r2, [pc, #112]	; (800abd0 <TIM_Base_SetConfig+0xb8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d00b      	beq.n	800ab7a <TIM_Base_SetConfig+0x62>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab68:	d007      	beq.n	800ab7a <TIM_Base_SetConfig+0x62>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a19      	ldr	r2, [pc, #100]	; (800abd4 <TIM_Base_SetConfig+0xbc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d003      	beq.n	800ab7a <TIM_Base_SetConfig+0x62>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a18      	ldr	r2, [pc, #96]	; (800abd8 <TIM_Base_SetConfig+0xc0>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d108      	bne.n	800ab8c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	695b      	ldr	r3, [r3, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a07      	ldr	r2, [pc, #28]	; (800abd0 <TIM_Base_SetConfig+0xb8>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d103      	bne.n	800abc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	691a      	ldr	r2, [r3, #16]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	615a      	str	r2, [r3, #20]
}
 800abc6:	bf00      	nop
 800abc8:	3714      	adds	r7, #20
 800abca:	46bd      	mov	sp, r7
 800abcc:	bc80      	pop	{r7}
 800abce:	4770      	bx	lr
 800abd0:	40012c00 	.word	0x40012c00
 800abd4:	40000400 	.word	0x40000400
 800abd8:	40000800 	.word	0x40000800

0800abdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	f023 0201 	bic.w	r2, r3, #1
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0303 	bic.w	r3, r3, #3
 800ac12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f023 0302 	bic.w	r3, r3, #2
 800ac24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a1c      	ldr	r2, [pc, #112]	; (800aca4 <TIM_OC1_SetConfig+0xc8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d10c      	bne.n	800ac52 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f023 0308 	bic.w	r3, r3, #8
 800ac3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f023 0304 	bic.w	r3, r3, #4
 800ac50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a13      	ldr	r2, [pc, #76]	; (800aca4 <TIM_OC1_SetConfig+0xc8>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d111      	bne.n	800ac7e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	693a      	ldr	r2, [r7, #16]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	697a      	ldr	r2, [r7, #20]
 800ac96:	621a      	str	r2, [r3, #32]
}
 800ac98:	bf00      	nop
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bc80      	pop	{r7}
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	40012c00 	.word	0x40012c00

0800aca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	f023 0210 	bic.w	r2, r3, #16
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	4313      	orrs	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f023 0320 	bic.w	r3, r3, #32
 800acf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	011b      	lsls	r3, r3, #4
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a1d      	ldr	r2, [pc, #116]	; (800ad78 <TIM_OC2_SetConfig+0xd0>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d10d      	bne.n	800ad24 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	011b      	lsls	r3, r3, #4
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <TIM_OC2_SetConfig+0xd0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d113      	bne.n	800ad54 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	693a      	ldr	r2, [r7, #16]
 800ad44:	4313      	orrs	r3, r2
 800ad46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	009b      	lsls	r3, r3, #2
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	4313      	orrs	r3, r2
 800ad52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	693a      	ldr	r2, [r7, #16]
 800ad58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	621a      	str	r2, [r3, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	371c      	adds	r7, #28
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bc80      	pop	{r7}
 800ad76:	4770      	bx	lr
 800ad78:	40012c00 	.word	0x40012c00

0800ad7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4313      	orrs	r3, r2
 800adbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800adc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	021b      	lsls	r3, r3, #8
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	4313      	orrs	r3, r2
 800add0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4a1d      	ldr	r2, [pc, #116]	; (800ae4c <TIM_OC3_SetConfig+0xd0>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d10d      	bne.n	800adf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ade0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	021b      	lsls	r3, r3, #8
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a14      	ldr	r2, [pc, #80]	; (800ae4c <TIM_OC3_SetConfig+0xd0>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d113      	bne.n	800ae26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	011b      	lsls	r3, r3, #4
 800ae20:	693a      	ldr	r2, [r7, #16]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	621a      	str	r2, [r3, #32]
}
 800ae40:	bf00      	nop
 800ae42:	371c      	adds	r7, #28
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bc80      	pop	{r7}
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	40012c00 	.word	0x40012c00

0800ae50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b087      	sub	sp, #28
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	69db      	ldr	r3, [r3, #28]
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	021b      	lsls	r3, r3, #8
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	031b      	lsls	r3, r3, #12
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a0f      	ldr	r2, [pc, #60]	; (800aee8 <TIM_OC4_SetConfig+0x98>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d109      	bne.n	800aec4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aeb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	019b      	lsls	r3, r3, #6
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	621a      	str	r2, [r3, #32]
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bc80      	pop	{r7}
 800aee6:	4770      	bx	lr
 800aee8:	40012c00 	.word	0x40012c00

0800aeec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b087      	sub	sp, #28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	f023 0201 	bic.w	r2, r3, #1
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4313      	orrs	r3, r2
 800af20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f023 030a 	bic.w	r3, r3, #10
 800af28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	621a      	str	r2, [r3, #32]
}
 800af3e:	bf00      	nop
 800af40:	371c      	adds	r7, #28
 800af42:	46bd      	mov	sp, r7
 800af44:	bc80      	pop	{r7}
 800af46:	4770      	bx	lr

0800af48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af48:	b480      	push	{r7}
 800af4a:	b087      	sub	sp, #28
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	f023 0210 	bic.w	r2, r3, #16
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	031b      	lsls	r3, r3, #12
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	011b      	lsls	r3, r3, #4
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	4313      	orrs	r3, r2
 800af8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	621a      	str	r2, [r3, #32]
}
 800af9c:	bf00      	nop
 800af9e:	371c      	adds	r7, #28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bc80      	pop	{r7}
 800afa4:	4770      	bx	lr

0800afa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afa6:	b480      	push	{r7}
 800afa8:	b085      	sub	sp, #20
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f043 0307 	orr.w	r3, r3, #7
 800afc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	609a      	str	r2, [r3, #8]
}
 800afd0:	bf00      	nop
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bc80      	pop	{r7}
 800afd8:	4770      	bx	lr

0800afda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afda:	b480      	push	{r7}
 800afdc:	b087      	sub	sp, #28
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
 800afe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aff4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	021a      	lsls	r2, r3, #8
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	431a      	orrs	r2, r3
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	4313      	orrs	r3, r2
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	4313      	orrs	r3, r2
 800b006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	609a      	str	r2, [r3, #8]
}
 800b00e:	bf00      	nop
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	bc80      	pop	{r7}
 800b016:	4770      	bx	lr

0800b018 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b018:	b480      	push	{r7}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	f003 031f 	and.w	r3, r3, #31
 800b02a:	2201      	movs	r2, #1
 800b02c:	fa02 f303 	lsl.w	r3, r2, r3
 800b030:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6a1a      	ldr	r2, [r3, #32]
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	43db      	mvns	r3, r3
 800b03a:	401a      	ands	r2, r3
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6a1a      	ldr	r2, [r3, #32]
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	f003 031f 	and.w	r3, r3, #31
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	fa01 f303 	lsl.w	r3, r1, r3
 800b050:	431a      	orrs	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	621a      	str	r2, [r3, #32]
}
 800b056:	bf00      	nop
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bc80      	pop	{r7}
 800b05e:	4770      	bx	lr

0800b060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b070:	2b01      	cmp	r3, #1
 800b072:	d101      	bne.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b074:	2302      	movs	r3, #2
 800b076:	e046      	b.n	800b106 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a16      	ldr	r2, [pc, #88]	; (800b110 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d00e      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0c4:	d009      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a12      	ldr	r2, [pc, #72]	; (800b114 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d004      	beq.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a10      	ldr	r2, [pc, #64]	; (800b118 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d10c      	bne.n	800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bc80      	pop	{r7}
 800b10e:	4770      	bx	lr
 800b110:	40012c00 	.word	0x40012c00
 800b114:	40000400 	.word	0x40000400
 800b118:	40000800 	.word	0x40000800

0800b11c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	bc80      	pop	{r7}
 800b12c:	4770      	bx	lr

0800b12e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b12e:	b480      	push	{r7}
 800b130:	b083      	sub	sp, #12
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bc80      	pop	{r7}
 800b13e:	4770      	bx	lr

0800b140 <_ZdlPvj>:
 800b140:	f000 b815 	b.w	800b16e <_ZdlPv>

0800b144 <_ZdaPv>:
 800b144:	f000 b813 	b.w	800b16e <_ZdlPv>

0800b148 <_Znwj>:
 800b148:	2801      	cmp	r0, #1
 800b14a:	bf38      	it	cc
 800b14c:	2001      	movcc	r0, #1
 800b14e:	b510      	push	{r4, lr}
 800b150:	4604      	mov	r4, r0
 800b152:	4620      	mov	r0, r4
 800b154:	f000 f848 	bl	800b1e8 <malloc>
 800b158:	b930      	cbnz	r0, 800b168 <_Znwj+0x20>
 800b15a:	f000 f80b 	bl	800b174 <_ZSt15get_new_handlerv>
 800b15e:	b908      	cbnz	r0, 800b164 <_Znwj+0x1c>
 800b160:	f000 f810 	bl	800b184 <abort>
 800b164:	4780      	blx	r0
 800b166:	e7f4      	b.n	800b152 <_Znwj+0xa>
 800b168:	bd10      	pop	{r4, pc}

0800b16a <_Znaj>:
 800b16a:	f7ff bfed 	b.w	800b148 <_Znwj>

0800b16e <_ZdlPv>:
 800b16e:	f000 b843 	b.w	800b1f8 <free>
	...

0800b174 <_ZSt15get_new_handlerv>:
 800b174:	4b02      	ldr	r3, [pc, #8]	; (800b180 <_ZSt15get_new_handlerv+0xc>)
 800b176:	6818      	ldr	r0, [r3, #0]
 800b178:	f3bf 8f5b 	dmb	ish
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20000628 	.word	0x20000628

0800b184 <abort>:
 800b184:	2006      	movs	r0, #6
 800b186:	b508      	push	{r3, lr}
 800b188:	f000 f932 	bl	800b3f0 <raise>
 800b18c:	2001      	movs	r0, #1
 800b18e:	f7f8 fd64 	bl	8003c5a <_exit>
	...

0800b194 <__errno>:
 800b194:	4b01      	ldr	r3, [pc, #4]	; (800b19c <__errno+0x8>)
 800b196:	6818      	ldr	r0, [r3, #0]
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	20000058 	.word	0x20000058

0800b1a0 <__libc_init_array>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	2600      	movs	r6, #0
 800b1a4:	4d0c      	ldr	r5, [pc, #48]	; (800b1d8 <__libc_init_array+0x38>)
 800b1a6:	4c0d      	ldr	r4, [pc, #52]	; (800b1dc <__libc_init_array+0x3c>)
 800b1a8:	1b64      	subs	r4, r4, r5
 800b1aa:	10a4      	asrs	r4, r4, #2
 800b1ac:	42a6      	cmp	r6, r4
 800b1ae:	d109      	bne.n	800b1c4 <__libc_init_array+0x24>
 800b1b0:	f000 fccc 	bl	800bb4c <_init>
 800b1b4:	2600      	movs	r6, #0
 800b1b6:	4d0a      	ldr	r5, [pc, #40]	; (800b1e0 <__libc_init_array+0x40>)
 800b1b8:	4c0a      	ldr	r4, [pc, #40]	; (800b1e4 <__libc_init_array+0x44>)
 800b1ba:	1b64      	subs	r4, r4, r5
 800b1bc:	10a4      	asrs	r4, r4, #2
 800b1be:	42a6      	cmp	r6, r4
 800b1c0:	d105      	bne.n	800b1ce <__libc_init_array+0x2e>
 800b1c2:	bd70      	pop	{r4, r5, r6, pc}
 800b1c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c8:	4798      	blx	r3
 800b1ca:	3601      	adds	r6, #1
 800b1cc:	e7ee      	b.n	800b1ac <__libc_init_array+0xc>
 800b1ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1d2:	4798      	blx	r3
 800b1d4:	3601      	adds	r6, #1
 800b1d6:	e7f2      	b.n	800b1be <__libc_init_array+0x1e>
 800b1d8:	0801244c 	.word	0x0801244c
 800b1dc:	0801244c 	.word	0x0801244c
 800b1e0:	0801244c 	.word	0x0801244c
 800b1e4:	08012450 	.word	0x08012450

0800b1e8 <malloc>:
 800b1e8:	4b02      	ldr	r3, [pc, #8]	; (800b1f4 <malloc+0xc>)
 800b1ea:	4601      	mov	r1, r0
 800b1ec:	6818      	ldr	r0, [r3, #0]
 800b1ee:	f000 b86d 	b.w	800b2cc <_malloc_r>
 800b1f2:	bf00      	nop
 800b1f4:	20000058 	.word	0x20000058

0800b1f8 <free>:
 800b1f8:	4b02      	ldr	r3, [pc, #8]	; (800b204 <free+0xc>)
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f000 b819 	b.w	800b234 <_free_r>
 800b202:	bf00      	nop
 800b204:	20000058 	.word	0x20000058

0800b208 <memcpy>:
 800b208:	440a      	add	r2, r1
 800b20a:	4291      	cmp	r1, r2
 800b20c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b210:	d100      	bne.n	800b214 <memcpy+0xc>
 800b212:	4770      	bx	lr
 800b214:	b510      	push	{r4, lr}
 800b216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b21a:	4291      	cmp	r1, r2
 800b21c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b220:	d1f9      	bne.n	800b216 <memcpy+0xe>
 800b222:	bd10      	pop	{r4, pc}

0800b224 <memset>:
 800b224:	4603      	mov	r3, r0
 800b226:	4402      	add	r2, r0
 800b228:	4293      	cmp	r3, r2
 800b22a:	d100      	bne.n	800b22e <memset+0xa>
 800b22c:	4770      	bx	lr
 800b22e:	f803 1b01 	strb.w	r1, [r3], #1
 800b232:	e7f9      	b.n	800b228 <memset+0x4>

0800b234 <_free_r>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4605      	mov	r5, r0
 800b238:	2900      	cmp	r1, #0
 800b23a:	d043      	beq.n	800b2c4 <_free_r+0x90>
 800b23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b240:	1f0c      	subs	r4, r1, #4
 800b242:	2b00      	cmp	r3, #0
 800b244:	bfb8      	it	lt
 800b246:	18e4      	addlt	r4, r4, r3
 800b248:	f000 f92a 	bl	800b4a0 <__malloc_lock>
 800b24c:	4a1e      	ldr	r2, [pc, #120]	; (800b2c8 <_free_r+0x94>)
 800b24e:	6813      	ldr	r3, [r2, #0]
 800b250:	4610      	mov	r0, r2
 800b252:	b933      	cbnz	r3, 800b262 <_free_r+0x2e>
 800b254:	6063      	str	r3, [r4, #4]
 800b256:	6014      	str	r4, [r2, #0]
 800b258:	4628      	mov	r0, r5
 800b25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b25e:	f000 b925 	b.w	800b4ac <__malloc_unlock>
 800b262:	42a3      	cmp	r3, r4
 800b264:	d90a      	bls.n	800b27c <_free_r+0x48>
 800b266:	6821      	ldr	r1, [r4, #0]
 800b268:	1862      	adds	r2, r4, r1
 800b26a:	4293      	cmp	r3, r2
 800b26c:	bf01      	itttt	eq
 800b26e:	681a      	ldreq	r2, [r3, #0]
 800b270:	685b      	ldreq	r3, [r3, #4]
 800b272:	1852      	addeq	r2, r2, r1
 800b274:	6022      	streq	r2, [r4, #0]
 800b276:	6063      	str	r3, [r4, #4]
 800b278:	6004      	str	r4, [r0, #0]
 800b27a:	e7ed      	b.n	800b258 <_free_r+0x24>
 800b27c:	461a      	mov	r2, r3
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	b10b      	cbz	r3, 800b286 <_free_r+0x52>
 800b282:	42a3      	cmp	r3, r4
 800b284:	d9fa      	bls.n	800b27c <_free_r+0x48>
 800b286:	6811      	ldr	r1, [r2, #0]
 800b288:	1850      	adds	r0, r2, r1
 800b28a:	42a0      	cmp	r0, r4
 800b28c:	d10b      	bne.n	800b2a6 <_free_r+0x72>
 800b28e:	6820      	ldr	r0, [r4, #0]
 800b290:	4401      	add	r1, r0
 800b292:	1850      	adds	r0, r2, r1
 800b294:	4283      	cmp	r3, r0
 800b296:	6011      	str	r1, [r2, #0]
 800b298:	d1de      	bne.n	800b258 <_free_r+0x24>
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4401      	add	r1, r0
 800b2a0:	6011      	str	r1, [r2, #0]
 800b2a2:	6053      	str	r3, [r2, #4]
 800b2a4:	e7d8      	b.n	800b258 <_free_r+0x24>
 800b2a6:	d902      	bls.n	800b2ae <_free_r+0x7a>
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	602b      	str	r3, [r5, #0]
 800b2ac:	e7d4      	b.n	800b258 <_free_r+0x24>
 800b2ae:	6820      	ldr	r0, [r4, #0]
 800b2b0:	1821      	adds	r1, r4, r0
 800b2b2:	428b      	cmp	r3, r1
 800b2b4:	bf01      	itttt	eq
 800b2b6:	6819      	ldreq	r1, [r3, #0]
 800b2b8:	685b      	ldreq	r3, [r3, #4]
 800b2ba:	1809      	addeq	r1, r1, r0
 800b2bc:	6021      	streq	r1, [r4, #0]
 800b2be:	6063      	str	r3, [r4, #4]
 800b2c0:	6054      	str	r4, [r2, #4]
 800b2c2:	e7c9      	b.n	800b258 <_free_r+0x24>
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	2000062c 	.word	0x2000062c

0800b2cc <_malloc_r>:
 800b2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ce:	1ccd      	adds	r5, r1, #3
 800b2d0:	f025 0503 	bic.w	r5, r5, #3
 800b2d4:	3508      	adds	r5, #8
 800b2d6:	2d0c      	cmp	r5, #12
 800b2d8:	bf38      	it	cc
 800b2da:	250c      	movcc	r5, #12
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	4606      	mov	r6, r0
 800b2e0:	db01      	blt.n	800b2e6 <_malloc_r+0x1a>
 800b2e2:	42a9      	cmp	r1, r5
 800b2e4:	d903      	bls.n	800b2ee <_malloc_r+0x22>
 800b2e6:	230c      	movs	r3, #12
 800b2e8:	6033      	str	r3, [r6, #0]
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ee:	f000 f8d7 	bl	800b4a0 <__malloc_lock>
 800b2f2:	4921      	ldr	r1, [pc, #132]	; (800b378 <_malloc_r+0xac>)
 800b2f4:	680a      	ldr	r2, [r1, #0]
 800b2f6:	4614      	mov	r4, r2
 800b2f8:	b99c      	cbnz	r4, 800b322 <_malloc_r+0x56>
 800b2fa:	4f20      	ldr	r7, [pc, #128]	; (800b37c <_malloc_r+0xb0>)
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	b923      	cbnz	r3, 800b30a <_malloc_r+0x3e>
 800b300:	4621      	mov	r1, r4
 800b302:	4630      	mov	r0, r6
 800b304:	f000 f83c 	bl	800b380 <_sbrk_r>
 800b308:	6038      	str	r0, [r7, #0]
 800b30a:	4629      	mov	r1, r5
 800b30c:	4630      	mov	r0, r6
 800b30e:	f000 f837 	bl	800b380 <_sbrk_r>
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	d123      	bne.n	800b35e <_malloc_r+0x92>
 800b316:	230c      	movs	r3, #12
 800b318:	4630      	mov	r0, r6
 800b31a:	6033      	str	r3, [r6, #0]
 800b31c:	f000 f8c6 	bl	800b4ac <__malloc_unlock>
 800b320:	e7e3      	b.n	800b2ea <_malloc_r+0x1e>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	1b5b      	subs	r3, r3, r5
 800b326:	d417      	bmi.n	800b358 <_malloc_r+0x8c>
 800b328:	2b0b      	cmp	r3, #11
 800b32a:	d903      	bls.n	800b334 <_malloc_r+0x68>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	441c      	add	r4, r3
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	e004      	b.n	800b33e <_malloc_r+0x72>
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	42a2      	cmp	r2, r4
 800b338:	bf0c      	ite	eq
 800b33a:	600b      	streq	r3, [r1, #0]
 800b33c:	6053      	strne	r3, [r2, #4]
 800b33e:	4630      	mov	r0, r6
 800b340:	f000 f8b4 	bl	800b4ac <__malloc_unlock>
 800b344:	f104 000b 	add.w	r0, r4, #11
 800b348:	1d23      	adds	r3, r4, #4
 800b34a:	f020 0007 	bic.w	r0, r0, #7
 800b34e:	1ac2      	subs	r2, r0, r3
 800b350:	d0cc      	beq.n	800b2ec <_malloc_r+0x20>
 800b352:	1a1b      	subs	r3, r3, r0
 800b354:	50a3      	str	r3, [r4, r2]
 800b356:	e7c9      	b.n	800b2ec <_malloc_r+0x20>
 800b358:	4622      	mov	r2, r4
 800b35a:	6864      	ldr	r4, [r4, #4]
 800b35c:	e7cc      	b.n	800b2f8 <_malloc_r+0x2c>
 800b35e:	1cc4      	adds	r4, r0, #3
 800b360:	f024 0403 	bic.w	r4, r4, #3
 800b364:	42a0      	cmp	r0, r4
 800b366:	d0e3      	beq.n	800b330 <_malloc_r+0x64>
 800b368:	1a21      	subs	r1, r4, r0
 800b36a:	4630      	mov	r0, r6
 800b36c:	f000 f808 	bl	800b380 <_sbrk_r>
 800b370:	3001      	adds	r0, #1
 800b372:	d1dd      	bne.n	800b330 <_malloc_r+0x64>
 800b374:	e7cf      	b.n	800b316 <_malloc_r+0x4a>
 800b376:	bf00      	nop
 800b378:	2000062c 	.word	0x2000062c
 800b37c:	20000630 	.word	0x20000630

0800b380 <_sbrk_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	2300      	movs	r3, #0
 800b384:	4d05      	ldr	r5, [pc, #20]	; (800b39c <_sbrk_r+0x1c>)
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	602b      	str	r3, [r5, #0]
 800b38c:	f7f8 fc70 	bl	8003c70 <_sbrk>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_sbrk_r+0x1a>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	b103      	cbz	r3, 800b39a <_sbrk_r+0x1a>
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	20000870 	.word	0x20000870

0800b3a0 <_raise_r>:
 800b3a0:	291f      	cmp	r1, #31
 800b3a2:	b538      	push	{r3, r4, r5, lr}
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	d904      	bls.n	800b3b4 <_raise_r+0x14>
 800b3aa:	2316      	movs	r3, #22
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3b6:	b112      	cbz	r2, 800b3be <_raise_r+0x1e>
 800b3b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3bc:	b94b      	cbnz	r3, 800b3d2 <_raise_r+0x32>
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 f830 	bl	800b424 <_getpid_r>
 800b3c4:	462a      	mov	r2, r5
 800b3c6:	4601      	mov	r1, r0
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ce:	f000 b817 	b.w	800b400 <_kill_r>
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d00a      	beq.n	800b3ec <_raise_r+0x4c>
 800b3d6:	1c59      	adds	r1, r3, #1
 800b3d8:	d103      	bne.n	800b3e2 <_raise_r+0x42>
 800b3da:	2316      	movs	r3, #22
 800b3dc:	6003      	str	r3, [r0, #0]
 800b3de:	2001      	movs	r0, #1
 800b3e0:	e7e7      	b.n	800b3b2 <_raise_r+0x12>
 800b3e2:	2400      	movs	r4, #0
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3ea:	4798      	blx	r3
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e7e0      	b.n	800b3b2 <_raise_r+0x12>

0800b3f0 <raise>:
 800b3f0:	4b02      	ldr	r3, [pc, #8]	; (800b3fc <raise+0xc>)
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	6818      	ldr	r0, [r3, #0]
 800b3f6:	f7ff bfd3 	b.w	800b3a0 <_raise_r>
 800b3fa:	bf00      	nop
 800b3fc:	20000058 	.word	0x20000058

0800b400 <_kill_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	2300      	movs	r3, #0
 800b404:	4d06      	ldr	r5, [pc, #24]	; (800b420 <_kill_r+0x20>)
 800b406:	4604      	mov	r4, r0
 800b408:	4608      	mov	r0, r1
 800b40a:	4611      	mov	r1, r2
 800b40c:	602b      	str	r3, [r5, #0]
 800b40e:	f7f8 fc14 	bl	8003c3a <_kill>
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	d102      	bne.n	800b41c <_kill_r+0x1c>
 800b416:	682b      	ldr	r3, [r5, #0]
 800b418:	b103      	cbz	r3, 800b41c <_kill_r+0x1c>
 800b41a:	6023      	str	r3, [r4, #0]
 800b41c:	bd38      	pop	{r3, r4, r5, pc}
 800b41e:	bf00      	nop
 800b420:	20000870 	.word	0x20000870

0800b424 <_getpid_r>:
 800b424:	f7f8 bc02 	b.w	8003c2c <_getpid>

0800b428 <sniprintf>:
 800b428:	b40c      	push	{r2, r3}
 800b42a:	b530      	push	{r4, r5, lr}
 800b42c:	4b17      	ldr	r3, [pc, #92]	; (800b48c <sniprintf+0x64>)
 800b42e:	1e0c      	subs	r4, r1, #0
 800b430:	681d      	ldr	r5, [r3, #0]
 800b432:	b09d      	sub	sp, #116	; 0x74
 800b434:	da08      	bge.n	800b448 <sniprintf+0x20>
 800b436:	238b      	movs	r3, #139	; 0x8b
 800b438:	f04f 30ff 	mov.w	r0, #4294967295
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	b01d      	add	sp, #116	; 0x74
 800b440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b444:	b002      	add	sp, #8
 800b446:	4770      	bx	lr
 800b448:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b44c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b450:	bf0c      	ite	eq
 800b452:	4623      	moveq	r3, r4
 800b454:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b458:	9304      	str	r3, [sp, #16]
 800b45a:	9307      	str	r3, [sp, #28]
 800b45c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b460:	9002      	str	r0, [sp, #8]
 800b462:	9006      	str	r0, [sp, #24]
 800b464:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b468:	4628      	mov	r0, r5
 800b46a:	ab21      	add	r3, sp, #132	; 0x84
 800b46c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b46e:	a902      	add	r1, sp, #8
 800b470:	9301      	str	r3, [sp, #4]
 800b472:	f000 f87d 	bl	800b570 <_svfiprintf_r>
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	bfbc      	itt	lt
 800b47a:	238b      	movlt	r3, #139	; 0x8b
 800b47c:	602b      	strlt	r3, [r5, #0]
 800b47e:	2c00      	cmp	r4, #0
 800b480:	d0dd      	beq.n	800b43e <sniprintf+0x16>
 800b482:	2200      	movs	r2, #0
 800b484:	9b02      	ldr	r3, [sp, #8]
 800b486:	701a      	strb	r2, [r3, #0]
 800b488:	e7d9      	b.n	800b43e <sniprintf+0x16>
 800b48a:	bf00      	nop
 800b48c:	20000058 	.word	0x20000058

0800b490 <strcpy>:
 800b490:	4603      	mov	r3, r0
 800b492:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b496:	f803 2b01 	strb.w	r2, [r3], #1
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	d1f9      	bne.n	800b492 <strcpy+0x2>
 800b49e:	4770      	bx	lr

0800b4a0 <__malloc_lock>:
 800b4a0:	4801      	ldr	r0, [pc, #4]	; (800b4a8 <__malloc_lock+0x8>)
 800b4a2:	f000 bafb 	b.w	800ba9c <__retarget_lock_acquire_recursive>
 800b4a6:	bf00      	nop
 800b4a8:	20000878 	.word	0x20000878

0800b4ac <__malloc_unlock>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <__malloc_unlock+0x8>)
 800b4ae:	f000 baf6 	b.w	800ba9e <__retarget_lock_release_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	20000878 	.word	0x20000878

0800b4b8 <__ssputs_r>:
 800b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	688e      	ldr	r6, [r1, #8]
 800b4be:	4682      	mov	sl, r0
 800b4c0:	429e      	cmp	r6, r3
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	4690      	mov	r8, r2
 800b4c6:	461f      	mov	r7, r3
 800b4c8:	d838      	bhi.n	800b53c <__ssputs_r+0x84>
 800b4ca:	898a      	ldrh	r2, [r1, #12]
 800b4cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4d0:	d032      	beq.n	800b538 <__ssputs_r+0x80>
 800b4d2:	6825      	ldr	r5, [r4, #0]
 800b4d4:	6909      	ldr	r1, [r1, #16]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	eba5 0901 	sub.w	r9, r5, r1
 800b4dc:	6965      	ldr	r5, [r4, #20]
 800b4de:	444b      	add	r3, r9
 800b4e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4e8:	106d      	asrs	r5, r5, #1
 800b4ea:	429d      	cmp	r5, r3
 800b4ec:	bf38      	it	cc
 800b4ee:	461d      	movcc	r5, r3
 800b4f0:	0553      	lsls	r3, r2, #21
 800b4f2:	d531      	bpl.n	800b558 <__ssputs_r+0xa0>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7ff fee9 	bl	800b2cc <_malloc_r>
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	b950      	cbnz	r0, 800b514 <__ssputs_r+0x5c>
 800b4fe:	230c      	movs	r3, #12
 800b500:	f04f 30ff 	mov.w	r0, #4294967295
 800b504:	f8ca 3000 	str.w	r3, [sl]
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b514:	464a      	mov	r2, r9
 800b516:	6921      	ldr	r1, [r4, #16]
 800b518:	f7ff fe76 	bl	800b208 <memcpy>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	6126      	str	r6, [r4, #16]
 800b52a:	444e      	add	r6, r9
 800b52c:	6026      	str	r6, [r4, #0]
 800b52e:	463e      	mov	r6, r7
 800b530:	6165      	str	r5, [r4, #20]
 800b532:	eba5 0509 	sub.w	r5, r5, r9
 800b536:	60a5      	str	r5, [r4, #8]
 800b538:	42be      	cmp	r6, r7
 800b53a:	d900      	bls.n	800b53e <__ssputs_r+0x86>
 800b53c:	463e      	mov	r6, r7
 800b53e:	4632      	mov	r2, r6
 800b540:	4641      	mov	r1, r8
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	f000 faba 	bl	800babc <memmove>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	6822      	ldr	r2, [r4, #0]
 800b54c:	1b9b      	subs	r3, r3, r6
 800b54e:	4432      	add	r2, r6
 800b550:	2000      	movs	r0, #0
 800b552:	60a3      	str	r3, [r4, #8]
 800b554:	6022      	str	r2, [r4, #0]
 800b556:	e7db      	b.n	800b510 <__ssputs_r+0x58>
 800b558:	462a      	mov	r2, r5
 800b55a:	f000 fac9 	bl	800baf0 <_realloc_r>
 800b55e:	4606      	mov	r6, r0
 800b560:	2800      	cmp	r0, #0
 800b562:	d1e1      	bne.n	800b528 <__ssputs_r+0x70>
 800b564:	4650      	mov	r0, sl
 800b566:	6921      	ldr	r1, [r4, #16]
 800b568:	f7ff fe64 	bl	800b234 <_free_r>
 800b56c:	e7c7      	b.n	800b4fe <__ssputs_r+0x46>
	...

0800b570 <_svfiprintf_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	4698      	mov	r8, r3
 800b576:	898b      	ldrh	r3, [r1, #12]
 800b578:	4607      	mov	r7, r0
 800b57a:	061b      	lsls	r3, r3, #24
 800b57c:	460d      	mov	r5, r1
 800b57e:	4614      	mov	r4, r2
 800b580:	b09d      	sub	sp, #116	; 0x74
 800b582:	d50e      	bpl.n	800b5a2 <_svfiprintf_r+0x32>
 800b584:	690b      	ldr	r3, [r1, #16]
 800b586:	b963      	cbnz	r3, 800b5a2 <_svfiprintf_r+0x32>
 800b588:	2140      	movs	r1, #64	; 0x40
 800b58a:	f7ff fe9f 	bl	800b2cc <_malloc_r>
 800b58e:	6028      	str	r0, [r5, #0]
 800b590:	6128      	str	r0, [r5, #16]
 800b592:	b920      	cbnz	r0, 800b59e <_svfiprintf_r+0x2e>
 800b594:	230c      	movs	r3, #12
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	e0d1      	b.n	800b742 <_svfiprintf_r+0x1d2>
 800b59e:	2340      	movs	r3, #64	; 0x40
 800b5a0:	616b      	str	r3, [r5, #20]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a6:	2320      	movs	r3, #32
 800b5a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ac:	2330      	movs	r3, #48	; 0x30
 800b5ae:	f04f 0901 	mov.w	r9, #1
 800b5b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b75c <_svfiprintf_r+0x1ec>
 800b5ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5be:	4623      	mov	r3, r4
 800b5c0:	469a      	mov	sl, r3
 800b5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5c6:	b10a      	cbz	r2, 800b5cc <_svfiprintf_r+0x5c>
 800b5c8:	2a25      	cmp	r2, #37	; 0x25
 800b5ca:	d1f9      	bne.n	800b5c0 <_svfiprintf_r+0x50>
 800b5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d0:	d00b      	beq.n	800b5ea <_svfiprintf_r+0x7a>
 800b5d2:	465b      	mov	r3, fp
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7ff ff6d 	bl	800b4b8 <__ssputs_r>
 800b5de:	3001      	adds	r0, #1
 800b5e0:	f000 80aa 	beq.w	800b738 <_svfiprintf_r+0x1c8>
 800b5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5e6:	445a      	add	r2, fp
 800b5e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f000 80a2 	beq.w	800b738 <_svfiprintf_r+0x1c8>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5fe:	f10a 0a01 	add.w	sl, sl, #1
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	9307      	str	r3, [sp, #28]
 800b606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b60a:	931a      	str	r3, [sp, #104]	; 0x68
 800b60c:	4654      	mov	r4, sl
 800b60e:	2205      	movs	r2, #5
 800b610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b614:	4851      	ldr	r0, [pc, #324]	; (800b75c <_svfiprintf_r+0x1ec>)
 800b616:	f000 fa43 	bl	800baa0 <memchr>
 800b61a:	9a04      	ldr	r2, [sp, #16]
 800b61c:	b9d8      	cbnz	r0, 800b656 <_svfiprintf_r+0xe6>
 800b61e:	06d0      	lsls	r0, r2, #27
 800b620:	bf44      	itt	mi
 800b622:	2320      	movmi	r3, #32
 800b624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b628:	0711      	lsls	r1, r2, #28
 800b62a:	bf44      	itt	mi
 800b62c:	232b      	movmi	r3, #43	; 0x2b
 800b62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b632:	f89a 3000 	ldrb.w	r3, [sl]
 800b636:	2b2a      	cmp	r3, #42	; 0x2a
 800b638:	d015      	beq.n	800b666 <_svfiprintf_r+0xf6>
 800b63a:	4654      	mov	r4, sl
 800b63c:	2000      	movs	r0, #0
 800b63e:	f04f 0c0a 	mov.w	ip, #10
 800b642:	9a07      	ldr	r2, [sp, #28]
 800b644:	4621      	mov	r1, r4
 800b646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b64a:	3b30      	subs	r3, #48	; 0x30
 800b64c:	2b09      	cmp	r3, #9
 800b64e:	d94e      	bls.n	800b6ee <_svfiprintf_r+0x17e>
 800b650:	b1b0      	cbz	r0, 800b680 <_svfiprintf_r+0x110>
 800b652:	9207      	str	r2, [sp, #28]
 800b654:	e014      	b.n	800b680 <_svfiprintf_r+0x110>
 800b656:	eba0 0308 	sub.w	r3, r0, r8
 800b65a:	fa09 f303 	lsl.w	r3, r9, r3
 800b65e:	4313      	orrs	r3, r2
 800b660:	46a2      	mov	sl, r4
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	e7d2      	b.n	800b60c <_svfiprintf_r+0x9c>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	1d19      	adds	r1, r3, #4
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	9103      	str	r1, [sp, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	bfbb      	ittet	lt
 800b672:	425b      	neglt	r3, r3
 800b674:	f042 0202 	orrlt.w	r2, r2, #2
 800b678:	9307      	strge	r3, [sp, #28]
 800b67a:	9307      	strlt	r3, [sp, #28]
 800b67c:	bfb8      	it	lt
 800b67e:	9204      	strlt	r2, [sp, #16]
 800b680:	7823      	ldrb	r3, [r4, #0]
 800b682:	2b2e      	cmp	r3, #46	; 0x2e
 800b684:	d10c      	bne.n	800b6a0 <_svfiprintf_r+0x130>
 800b686:	7863      	ldrb	r3, [r4, #1]
 800b688:	2b2a      	cmp	r3, #42	; 0x2a
 800b68a:	d135      	bne.n	800b6f8 <_svfiprintf_r+0x188>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	3402      	adds	r4, #2
 800b690:	1d1a      	adds	r2, r3, #4
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	9203      	str	r2, [sp, #12]
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfb8      	it	lt
 800b69a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b69e:	9305      	str	r3, [sp, #20]
 800b6a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b76c <_svfiprintf_r+0x1fc>
 800b6a4:	2203      	movs	r2, #3
 800b6a6:	4650      	mov	r0, sl
 800b6a8:	7821      	ldrb	r1, [r4, #0]
 800b6aa:	f000 f9f9 	bl	800baa0 <memchr>
 800b6ae:	b140      	cbz	r0, 800b6c2 <_svfiprintf_r+0x152>
 800b6b0:	2340      	movs	r3, #64	; 0x40
 800b6b2:	eba0 000a 	sub.w	r0, r0, sl
 800b6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	3401      	adds	r4, #1
 800b6be:	4303      	orrs	r3, r0
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c6:	2206      	movs	r2, #6
 800b6c8:	4825      	ldr	r0, [pc, #148]	; (800b760 <_svfiprintf_r+0x1f0>)
 800b6ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ce:	f000 f9e7 	bl	800baa0 <memchr>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d038      	beq.n	800b748 <_svfiprintf_r+0x1d8>
 800b6d6:	4b23      	ldr	r3, [pc, #140]	; (800b764 <_svfiprintf_r+0x1f4>)
 800b6d8:	bb1b      	cbnz	r3, 800b722 <_svfiprintf_r+0x1b2>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	3307      	adds	r3, #7
 800b6de:	f023 0307 	bic.w	r3, r3, #7
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	9303      	str	r3, [sp, #12]
 800b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e8:	4433      	add	r3, r6
 800b6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ec:	e767      	b.n	800b5be <_svfiprintf_r+0x4e>
 800b6ee:	460c      	mov	r4, r1
 800b6f0:	2001      	movs	r0, #1
 800b6f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6f6:	e7a5      	b.n	800b644 <_svfiprintf_r+0xd4>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f04f 0c0a 	mov.w	ip, #10
 800b6fe:	4619      	mov	r1, r3
 800b700:	3401      	adds	r4, #1
 800b702:	9305      	str	r3, [sp, #20]
 800b704:	4620      	mov	r0, r4
 800b706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b70a:	3a30      	subs	r2, #48	; 0x30
 800b70c:	2a09      	cmp	r2, #9
 800b70e:	d903      	bls.n	800b718 <_svfiprintf_r+0x1a8>
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0c5      	beq.n	800b6a0 <_svfiprintf_r+0x130>
 800b714:	9105      	str	r1, [sp, #20]
 800b716:	e7c3      	b.n	800b6a0 <_svfiprintf_r+0x130>
 800b718:	4604      	mov	r4, r0
 800b71a:	2301      	movs	r3, #1
 800b71c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b720:	e7f0      	b.n	800b704 <_svfiprintf_r+0x194>
 800b722:	ab03      	add	r3, sp, #12
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	462a      	mov	r2, r5
 800b728:	4638      	mov	r0, r7
 800b72a:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <_svfiprintf_r+0x1f8>)
 800b72c:	a904      	add	r1, sp, #16
 800b72e:	f3af 8000 	nop.w
 800b732:	1c42      	adds	r2, r0, #1
 800b734:	4606      	mov	r6, r0
 800b736:	d1d6      	bne.n	800b6e6 <_svfiprintf_r+0x176>
 800b738:	89ab      	ldrh	r3, [r5, #12]
 800b73a:	065b      	lsls	r3, r3, #25
 800b73c:	f53f af2c 	bmi.w	800b598 <_svfiprintf_r+0x28>
 800b740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b742:	b01d      	add	sp, #116	; 0x74
 800b744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b748:	ab03      	add	r3, sp, #12
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	462a      	mov	r2, r5
 800b74e:	4638      	mov	r0, r7
 800b750:	4b05      	ldr	r3, [pc, #20]	; (800b768 <_svfiprintf_r+0x1f8>)
 800b752:	a904      	add	r1, sp, #16
 800b754:	f000 f87c 	bl	800b850 <_printf_i>
 800b758:	e7eb      	b.n	800b732 <_svfiprintf_r+0x1c2>
 800b75a:	bf00      	nop
 800b75c:	08012418 	.word	0x08012418
 800b760:	08012422 	.word	0x08012422
 800b764:	00000000 	.word	0x00000000
 800b768:	0800b4b9 	.word	0x0800b4b9
 800b76c:	0801241e 	.word	0x0801241e

0800b770 <_printf_common>:
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	4616      	mov	r6, r2
 800b776:	4699      	mov	r9, r3
 800b778:	688a      	ldr	r2, [r1, #8]
 800b77a:	690b      	ldr	r3, [r1, #16]
 800b77c:	4607      	mov	r7, r0
 800b77e:	4293      	cmp	r3, r2
 800b780:	bfb8      	it	lt
 800b782:	4613      	movlt	r3, r2
 800b784:	6033      	str	r3, [r6, #0]
 800b786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b78a:	460c      	mov	r4, r1
 800b78c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b790:	b10a      	cbz	r2, 800b796 <_printf_common+0x26>
 800b792:	3301      	adds	r3, #1
 800b794:	6033      	str	r3, [r6, #0]
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	0699      	lsls	r1, r3, #26
 800b79a:	bf42      	ittt	mi
 800b79c:	6833      	ldrmi	r3, [r6, #0]
 800b79e:	3302      	addmi	r3, #2
 800b7a0:	6033      	strmi	r3, [r6, #0]
 800b7a2:	6825      	ldr	r5, [r4, #0]
 800b7a4:	f015 0506 	ands.w	r5, r5, #6
 800b7a8:	d106      	bne.n	800b7b8 <_printf_common+0x48>
 800b7aa:	f104 0a19 	add.w	sl, r4, #25
 800b7ae:	68e3      	ldr	r3, [r4, #12]
 800b7b0:	6832      	ldr	r2, [r6, #0]
 800b7b2:	1a9b      	subs	r3, r3, r2
 800b7b4:	42ab      	cmp	r3, r5
 800b7b6:	dc28      	bgt.n	800b80a <_printf_common+0x9a>
 800b7b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7bc:	1e13      	subs	r3, r2, #0
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	bf18      	it	ne
 800b7c2:	2301      	movne	r3, #1
 800b7c4:	0692      	lsls	r2, r2, #26
 800b7c6:	d42d      	bmi.n	800b824 <_printf_common+0xb4>
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7d0:	47c0      	blx	r8
 800b7d2:	3001      	adds	r0, #1
 800b7d4:	d020      	beq.n	800b818 <_printf_common+0xa8>
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	68e5      	ldr	r5, [r4, #12]
 800b7da:	f003 0306 	and.w	r3, r3, #6
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	bf18      	it	ne
 800b7e2:	2500      	movne	r5, #0
 800b7e4:	6832      	ldr	r2, [r6, #0]
 800b7e6:	f04f 0600 	mov.w	r6, #0
 800b7ea:	68a3      	ldr	r3, [r4, #8]
 800b7ec:	bf08      	it	eq
 800b7ee:	1aad      	subeq	r5, r5, r2
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	bf08      	it	eq
 800b7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	bfc4      	itt	gt
 800b7fc:	1a9b      	subgt	r3, r3, r2
 800b7fe:	18ed      	addgt	r5, r5, r3
 800b800:	341a      	adds	r4, #26
 800b802:	42b5      	cmp	r5, r6
 800b804:	d11a      	bne.n	800b83c <_printf_common+0xcc>
 800b806:	2000      	movs	r0, #0
 800b808:	e008      	b.n	800b81c <_printf_common+0xac>
 800b80a:	2301      	movs	r3, #1
 800b80c:	4652      	mov	r2, sl
 800b80e:	4649      	mov	r1, r9
 800b810:	4638      	mov	r0, r7
 800b812:	47c0      	blx	r8
 800b814:	3001      	adds	r0, #1
 800b816:	d103      	bne.n	800b820 <_printf_common+0xb0>
 800b818:	f04f 30ff 	mov.w	r0, #4294967295
 800b81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b820:	3501      	adds	r5, #1
 800b822:	e7c4      	b.n	800b7ae <_printf_common+0x3e>
 800b824:	2030      	movs	r0, #48	; 0x30
 800b826:	18e1      	adds	r1, r4, r3
 800b828:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b832:	4422      	add	r2, r4
 800b834:	3302      	adds	r3, #2
 800b836:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b83a:	e7c5      	b.n	800b7c8 <_printf_common+0x58>
 800b83c:	2301      	movs	r3, #1
 800b83e:	4622      	mov	r2, r4
 800b840:	4649      	mov	r1, r9
 800b842:	4638      	mov	r0, r7
 800b844:	47c0      	blx	r8
 800b846:	3001      	adds	r0, #1
 800b848:	d0e6      	beq.n	800b818 <_printf_common+0xa8>
 800b84a:	3601      	adds	r6, #1
 800b84c:	e7d9      	b.n	800b802 <_printf_common+0x92>
	...

0800b850 <_printf_i>:
 800b850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b854:	460c      	mov	r4, r1
 800b856:	7e27      	ldrb	r7, [r4, #24]
 800b858:	4691      	mov	r9, r2
 800b85a:	2f78      	cmp	r7, #120	; 0x78
 800b85c:	4680      	mov	r8, r0
 800b85e:	469a      	mov	sl, r3
 800b860:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b862:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b866:	d807      	bhi.n	800b878 <_printf_i+0x28>
 800b868:	2f62      	cmp	r7, #98	; 0x62
 800b86a:	d80a      	bhi.n	800b882 <_printf_i+0x32>
 800b86c:	2f00      	cmp	r7, #0
 800b86e:	f000 80d9 	beq.w	800ba24 <_printf_i+0x1d4>
 800b872:	2f58      	cmp	r7, #88	; 0x58
 800b874:	f000 80a4 	beq.w	800b9c0 <_printf_i+0x170>
 800b878:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b87c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b880:	e03a      	b.n	800b8f8 <_printf_i+0xa8>
 800b882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b886:	2b15      	cmp	r3, #21
 800b888:	d8f6      	bhi.n	800b878 <_printf_i+0x28>
 800b88a:	a001      	add	r0, pc, #4	; (adr r0, 800b890 <_printf_i+0x40>)
 800b88c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b890:	0800b8e9 	.word	0x0800b8e9
 800b894:	0800b8fd 	.word	0x0800b8fd
 800b898:	0800b879 	.word	0x0800b879
 800b89c:	0800b879 	.word	0x0800b879
 800b8a0:	0800b879 	.word	0x0800b879
 800b8a4:	0800b879 	.word	0x0800b879
 800b8a8:	0800b8fd 	.word	0x0800b8fd
 800b8ac:	0800b879 	.word	0x0800b879
 800b8b0:	0800b879 	.word	0x0800b879
 800b8b4:	0800b879 	.word	0x0800b879
 800b8b8:	0800b879 	.word	0x0800b879
 800b8bc:	0800ba0b 	.word	0x0800ba0b
 800b8c0:	0800b92d 	.word	0x0800b92d
 800b8c4:	0800b9ed 	.word	0x0800b9ed
 800b8c8:	0800b879 	.word	0x0800b879
 800b8cc:	0800b879 	.word	0x0800b879
 800b8d0:	0800ba2d 	.word	0x0800ba2d
 800b8d4:	0800b879 	.word	0x0800b879
 800b8d8:	0800b92d 	.word	0x0800b92d
 800b8dc:	0800b879 	.word	0x0800b879
 800b8e0:	0800b879 	.word	0x0800b879
 800b8e4:	0800b9f5 	.word	0x0800b9f5
 800b8e8:	680b      	ldr	r3, [r1, #0]
 800b8ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	600a      	str	r2, [r1, #0]
 800b8f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e0a4      	b.n	800ba46 <_printf_i+0x1f6>
 800b8fc:	6825      	ldr	r5, [r4, #0]
 800b8fe:	6808      	ldr	r0, [r1, #0]
 800b900:	062e      	lsls	r6, r5, #24
 800b902:	f100 0304 	add.w	r3, r0, #4
 800b906:	d50a      	bpl.n	800b91e <_printf_i+0xce>
 800b908:	6805      	ldr	r5, [r0, #0]
 800b90a:	600b      	str	r3, [r1, #0]
 800b90c:	2d00      	cmp	r5, #0
 800b90e:	da03      	bge.n	800b918 <_printf_i+0xc8>
 800b910:	232d      	movs	r3, #45	; 0x2d
 800b912:	426d      	negs	r5, r5
 800b914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b918:	230a      	movs	r3, #10
 800b91a:	485e      	ldr	r0, [pc, #376]	; (800ba94 <_printf_i+0x244>)
 800b91c:	e019      	b.n	800b952 <_printf_i+0x102>
 800b91e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b922:	6805      	ldr	r5, [r0, #0]
 800b924:	600b      	str	r3, [r1, #0]
 800b926:	bf18      	it	ne
 800b928:	b22d      	sxthne	r5, r5
 800b92a:	e7ef      	b.n	800b90c <_printf_i+0xbc>
 800b92c:	680b      	ldr	r3, [r1, #0]
 800b92e:	6825      	ldr	r5, [r4, #0]
 800b930:	1d18      	adds	r0, r3, #4
 800b932:	6008      	str	r0, [r1, #0]
 800b934:	0628      	lsls	r0, r5, #24
 800b936:	d501      	bpl.n	800b93c <_printf_i+0xec>
 800b938:	681d      	ldr	r5, [r3, #0]
 800b93a:	e002      	b.n	800b942 <_printf_i+0xf2>
 800b93c:	0669      	lsls	r1, r5, #25
 800b93e:	d5fb      	bpl.n	800b938 <_printf_i+0xe8>
 800b940:	881d      	ldrh	r5, [r3, #0]
 800b942:	2f6f      	cmp	r7, #111	; 0x6f
 800b944:	bf0c      	ite	eq
 800b946:	2308      	moveq	r3, #8
 800b948:	230a      	movne	r3, #10
 800b94a:	4852      	ldr	r0, [pc, #328]	; (800ba94 <_printf_i+0x244>)
 800b94c:	2100      	movs	r1, #0
 800b94e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b952:	6866      	ldr	r6, [r4, #4]
 800b954:	2e00      	cmp	r6, #0
 800b956:	bfa8      	it	ge
 800b958:	6821      	ldrge	r1, [r4, #0]
 800b95a:	60a6      	str	r6, [r4, #8]
 800b95c:	bfa4      	itt	ge
 800b95e:	f021 0104 	bicge.w	r1, r1, #4
 800b962:	6021      	strge	r1, [r4, #0]
 800b964:	b90d      	cbnz	r5, 800b96a <_printf_i+0x11a>
 800b966:	2e00      	cmp	r6, #0
 800b968:	d04d      	beq.n	800ba06 <_printf_i+0x1b6>
 800b96a:	4616      	mov	r6, r2
 800b96c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b970:	fb03 5711 	mls	r7, r3, r1, r5
 800b974:	5dc7      	ldrb	r7, [r0, r7]
 800b976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b97a:	462f      	mov	r7, r5
 800b97c:	42bb      	cmp	r3, r7
 800b97e:	460d      	mov	r5, r1
 800b980:	d9f4      	bls.n	800b96c <_printf_i+0x11c>
 800b982:	2b08      	cmp	r3, #8
 800b984:	d10b      	bne.n	800b99e <_printf_i+0x14e>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	07df      	lsls	r7, r3, #31
 800b98a:	d508      	bpl.n	800b99e <_printf_i+0x14e>
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	6861      	ldr	r1, [r4, #4]
 800b990:	4299      	cmp	r1, r3
 800b992:	bfde      	ittt	le
 800b994:	2330      	movle	r3, #48	; 0x30
 800b996:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b99a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b99e:	1b92      	subs	r2, r2, r6
 800b9a0:	6122      	str	r2, [r4, #16]
 800b9a2:	464b      	mov	r3, r9
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	f8cd a000 	str.w	sl, [sp]
 800b9ac:	aa03      	add	r2, sp, #12
 800b9ae:	f7ff fedf 	bl	800b770 <_printf_common>
 800b9b2:	3001      	adds	r0, #1
 800b9b4:	d14c      	bne.n	800ba50 <_printf_i+0x200>
 800b9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ba:	b004      	add	sp, #16
 800b9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c0:	4834      	ldr	r0, [pc, #208]	; (800ba94 <_printf_i+0x244>)
 800b9c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9c6:	680e      	ldr	r6, [r1, #0]
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	f856 5b04 	ldr.w	r5, [r6], #4
 800b9ce:	061f      	lsls	r7, r3, #24
 800b9d0:	600e      	str	r6, [r1, #0]
 800b9d2:	d514      	bpl.n	800b9fe <_printf_i+0x1ae>
 800b9d4:	07d9      	lsls	r1, r3, #31
 800b9d6:	bf44      	itt	mi
 800b9d8:	f043 0320 	orrmi.w	r3, r3, #32
 800b9dc:	6023      	strmi	r3, [r4, #0]
 800b9de:	b91d      	cbnz	r5, 800b9e8 <_printf_i+0x198>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	f023 0320 	bic.w	r3, r3, #32
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	e7af      	b.n	800b94c <_printf_i+0xfc>
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	f043 0320 	orr.w	r3, r3, #32
 800b9f2:	6023      	str	r3, [r4, #0]
 800b9f4:	2378      	movs	r3, #120	; 0x78
 800b9f6:	4828      	ldr	r0, [pc, #160]	; (800ba98 <_printf_i+0x248>)
 800b9f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9fc:	e7e3      	b.n	800b9c6 <_printf_i+0x176>
 800b9fe:	065e      	lsls	r6, r3, #25
 800ba00:	bf48      	it	mi
 800ba02:	b2ad      	uxthmi	r5, r5
 800ba04:	e7e6      	b.n	800b9d4 <_printf_i+0x184>
 800ba06:	4616      	mov	r6, r2
 800ba08:	e7bb      	b.n	800b982 <_printf_i+0x132>
 800ba0a:	680b      	ldr	r3, [r1, #0]
 800ba0c:	6826      	ldr	r6, [r4, #0]
 800ba0e:	1d1d      	adds	r5, r3, #4
 800ba10:	6960      	ldr	r0, [r4, #20]
 800ba12:	600d      	str	r5, [r1, #0]
 800ba14:	0635      	lsls	r5, r6, #24
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	d501      	bpl.n	800ba1e <_printf_i+0x1ce>
 800ba1a:	6018      	str	r0, [r3, #0]
 800ba1c:	e002      	b.n	800ba24 <_printf_i+0x1d4>
 800ba1e:	0671      	lsls	r1, r6, #25
 800ba20:	d5fb      	bpl.n	800ba1a <_printf_i+0x1ca>
 800ba22:	8018      	strh	r0, [r3, #0]
 800ba24:	2300      	movs	r3, #0
 800ba26:	4616      	mov	r6, r2
 800ba28:	6123      	str	r3, [r4, #16]
 800ba2a:	e7ba      	b.n	800b9a2 <_printf_i+0x152>
 800ba2c:	680b      	ldr	r3, [r1, #0]
 800ba2e:	1d1a      	adds	r2, r3, #4
 800ba30:	600a      	str	r2, [r1, #0]
 800ba32:	681e      	ldr	r6, [r3, #0]
 800ba34:	2100      	movs	r1, #0
 800ba36:	4630      	mov	r0, r6
 800ba38:	6862      	ldr	r2, [r4, #4]
 800ba3a:	f000 f831 	bl	800baa0 <memchr>
 800ba3e:	b108      	cbz	r0, 800ba44 <_printf_i+0x1f4>
 800ba40:	1b80      	subs	r0, r0, r6
 800ba42:	6060      	str	r0, [r4, #4]
 800ba44:	6863      	ldr	r3, [r4, #4]
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba4e:	e7a8      	b.n	800b9a2 <_printf_i+0x152>
 800ba50:	4632      	mov	r2, r6
 800ba52:	4649      	mov	r1, r9
 800ba54:	4640      	mov	r0, r8
 800ba56:	6923      	ldr	r3, [r4, #16]
 800ba58:	47d0      	blx	sl
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	d0ab      	beq.n	800b9b6 <_printf_i+0x166>
 800ba5e:	6823      	ldr	r3, [r4, #0]
 800ba60:	079b      	lsls	r3, r3, #30
 800ba62:	d413      	bmi.n	800ba8c <_printf_i+0x23c>
 800ba64:	68e0      	ldr	r0, [r4, #12]
 800ba66:	9b03      	ldr	r3, [sp, #12]
 800ba68:	4298      	cmp	r0, r3
 800ba6a:	bfb8      	it	lt
 800ba6c:	4618      	movlt	r0, r3
 800ba6e:	e7a4      	b.n	800b9ba <_printf_i+0x16a>
 800ba70:	2301      	movs	r3, #1
 800ba72:	4632      	mov	r2, r6
 800ba74:	4649      	mov	r1, r9
 800ba76:	4640      	mov	r0, r8
 800ba78:	47d0      	blx	sl
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d09b      	beq.n	800b9b6 <_printf_i+0x166>
 800ba7e:	3501      	adds	r5, #1
 800ba80:	68e3      	ldr	r3, [r4, #12]
 800ba82:	9903      	ldr	r1, [sp, #12]
 800ba84:	1a5b      	subs	r3, r3, r1
 800ba86:	42ab      	cmp	r3, r5
 800ba88:	dcf2      	bgt.n	800ba70 <_printf_i+0x220>
 800ba8a:	e7eb      	b.n	800ba64 <_printf_i+0x214>
 800ba8c:	2500      	movs	r5, #0
 800ba8e:	f104 0619 	add.w	r6, r4, #25
 800ba92:	e7f5      	b.n	800ba80 <_printf_i+0x230>
 800ba94:	08012429 	.word	0x08012429
 800ba98:	0801243a 	.word	0x0801243a

0800ba9c <__retarget_lock_acquire_recursive>:
 800ba9c:	4770      	bx	lr

0800ba9e <__retarget_lock_release_recursive>:
 800ba9e:	4770      	bx	lr

0800baa0 <memchr>:
 800baa0:	4603      	mov	r3, r0
 800baa2:	b510      	push	{r4, lr}
 800baa4:	b2c9      	uxtb	r1, r1
 800baa6:	4402      	add	r2, r0
 800baa8:	4293      	cmp	r3, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	d101      	bne.n	800bab2 <memchr+0x12>
 800baae:	2000      	movs	r0, #0
 800bab0:	e003      	b.n	800baba <memchr+0x1a>
 800bab2:	7804      	ldrb	r4, [r0, #0]
 800bab4:	3301      	adds	r3, #1
 800bab6:	428c      	cmp	r4, r1
 800bab8:	d1f6      	bne.n	800baa8 <memchr+0x8>
 800baba:	bd10      	pop	{r4, pc}

0800babc <memmove>:
 800babc:	4288      	cmp	r0, r1
 800babe:	b510      	push	{r4, lr}
 800bac0:	eb01 0402 	add.w	r4, r1, r2
 800bac4:	d902      	bls.n	800bacc <memmove+0x10>
 800bac6:	4284      	cmp	r4, r0
 800bac8:	4623      	mov	r3, r4
 800baca:	d807      	bhi.n	800badc <memmove+0x20>
 800bacc:	1e43      	subs	r3, r0, #1
 800bace:	42a1      	cmp	r1, r4
 800bad0:	d008      	beq.n	800bae4 <memmove+0x28>
 800bad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bada:	e7f8      	b.n	800bace <memmove+0x12>
 800badc:	4601      	mov	r1, r0
 800bade:	4402      	add	r2, r0
 800bae0:	428a      	cmp	r2, r1
 800bae2:	d100      	bne.n	800bae6 <memmove+0x2a>
 800bae4:	bd10      	pop	{r4, pc}
 800bae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baee:	e7f7      	b.n	800bae0 <memmove+0x24>

0800baf0 <_realloc_r>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	4607      	mov	r7, r0
 800baf4:	4614      	mov	r4, r2
 800baf6:	460e      	mov	r6, r1
 800baf8:	b921      	cbnz	r1, 800bb04 <_realloc_r+0x14>
 800bafa:	4611      	mov	r1, r2
 800bafc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb00:	f7ff bbe4 	b.w	800b2cc <_malloc_r>
 800bb04:	b922      	cbnz	r2, 800bb10 <_realloc_r+0x20>
 800bb06:	f7ff fb95 	bl	800b234 <_free_r>
 800bb0a:	4625      	mov	r5, r4
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb10:	f000 f814 	bl	800bb3c <_malloc_usable_size_r>
 800bb14:	42a0      	cmp	r0, r4
 800bb16:	d20f      	bcs.n	800bb38 <_realloc_r+0x48>
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f7ff fbd6 	bl	800b2cc <_malloc_r>
 800bb20:	4605      	mov	r5, r0
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d0f2      	beq.n	800bb0c <_realloc_r+0x1c>
 800bb26:	4631      	mov	r1, r6
 800bb28:	4622      	mov	r2, r4
 800bb2a:	f7ff fb6d 	bl	800b208 <memcpy>
 800bb2e:	4631      	mov	r1, r6
 800bb30:	4638      	mov	r0, r7
 800bb32:	f7ff fb7f 	bl	800b234 <_free_r>
 800bb36:	e7e9      	b.n	800bb0c <_realloc_r+0x1c>
 800bb38:	4635      	mov	r5, r6
 800bb3a:	e7e7      	b.n	800bb0c <_realloc_r+0x1c>

0800bb3c <_malloc_usable_size_r>:
 800bb3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb40:	1f18      	subs	r0, r3, #4
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	bfbc      	itt	lt
 800bb46:	580b      	ldrlt	r3, [r1, r0]
 800bb48:	18c0      	addlt	r0, r0, r3
 800bb4a:	4770      	bx	lr

0800bb4c <_init>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	bf00      	nop
 800bb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb52:	bc08      	pop	{r3}
 800bb54:	469e      	mov	lr, r3
 800bb56:	4770      	bx	lr

0800bb58 <_fini>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr
